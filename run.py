"""
Created on May 22, 2016

This should be a simple minimalist run file. It's only responsibility should be to parse the arguments (which agent, user simulator to use) and launch a dialog simulation.

Rule-agent: python run.py --agt 6 --usr 1 --max_turn 40 --episodes 150 --movie_kb_path .\deep_dialog\data\movie_kb.1k.p --run_mode 2

kb:
movie_kb.1k.p: 94% success rate
movie_kb.v2.p: 36% success rate

user goal files:
first turn: user_goals_first_turn_template.v2.p
all turns: user_goals_all_turns_template.p
user_goals_first_turn_template.part.movie.v1.p: a subset of user goal. [Please use this one, the upper bound success rate on movie_kb.1k.json is 0.9765.]

Commands:
Rule: python run.py --agt 5 --usr 1 --max_turn 40 --episodes 150 --kb_path .\deep_dialog\data\movie_kb.1k.p --goal_file_path .\deep_dialog\data\user_goals_first_turn_template.part.movie.v1.p --intent_err_prob 0.00 --slot_err_prob 0.00 --episodes 500 --act_level 1 --run_mode 1

Training:
RL: python run.py --agt 9 --usr 1 --max_turn 40 --kb_path .\deep_dialog\data\movie_kb.1k.p --dqn_hidden_size 80 --experience_replay_pool_size 1000 --episodes 500 --simulation_epoch_size 100 --write_model_dir .\deep_dialog\checkpoints\rl_agent\ --run_mode 3 --act_level 0 --slot_err_prob 0.05 --intent_err_prob 0.00 --batch_size 16 --goal_file_path .\deep_dialog\data\user_goals_first_turn_template.part.movie.v1.p --warm_start 1 --warm_start_epochs 120

Predict:
RL: python run.py --agt 9 --usr 1 --max_turn 40 --kb_path .\deep_dialog\data\movie_kb.1k.p --dqn_hidden_size 80 --experience_replay_pool_size 1000 --episodes 300 --simulation_epoch_size 100 --write_model_dir .\deep_dialog\checkpoints\rl_agent\ --slot_err_prob 0.00 --intent_err_prob 0.00 --batch_size 16 --goal_file_path .\deep_dialog\data\user_goals_first_turn_template.part.movie.v1.p --episodes 200 --trained_model_path .\deep_dialog\checkpoints\rl_agent\agt_9_22_30_0.37000.p --run_mode 3

@author: xiul, t-zalipt
"""

import itertools
import random
import argparse, json, copy, os
import cPickle as pickle

import torch
from collections import deque

from deep_dialog.dialog_system import DialogManager, text_to_dict
from deep_dialog.agents import AgentCmd, InformAgent, RequestAllAgent, RandomAgent, EchoAgent, RequestBasicsAgent, AgentDQN, RequestInformSlotAgent
from deep_dialog.usersims import RuleSimulator, RuleRestaurantSimulator, RuleTaxiSimulator

from deep_dialog import dialog_config
from deep_dialog.dialog_config import *

from deep_dialog.nlu import nlu
from deep_dialog.nlg import nlg


import numpy as np
import collections



""" 
Launch a dialog simulation per the command line arguments
This function instantiates a user_simulator, an agent, and a dialog system.
Next, it triggers the simulator to run for the specified number of episodes.
"""

""" load action """
def load_actions(sys_req_slots, sys_inf_slots):
    dialog_config.feasible_actions = [
        {'diaact':"confirm_question", 'inform_slots':{}, 'request_slots':{}},
        {'diaact':"confirm_answer", 'inform_slots':{}, 'request_slots':{}},
        {'diaact':"thanks", 'inform_slots':{}, 'request_slots':{}},
        {'diaact':"deny", 'inform_slots':{}, 'request_slots':{}},
    ]

    for slot in sys_inf_slots:
        dialog_config.feasible_actions.append({'diaact':'inform', 'inform_slots':{slot:"PLACEHOLDER"}, 'request_slots':{}})

    for slot in sys_req_slots:
        dialog_config.feasible_actions.append({'diaact':'request', 'inform_slots':{}, 'request_slots': {slot: "UNK"}})


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--num", dest='num', type=int, default=0)
    parser.add_argument('--dict_path', dest='dict_path', type=str, default='./deep_dialog/data_restaurant/slot_dict.v2.p', help='path to the .json dictionary file')
    parser.add_argument('--kb_path', dest='kb_path', type=str, default='./deep_dialog/data_restaurant/restaurant.kb.1k.v1.p', help='path to the movie kb .json file')
    parser.add_argument('--act_set', dest='act_set', type=str, default='./deep_dialog/data_restaurant/dia_acts.txt', help='path to dia act set; none for loading from labeled file')
    parser.add_argument('--slot_set', dest='slot_set', type=str, default='./deep_dialog/data_restaurant/restaurant_slots.txt', help='path to slot set; none for loading from labeled file')
    parser.add_argument('--goal_file_path', dest='goal_file_path', type=str, default='./deep_dialog/data_restaurant/user_goals_first.v1.p', help='a list of user goals')
    parser.add_argument('--diaact_nl_pairs', dest='diaact_nl_pairs', type=str, default='./deep_dialog/data_restaurant/sim_dia_act_nl_pairs.v2.json', help='path to the pre-defined dia_act&NL pairs')

    parser.add_argument('--max_turn', dest='max_turn', default=20, type=int, help='maximum length of each dialog (default=20, 0=no maximum length)')
    parser.add_argument('--episodes', dest='episodes', default=1, type=int, help='Total number of episodes to run (default=1)')
    parser.add_argument('--slot_err_prob', dest='slot_err_prob', default=0.05, type=float, help='the slot err probability')
    parser.add_argument('--slot_err_mode', dest='slot_err_mode', default=0, type=int, help='slot_err_mode: 0 for slot_val only; 1 for three errs')
    parser.add_argument('--intent_err_prob', dest='intent_err_prob', default=0.05, type=float, help='the intent err probability')
    
    parser.add_argument('--agt', dest='agt', default=0, type=int, help='Select an agent: 0 for a command line input, 1-6 for rule based agents')
    parser.add_argument('--usr', dest='usr', default=0, type=int, help='Select a user simulator. 0 is a Frozen user simulator.')
    
    parser.add_argument('--epsilon', dest='epsilon', type=float, default=0, help='Epsilon to determine stochasticity of epsilon-greedy agent policies')
    
    # load NLG & NLU model
    parser.add_argument('--nlg_model_path', dest='nlg_model_path', type=str, default='./deep_dialog/models/nlg/restaurant/lstm_tanh_[1532068150.19]_98_99_294_0.983.p', help='path to model file')
    parser.add_argument('--nlu_model_path', dest='nlu_model_path', type=str, default='./deep_dialog/models/nlu/restaurant/lstm_[1532107808.26]_68_74_20_0.997.p', help='path to the NLU model file')
    
    parser.add_argument('--act_level', dest='act_level', type=int, default=0, help='0 for dia_act level; 1 for NL level')
    parser.add_argument('--run_mode', dest='run_mode', type=int, default=0, help='run_mode: 0 for default NL; 1 for dia_act; 2 for both')
    parser.add_argument('--auto_suggest', dest='auto_suggest', type=int, default=0, help='0 for no auto_suggest; 1 for auto_suggest')
    parser.add_argument('--cmd_input_mode', dest='cmd_input_mode', type=int, default=0, help='run_mode: 0 for NL; 1 for dia_act')
    
    # RL agent parameters
    parser.add_argument('--experience_replay_pool_size', dest='experience_replay_pool_size', type=int, default=1000, help='the size for experience replay')
    parser.add_argument('--dqn_hidden_size', dest='dqn_hidden_size', type=int, default=60, help='the hidden size for DQN')
    parser.add_argument('--batch_size', dest='batch_size', type=int, default=16, help='batch size')
    parser.add_argument('--gamma', dest='gamma', type=float, default=0.9, help='gamma for DQN')
    parser.add_argument('--predict_mode', dest='predict_mode', type=bool, default=False, help='predict model for DQN')
    parser.add_argument('--simulation_epoch_size', dest='simulation_epoch_size', type=int, default=50, help='the size of validation set')
    parser.add_argument('--warm_start', dest='warm_start', type=int, default=1, help='0: no warm start; 1: warm start for training')
    parser.add_argument('--warm_start_epochs', dest='warm_start_epochs', type=int, default=100, help='the number of epochs for warm start')
    
    parser.add_argument('--trained_model_path', dest='trained_model_path', type=str, default=None, help='the path for trained model')
    parser.add_argument('-o', '--write_model_dir', dest='write_model_dir', type=str, default='./deep_dialog/checkpoints/', help='write model to disk') 
    parser.add_argument('--save_check_point', dest='save_check_point', type=int, default=10, help='number of epochs for saving model')
     
    parser.add_argument('--success_rate_threshold', dest='success_rate_threshold', type=float, default=0.3, help='the threshold for success rate')
    
    parser.add_argument('--split_fold', dest='split_fold', default=5, type=int, help='the number of folders to split the user goal')
    parser.add_argument('--learning_phase', dest='learning_phase', default='all', type=str, help='train/test/all; default is all')
    parser.add_argument('--dueling_dqn', type=int, default=1)
    parser.add_argument('--double_dqn', type=int, default=1)
    parser.add_argument('--icm', type=int, default=1)
    parser.add_argument('--per', type=int, default=1)
    parser.add_argument('--noisy', type=int, default=1)
    parser.add_argument('--distributional', type=int, default=1)


    args = parser.parse_args()
    params = vars(args)

    print 'Dialog Parameters: '
    print json.dumps(params, indent=2)


max_turn = params['max_turn']
num_episodes = params['episodes']
num = params['num']
agt = params['agt']
usr = params['usr']

dict_path = params['dict_path']
goal_file_path = params['goal_file_path']

# load the user goals from .p file
all_goal_set = pickle.load(open(goal_file_path, 'rb'))
num_goals = len(all_goal_set)
# split goal set
split_fold = params.get('split_fold', 5)
goal_set = {'train':[], 'valid':[], 'test':[], 'all':[]}
for u_goal_id, u_goal in enumerate(all_goal_set):
    if u_goal_id % split_fold == 1: goal_set['test'].append(u_goal)
    else: goal_set['train'].append(u_goal)
    goal_set['all'].append(u_goal)
# end split goal set

kb_path = params['kb_path']
kb = pickle.load(open(kb_path, 'rb'))

act_set = text_to_dict(params['act_set'])
slot_set = text_to_dict(params['slot_set'])

dict_change={}
dict_goal_now={}

for i in range(len(all_goal_set)):
    dict_change[i] = False
    dict_goal_now[i] = all_goal_set[i]
subgoal_number = {}
record_fail_number = {}


for i in range(len(all_goal_set)):
    dict_change[i] = False
    dict_goal_now[i] = all_goal_set[i]
    subgoal_number[i] = len(dict_goal_now[i]['inform_slots']) + len(dict_goal_now[i]['request_slots'])
    record_fail_number[i] = []


################################################################################
# a movie dictionary for user simulator - slot:possible values
################################################################################
movie_dictionary = pickle.load(open(dict_path, 'rb'))

dialog_config.run_mode = params['run_mode']
dialog_config.auto_suggest = params['auto_suggest']

################################################################################
#   Parameters for Agents
################################################################################
agent_params = {}
agent_params['max_turn'] = max_turn
agent_params['epsilon'] = params['epsilon']
agent_params['agent_run_mode'] = params['run_mode']
agent_params['agent_act_level'] = params['act_level']

agent_params['experience_replay_pool_size'] = params['experience_replay_pool_size']
agent_params['dqn_hidden_size'] = params['dqn_hidden_size']
agent_params['batch_size'] = params['batch_size']
agent_params['gamma'] = params['gamma']
agent_params['predict_mode'] = params['predict_mode']
agent_params['trained_model_path'] = params['trained_model_path']
agent_params['warm_start'] = params['warm_start']
agent_params['cmd_input_mode'] = params['cmd_input_mode']
agent_params['dueling_dqn'] = params['dueling_dqn']
agent_params['double_dqn'] = params['double_dqn']
agent_params['icm'] = params['icm']
agent_params['per'] = params['per']
agent_params['noisy'] = params['noisy']
agent_params['distributional'] = params['distributional']

if agt == 0:
    agent = AgentCmd(kb, act_set, slot_set, agent_params)
elif agt == 1:
    agent = InformAgent(kb, act_set, slot_set, agent_params)
elif agt == 2:
    agent = RequestAllAgent(kb, act_set, slot_set, agent_params)
elif agt == 3:
    agent = RandomAgent(kb, act_set, slot_set, agent_params)
elif agt == 4:
    #agent = EchoAgent(kb, act_set, slot_set, agent_params)
    agent = RequestInformSlotAgent(kb, act_set, slot_set, agent_params, movie_request_slots, movie_inform_slots)
elif agt == 5: # movie request rule agent
    agent = RequestBasicsAgent(kb, act_set, slot_set, agent_params, movie_request_slots)
elif agt == 6: # restaurant request rule agent
    agent = RequestBasicsAgent(kb, act_set, slot_set, agent_params, restaurant_request_slots)
elif agt == 7: # taxi request agent
    agent = RequestBasicsAgent(kb, act_set, slot_set, agent_params, taxi_request_slots)
elif agt == 8: # taxi request-inform rule agent
    agent = RequestInformSlotAgent(kb, act_set, slot_set, agent_params, taxi_request_slots, taxi_inform_slots)
elif agt == 9: # DQN agent for movie domain
    agent = AgentDQN(kb, act_set, slot_set, agent_params)
    agent.initialize_config(movie_request_slots, movie_inform_slots)

    goal_sort = [(17, 5), (20, 5), (22, 5), (23, 5), (26, 5), (29, 5), (31, 5), (34, 5), (35, 5), (37, 5), (38, 5), (40, 5), (43, 5), (50, 5), (51, 5), (52, 5), (53, 5), (54, 5), (56, 5), (58, 5), (63, 5), (75, 5), (79, 5), (89, 5), (91, 5), (99, 5), (101, 5), (104, 5), (119, 5), (126, 5), (1, 6), (3, 6), (4, 6), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6), (18, 6), (19, 6), (21, 6), (24, 6), (25, 6), (27, 6), (30, 6), (33, 6), (36, 6), (42, 6), (44, 6), (45, 6), (46, 6), (47, 6), (48, 6), (49, 6), (55, 6), (59, 6), (61, 6), (62, 6), (64, 6), (65, 6), (66, 6), (67, 6), (68, 6), (69, 6), (71, 6), (74, 6), (78, 6), (80, 6), (81, 6), (84, 6), (86, 6), (87, 6), (88, 6), (93, 6), (94, 6), (96, 6), (97, 6), (100, 6), (102, 6), (103, 6), (105, 6), (106, 6), (107, 6), (108, 6), (109, 6), (111, 6), (113, 6), (114, 6), (115, 6), (116, 6), (117, 6), (120, 6), (121, 6), (122, 6), (123, 6), (124, 6), (125, 6), (127, 6), (0, 7), (2, 7), (5, 7), (11, 7), (15, 7), (28, 7), (32, 7), (39, 7), (41, 7), (57, 7), (60, 7), (70, 7), (72, 7), (73, 7), (77, 7), (82, 7), (83, 7), (85, 7), (90, 7), (92, 7), (98, 7), (110, 7), (112, 7), (118, 7), (76, 8), (95, 9)]
    goal_sort_reverse = [(95, 9), (76, 8), (0, 7), (2, 7), (5, 7), (11, 7), (15, 7), (28, 7), (32, 7), (39, 7), (41, 7), (57, 7), (60, 7), (70, 7), (72, 7), (73, 7), (77, 7), (82, 7), (83, 7), (85, 7), (90, 7), (92, 7), (98, 7), (110, 7), (112, 7), (118, 7), (1, 6), (3, 6), (4, 6), (6, 6), (7, 6), (8, 6), (9, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6), (18, 6), (19, 6), (21, 6), (24, 6), (25, 6), (27, 6), (30, 6), (33, 6), (36, 6), (42, 6), (44, 6), (45, 6), (46, 6), (47, 6), (48, 6), (49, 6), (55, 6), (59, 6), (61, 6), (62, 6), (64, 6), (65, 6), (66, 6), (67, 6), (68, 6), (69, 6), (71, 6), (74, 6), (78, 6), (80, 6), (81, 6), (84, 6), (86, 6), (87, 6), (88, 6), (93, 6), (94, 6), (96, 6), (97, 6), (100, 6), (102, 6), (103, 6), (105, 6), (106, 6), (107, 6), (108, 6), (109, 6), (111, 6), (113, 6), (114, 6), (115, 6), (116, 6), (117, 6), (120, 6), (121, 6), (122, 6), (123, 6), (124, 6), (125, 6), (127, 6), (17, 5), (20, 5), (22, 5), (23, 5), (26, 5), (29, 5), (31, 5), (34, 5), (35, 5), (37, 5), (38, 5), (40, 5), (43, 5), (50, 5), (51, 5), (52, 5), (53, 5), (54, 5), (56, 5), (58, 5), (63, 5), (75, 5), (79, 5), (89, 5), (91, 5), (99, 5), (101, 5), (104, 5), (119, 5), (126, 5)]

elif agt == 10: # restaurant request-inform rule agent
    agent = RequestInformSlotAgent(kb, act_set, slot_set, agent_params, restaurant_request_slots, restaurant_inform_slots)
elif agt == 11: # taxi request-inform-cost rule agent
    agent = RequestInformSlotAgent(kb, act_set, slot_set, agent_params, taxi_request_slots, taxi_inform_cost_slots)
elif agt == 12: # DQN agent for restaurant domain
    load_actions(dialog_config.restaurant_sys_request_slots, dialog_config.restaurant_sys_inform_slots)
    agent = AgentDQN(kb, act_set, slot_set, agent_params)
    agent.initialize_config(restaurant_request_slots, restaurant_inform_slots)

    goal_sort = [(1, 5), (36, 5), (47, 5), (48, 5), (52, 5), (57, 5), (64, 5), (85, 5), (93, 5), (111, 5), (118, 5), (124, 5), (138, 5), (169, 5), (202, 5), (225, 5), (226, 5), (249, 5), (258, 5), (278, 5), (289, 5), (667, 5), (748, 5), (844, 5), (1013, 5), (1161, 5), (1166, 5), (1244, 5), (1415, 5), (1492, 5), (1537, 5), (1548, 5), (1805, 5), (1815, 5), (1883, 5), (1891, 5), (1899, 5), (1918, 5), (1923, 5), (1954, 5), (1979, 5), (2067, 5), (2141, 5), (2158, 5), (2229, 5), (2249, 5), (2338, 5), (2432, 5), (2585, 5), (2603, 5), (2619, 5), (2744, 5), (3378, 5), (3477, 5), (3478, 5), (0, 6), (18, 6), (20, 6), (26, 6), (33, 6), (55, 6), (62, 6), (80, 6), (89, 6), (94, 6), (105, 6), (117, 6), (122, 6), (134, 6), (152, 6), (167, 6), (179, 6), (182, 6), (190, 6), (193, 6), (199, 6), (201, 6), (207, 6), (210, 6), (221, 6), (237, 6), (243, 6), (247, 6), (262, 6), (266, 6), (268, 6), (291, 6), (293, 6), (296, 6), (297, 6), (299, 6), (315, 6), (325, 6), (329, 6), (334, 6), (340, 6), (342, 6), (345, 6), (347, 6), (353, 6), (355, 6), (358, 6), (359, 6), (362, 6), (367, 6), (370, 6), (371, 6), (374, 6), (387, 6), (390, 6), (392, 6), (396, 6), (397, 6), (400, 6), (405, 6), (410, 6), (412, 6), (413, 6), (416, 6), (423, 6), (425, 6), (437, 6), (439, 6), (441, 6), (455, 6), (456, 6), (458, 6), (459, 6), (460, 6), (463, 6), (468, 6), (477, 6), (479, 6), (481, 6), (484, 6), (488, 6), (497, 6), (499, 6), (517, 6), (521, 6), (524, 6), (539, 6), (549, 6), (552, 6), (553, 6), (562, 6), (564, 6), (567, 6), (575, 6), (576, 6), (578, 6), (581, 6), (587, 6), (588, 6), (591, 6), (595, 6), (600, 6), (612, 6), (613, 6), (614, 6), (621, 6), (622, 6), (628, 6), (633, 6), (641, 6), (646, 6), (647, 6), (652, 6), (654, 6), (659, 6), (661, 6), (662, 6), (666, 6), (681, 6), (688, 6), (695, 6), (696, 6), (705, 6), (707, 6), (718, 6), (719, 6), (720, 6), (721, 6), (722, 6), (723, 6), (726, 6), (728, 6), (729, 6), (731, 6), (732, 6), (739, 6), (741, 6), (743, 6), (744, 6), (747, 6), (752, 6), (753, 6), (754, 6), (757, 6), (758, 6), (760, 6), (762, 6), (763, 6), (765, 6), (769, 6), (775, 6), (776, 6), (781, 6), (805, 6), (811, 6), (816, 6), (832, 6), (851, 6), (862, 6), (866, 6), (875, 6), (901, 6), (904, 6), (946, 6), (962, 6), (963, 6), (970, 6), (982, 6), (1035, 6), (1050, 6), (1054, 6), (1056, 6), (1063, 6), (1081, 6), (1086, 6), (1087, 6), (1090, 6), (1093, 6), (1098, 6), (1103, 6), (1108, 6), (1114, 6), (1115, 6), (1122, 6), (1128, 6), (1130, 6), (1140, 6), (1146, 6), (1150, 6), (1154, 6), (1165, 6), (1172, 6), (1177, 6), (1180, 6), (1207, 6), (1225, 6), (1236, 6), (1238, 6), (1242, 6), (1245, 6), (1247, 6), (1262, 6), (1265, 6), (1276, 6), (1279, 6), (1283, 6), (1288, 6), (1291, 6), (1292, 6), (1293, 6), (1294, 6), (1305, 6), (1307, 6), (1311, 6), (1318, 6), (1325, 6), (1342, 6), (1352, 6), (1366, 6), (1372, 6), (1414, 6), (1428, 6), (1437, 6), (1453, 6), (1460, 6), (1463, 6), (1474, 6), (1476, 6), (1480, 6), (1482, 6), (1484, 6), (1488, 6), (1494, 6), (1507, 6), (1525, 6), (1527, 6), (1531, 6), (1534, 6), (1538, 6), (1601, 6), (1602, 6), (1605, 6), (1607, 6), (1618, 6), (1640, 6), (1704, 6), (1708, 6), (1711, 6), (1715, 6), (1716, 6), (1742, 6), (1756, 6), (1772, 6), (1794, 6), (1797, 6), (1801, 6), (1802, 6), (1813, 6), (1828, 6), (1829, 6), (1830, 6), (1837, 6), (1838, 6), (1845, 6), (1860, 6), (1864, 6), (1874, 6), (1879, 6), (1906, 6), (1920, 6), (1931, 6), (1942, 6), (1963, 6), (1974, 6), (1976, 6), (1984, 6), (1986, 6), (1991, 6), (1992, 6), (1993, 6), (1994, 6), (1998, 6), (1999, 6), (2000, 6), (2001, 6), (2002, 6), (2005, 6), (2006, 6), (2011, 6), (2014, 6), (2021, 6), (2023, 6), (2024, 6), (2025, 6), (2027, 6), (2028, 6), (2030, 6), (2031, 6), (2032, 6), (2034, 6), (2035, 6), (2038, 6), (2040, 6), (2041, 6), (2048, 6), (2049, 6), (2050, 6), (2052, 6), (2064, 6), (2076, 6), (2078, 6), (2084, 6), (2089, 6), (2097, 6), (2099, 6), (2103, 6), (2106, 6), (2107, 6), (2108, 6), (2111, 6), (2121, 6), (2127, 6), (2130, 6), (2138, 6), (2149, 6), (2155, 6), (2168, 6), (2173, 6), (2198, 6), (2205, 6), (2221, 6), (2231, 6), (2234, 6), (2241, 6), (2273, 6), (2305, 6), (2315, 6), (2317, 6), (2320, 6), (2362, 6), (2365, 6), (2366, 6), (2381, 6), (2382, 6), (2383, 6), (2388, 6), (2392, 6), (2402, 6), (2404, 6), (2418, 6), (2424, 6), (2437, 6), (2446, 6), (2457, 6), (2460, 6), (2479, 6), (2500, 6), (2539, 6), (2550, 6), (2562, 6), (2591, 6), (2599, 6), (2609, 6), (2616, 6), (2617, 6), (2623, 6), (2631, 6), (2633, 6), (2636, 6), (2645, 6), (2655, 6), (2660, 6), (2661, 6), (2691, 6), (2709, 6), (2711, 6), (2719, 6), (2726, 6), (2734, 6), (2742, 6), (2747, 6), (2750, 6), (2751, 6), (2753, 6), (2798, 6), (2826, 6), (2828, 6), (2838, 6), (2841, 6), (2851, 6), (2856, 6), (2860, 6), (2866, 6), (2878, 6), (2905, 6), (2910, 6), (2937, 6), (2970, 6), (2982, 6), (2986, 6), (2992, 6), (2997, 6), (3002, 6), (3013, 6), (3022, 6), (3026, 6), (3037, 6), (3046, 6), (3050, 6), (3052, 6), (3077, 6), (3086, 6), (3093, 6), (3112, 6), (3128, 6), (3131, 6), (3144, 6), (3151, 6), (3152, 6), (3156, 6), (3166, 6), (3175, 6), (3188, 6), (3197, 6), (3213, 6), (3214, 6), (3221, 6), (3222, 6), (3232, 6), (3238, 6), (3243, 6), (3255, 6), (3259, 6), (3293, 6), (3301, 6), (3315, 6), (3316, 6), (3338, 6), (3351, 6), (3362, 6), (3379, 6), (3388, 6), (3400, 6), (3403, 6), (3406, 6), (3412, 6), (3414, 6), (3415, 6), (3420, 6), (3422, 6), (3423, 6), (3426, 6), (3430, 6), (3434, 6), (3437, 6), (3442, 6), (3444, 6), (3445, 6), (3446, 6), (3448, 6), (3449, 6), (3451, 6), (3452, 6), (3453, 6), (3455, 6), (3458, 6), (3459, 6), (3461, 6), (3463, 6), (3465, 6), (3471, 6), (3473, 6), (3474, 6), (3476, 6), (3480, 6), (3486, 6), (3489, 6), (3490, 6), (3491, 6), (3492, 6), (3493, 6), (3494, 6), (3495, 6), (3497, 6), (3500, 6), (3503, 6), (3506, 6), (3507, 6), (3511, 6), (3512, 6), (3513, 6), (3516, 6), (3517, 6), (3519, 6), (3522, 6), (3524, 6), (8, 7), (11, 7), (15, 7), (17, 7), (19, 7), (22, 7), (28, 7), (29, 7), (31, 7), (32, 7), (37, 7), (38, 7), (40, 7), (41, 7), (43, 7), (44, 7), (46, 7), (50, 7), (53, 7), (58, 7), (60, 7), (61, 7), (71, 7), (72, 7), (77, 7), (78, 7), (81, 7), (82, 7), (86, 7), (91, 7), (97, 7), (98, 7), (99, 7), (103, 7), (104, 7), (108, 7), (110, 7), (113, 7), (115, 7), (119, 7), (125, 7), (127, 7), (128, 7), (137, 7), (140, 7), (141, 7), (143, 7), (147, 7), (148, 7), (149, 7), (151, 7), (153, 7), (158, 7), (159, 7), (164, 7), (168, 7), (170, 7), (171, 7), (174, 7), (175, 7), (181, 7), (187, 7), (192, 7), (194, 7), (197, 7), (204, 7), (205, 7), (206, 7), (212, 7), (214, 7), (215, 7), (224, 7), (230, 7), (232, 7), (239, 7), (242, 7), (245, 7), (250, 7), (253, 7), (256, 7), (260, 7), (261, 7), (267, 7), (269, 7), (271, 7), (273, 7), (275, 7), (279, 7), (281, 7), (285, 7), (286, 7), (290, 7), (298, 7), (300, 7), (307, 7), (311, 7), (314, 7), (318, 7), (324, 7), (328, 7), (332, 7), (333, 7), (335, 7), (338, 7), (343, 7), (349, 7), (350, 7), (351, 7), (352, 7), (354, 7), (357, 7), (363, 7), (364, 7), (366, 7), (372, 7), (373, 7), (375, 7), (376, 7), (384, 7), (388, 7), (389, 7), (391, 7), (394, 7), (395, 7), (399, 7), (401, 7), (402, 7), (403, 7), (404, 7), (406, 7), (408, 7), (409, 7), (411, 7), (415, 7), (417, 7), (418, 7), (419, 7), (421, 7), (422, 7), (424, 7), (427, 7), (429, 7), (430, 7), (431, 7), (435, 7), (436, 7), (438, 7), (440, 7), (443, 7), (444, 7), (445, 7), (446, 7), (447, 7), (448, 7), (449, 7), (450, 7), (451, 7), (452, 7), (453, 7), (454, 7), (461, 7), (462, 7), (464, 7), (465, 7), (466, 7), (469, 7), (470, 7), (472, 7), (473, 7), (474, 7), (476, 7), (478, 7), (480, 7), (482, 7), (485, 7), (486, 7), (489, 7), (492, 7), (493, 7), (495, 7), (498, 7), (500, 7), (501, 7), (503, 7), (504, 7), (507, 7), (509, 7), (511, 7), (512, 7), (514, 7), (520, 7), (522, 7), (523, 7), (525, 7), (526, 7), (527, 7), (528, 7), (532, 7), (533, 7), (536, 7), (538, 7), (540, 7), (542, 7), (543, 7), (544, 7), (545, 7), (551, 7), (554, 7), (555, 7), (557, 7), (558, 7), (559, 7), (560, 7), (565, 7), (569, 7), (571, 7), (573, 7), (574, 7), (577, 7), (579, 7), (582, 7), (583, 7), (584, 7), (586, 7), (592, 7), (594, 7), (596, 7), (601, 7), (605, 7), (608, 7), (610, 7), (611, 7), (615, 7), (619, 7), (620, 7), (623, 7), (625, 7), (626, 7), (629, 7), (631, 7), (632, 7), (634, 7), (635, 7), (638, 7), (639, 7), (640, 7), (642, 7), (643, 7), (645, 7), (648, 7), (649, 7), (650, 7), (651, 7), (653, 7), (655, 7), (656, 7), (657, 7), (658, 7), (660, 7), (663, 7), (665, 7), (669, 7), (670, 7), (673, 7), (674, 7), (675, 7), (678, 7), (679, 7), (682, 7), (683, 7), (684, 7), (685, 7), (689, 7), (690, 7), (693, 7), (697, 7), (698, 7), (699, 7), (700, 7), (701, 7), (702, 7), (706, 7), (708, 7), (709, 7), (713, 7), (715, 7), (716, 7), (730, 7), (735, 7), (736, 7), (742, 7), (746, 7), (749, 7), (750, 7), (756, 7), (759, 7), (764, 7), (766, 7), (767, 7), (768, 7), (770, 7), (777, 7), (779, 7), (782, 7), (783, 7), (784, 7), (786, 7), (793, 7), (796, 7), (797, 7), (800, 7), (802, 7), (803, 7), (806, 7), (809, 7), (810, 7), (812, 7), (814, 7), (815, 7), (817, 7), (819, 7), (820, 7), (821, 7), (822, 7), (825, 7), (827, 7), (830, 7), (831, 7), (833, 7), (834, 7), (836, 7), (837, 7), (838, 7), (839, 7), (847, 7), (849, 7), (852, 7), (858, 7), (859, 7), (860, 7), (865, 7), (867, 7), (868, 7), (871, 7), (873, 7), (877, 7), (878, 7), (881, 7), (883, 7), (887, 7), (892, 7), (893, 7), (897, 7), (898, 7), (899, 7), (903, 7), (905, 7), (906, 7), (912, 7), (913, 7), (922, 7), (923, 7), (928, 7), (936, 7), (940, 7), (949, 7), (950, 7), (951, 7), (955, 7), (960, 7), (965, 7), (968, 7), (969, 7), (984, 7), (987, 7), (990, 7), (991, 7), (995, 7), (996, 7), (1001, 7), (1004, 7), (1006, 7), (1009, 7), (1014, 7), (1017, 7), (1018, 7), (1019, 7), (1020, 7), (1021, 7), (1022, 7), (1024, 7), (1025, 7), (1029, 7), (1031, 7), (1034, 7), (1036, 7), (1039, 7), (1040, 7), (1041, 7), (1042, 7), (1043, 7), (1044, 7), (1046, 7), (1047, 7), (1048, 7), (1049, 7), (1057, 7), (1066, 7), (1067, 7), (1070, 7), (1071, 7), (1072, 7), (1073, 7), (1078, 7), (1080, 7), (1083, 7), (1085, 7), (1091, 7), (1094, 7), (1095, 7), (1097, 7), (1100, 7), (1102, 7), (1106, 7), (1107, 7), (1109, 7), (1113, 7), (1116, 7), (1119, 7), (1120, 7), (1121, 7), (1123, 7), (1125, 7), (1133, 7), (1134, 7), (1135, 7), (1136, 7), (1137, 7), (1141, 7), (1142, 7), (1144, 7), (1145, 7), (1151, 7), (1155, 7), (1156, 7), (1157, 7), (1163, 7), (1164, 7), (1168, 7), (1169, 7), (1170, 7), (1173, 7), (1174, 7), (1178, 7), (1183, 7), (1184, 7), (1188, 7), (1194, 7), (1195, 7), (1197, 7), (1203, 7), (1204, 7), (1209, 7), (1210, 7), (1212, 7), (1216, 7), (1218, 7), (1220, 7), (1223, 7), (1224, 7), (1226, 7), (1228, 7), (1229, 7), (1231, 7), (1232, 7), (1233, 7), (1234, 7), (1240, 7), (1250, 7), (1251, 7), (1255, 7), (1258, 7), (1259, 7), (1261, 7), (1263, 7), (1266, 7), (1267, 7), (1271, 7), (1272, 7), (1273, 7), (1278, 7), (1286, 7), (1289, 7), (1296, 7), (1299, 7), (1300, 7), (1301, 7), (1306, 7), (1317, 7), (1322, 7), (1323, 7), (1327, 7), (1332, 7), (1334, 7), (1336, 7), (1337, 7), (1344, 7), (1351, 7), (1355, 7), (1357, 7), (1359, 7), (1361, 7), (1363, 7), (1369, 7), (1370, 7), (1375, 7), (1376, 7), (1378, 7), (1386, 7), (1394, 7), (1396, 7), (1402, 7), (1409, 7), (1413, 7), (1421, 7), (1424, 7), (1429, 7), (1430, 7), (1433, 7), (1434, 7), (1435, 7), (1436, 7), (1438, 7), (1439, 7), (1440, 7), (1442, 7), (1444, 7), (1445, 7), (1451, 7), (1452, 7), (1454, 7), (1455, 7), (1459, 7), (1466, 7), (1467, 7), (1473, 7), (1475, 7), (1479, 7), (1481, 7), (1485, 7), (1487, 7), (1490, 7), (1497, 7), (1502, 7), (1504, 7), (1509, 7), (1510, 7), (1512, 7), (1518, 7), (1520, 7), (1521, 7), (1524, 7), (1533, 7), (1535, 7), (1539, 7), (1541, 7), (1547, 7), (1551, 7), (1555, 7), (1556, 7), (1564, 7), (1565, 7), (1570, 7), (1571, 7), (1572, 7), (1577, 7), (1579, 7), (1581, 7), (1582, 7), (1587, 7), (1589, 7), (1590, 7), (1591, 7), (1592, 7), (1593, 7), (1595, 7), (1596, 7), (1597, 7), (1598, 7), (1599, 7), (1604, 7), (1609, 7), (1610, 7), (1611, 7), (1614, 7), (1615, 7), (1621, 7), (1625, 7), (1626, 7), (1632, 7), (1634, 7), (1635, 7), (1646, 7), (1647, 7), (1648, 7), (1649, 7), (1654, 7), (1657, 7), (1662, 7), (1663, 7), (1667, 7), (1668, 7), (1670, 7), (1672, 7), (1673, 7), (1678, 7), (1680, 7), (1681, 7), (1682, 7), (1685, 7), (1687, 7), (1689, 7), (1694, 7), (1700, 7), (1701, 7), (1705, 7), (1714, 7), (1725, 7), (1726, 7), (1727, 7), (1729, 7), (1730, 7), (1733, 7), (1737, 7), (1740, 7), (1743, 7), (1744, 7), (1745, 7), (1748, 7), (1749, 7), (1757, 7), (1759, 7), (1761, 7), (1765, 7), (1766, 7), (1769, 7), (1771, 7), (1776, 7), (1779, 7), (1781, 7), (1782, 7), (1785, 7), (1791, 7), (1793, 7), (1795, 7), (1798, 7), (1799, 7), (1803, 7), (1807, 7), (1809, 7), (1810, 7), (1811, 7), (1814, 7), (1816, 7), (1817, 7), (1821, 7), (1822, 7), (1823, 7), (1825, 7), (1833, 7), (1835, 7), (1839, 7), (1844, 7), (1846, 7), (1848, 7), (1849, 7), (1854, 7), (1857, 7), (1861, 7), (1862, 7), (1863, 7), (1870, 7), (1872, 7), (1875, 7), (1880, 7), (1888, 7), (1892, 7), (1895, 7), (1896, 7), (1901, 7), (1902, 7), (1903, 7), (1904, 7), (1905, 7), (1907, 7), (1909, 7), (1911, 7), (1912, 7), (1915, 7), (1916, 7), (1917, 7), (1921, 7), (1922, 7), (1925, 7), (1929, 7), (1930, 7), (1937, 7), (1938, 7), (1941, 7), (1944, 7), (1945, 7), (1946, 7), (1947, 7), (1948, 7), (1951, 7), (1952, 7), (1955, 7), (1957, 7), (1960, 7), (1961, 7), (1964, 7), (1966, 7), (1973, 7), (1980, 7), (1985, 7), (1987, 7), (1988, 7), (1989, 7), (1990, 7), (1996, 7), (2004, 7), (2007, 7), (2009, 7), (2015, 7), (2019, 7), (2020, 7), (2029, 7), (2051, 7), (2056, 7), (2057, 7), (2060, 7), (2062, 7), (2063, 7), (2069, 7), (2072, 7), (2075, 7), (2080, 7), (2085, 7), (2088, 7), (2090, 7), (2092, 7), (2093, 7), (2096, 7), (2100, 7), (2101, 7), (2109, 7), (2110, 7), (2113, 7), (2114, 7), (2115, 7), (2116, 7), (2117, 7), (2118, 7), (2119, 7), (2120, 7), (2125, 7), (2132, 7), (2133, 7), (2134, 7), (2137, 7), (2142, 7), (2144, 7), (2146, 7), (2147, 7), (2148, 7), (2150, 7), (2153, 7), (2157, 7), (2159, 7), (2163, 7), (2166, 7), (2169, 7), (2170, 7), (2171, 7), (2176, 7), (2179, 7), (2184, 7), (2185, 7), (2187, 7), (2188, 7), (2191, 7), (2193, 7), (2194, 7), (2195, 7), (2196, 7), (2209, 7), (2213, 7), (2216, 7), (2219, 7), (2224, 7), (2235, 7), (2236, 7), (2242, 7), (2243, 7), (2246, 7), (2247, 7), (2248, 7), (2250, 7), (2254, 7), (2256, 7), (2257, 7), (2258, 7), (2261, 7), (2262, 7), (2267, 7), (2268, 7), (2270, 7), (2271, 7), (2277, 7), (2280, 7), (2284, 7), (2286, 7), (2288, 7), (2289, 7), (2290, 7), (2292, 7), (2300, 7), (2301, 7), (2302, 7), (2311, 7), (2312, 7), (2316, 7), (2324, 7), (2327, 7), (2329, 7), (2330, 7), (2333, 7), (2337, 7), (2339, 7), (2340, 7), (2341, 7), (2342, 7), (2346, 7), (2347, 7), (2348, 7), (2349, 7), (2350, 7), (2353, 7), (2354, 7), (2356, 7), (2359, 7), (2361, 7), (2363, 7), (2364, 7), (2368, 7), (2373, 7), (2374, 7), (2375, 7), (2376, 7), (2377, 7), (2384, 7), (2385, 7), (2386, 7), (2387, 7), (2390, 7), (2398, 7), (2399, 7), (2400, 7), (2403, 7), (2405, 7), (2407, 7), (2410, 7), (2414, 7), (2415, 7), (2416, 7), (2417, 7), (2421, 7), (2425, 7), (2428, 7), (2430, 7), (2431, 7), (2435, 7), (2436, 7), (2447, 7), (2448, 7), (2453, 7), (2456, 7), (2459, 7), (2464, 7), (2466, 7), (2467, 7), (2469, 7), (2470, 7), (2473, 7), (2476, 7), (2477, 7), (2478, 7), (2480, 7), (2482, 7), (2486, 7), (2488, 7), (2491, 7), (2499, 7), (2502, 7), (2506, 7), (2511, 7), (2513, 7), (2518, 7), (2522, 7), (2523, 7), (2524, 7), (2526, 7), (2531, 7), (2536, 7), (2541, 7), (2547, 7), (2554, 7), (2557, 7), (2571, 7), (2574, 7), (2575, 7), (2576, 7), (2586, 7), (2587, 7), (2588, 7), (2593, 7), (2596, 7), (2610, 7), (2615, 7), (2621, 7), (2622, 7), (2626, 7), (2629, 7), (2635, 7), (2638, 7), (2639, 7), (2642, 7), (2643, 7), (2644, 7), (2647, 7), (2652, 7), (2656, 7), (2659, 7), (2662, 7), (2666, 7), (2667, 7), (2669, 7), (2671, 7), (2673, 7), (2674, 7), (2675, 7), (2678, 7), (2679, 7), (2680, 7), (2684, 7), (2685, 7), (2686, 7), (2687, 7), (2690, 7), (2693, 7), (2696, 7), (2701, 7), (2706, 7), (2710, 7), (2715, 7), (2720, 7), (2722, 7), (2723, 7), (2724, 7), (2725, 7), (2727, 7), (2728, 7), (2731, 7), (2732, 7), (2735, 7), (2737, 7), (2738, 7), (2739, 7), (2740, 7), (2741, 7), (2752, 7), (2754, 7), (2755, 7), (2756, 7), (2761, 7), (2764, 7), (2765, 7), (2766, 7), (2771, 7), (2772, 7), (2774, 7), (2779, 7), (2780, 7), (2781, 7), (2784, 7), (2787, 7), (2788, 7), (2789, 7), (2790, 7), (2791, 7), (2794, 7), (2795, 7), (2796, 7), (2800, 7), (2802, 7), (2803, 7), (2805, 7), (2806, 7), (2810, 7), (2811, 7), (2813, 7), (2815, 7), (2818, 7), (2820, 7), (2821, 7), (2822, 7), (2823, 7), (2824, 7), (2829, 7), (2831, 7), (2833, 7), (2834, 7), (2836, 7), (2837, 7), (2839, 7), (2840, 7), (2842, 7), (2843, 7), (2846, 7), (2849, 7), (2850, 7), (2852, 7), (2853, 7), (2854, 7), (2865, 7), (2867, 7), (2868, 7), (2871, 7), (2877, 7), (2879, 7), (2880, 7), (2881, 7), (2882, 7), (2883, 7), (2884, 7), (2885, 7), (2886, 7), (2889, 7), (2893, 7), (2894, 7), (2895, 7), (2899, 7), (2902, 7), (2904, 7), (2906, 7), (2908, 7), (2911, 7), (2912, 7), (2913, 7), (2914, 7), (2915, 7), (2917, 7), (2918, 7), (2920, 7), (2923, 7), (2924, 7), (2926, 7), (2927, 7), (2929, 7), (2930, 7), (2933, 7), (2934, 7), (2936, 7), (2939, 7), (2940, 7), (2942, 7), (2943, 7), (2945, 7), (2947, 7), (2948, 7), (2949, 7), (2951, 7), (2953, 7), (2956, 7), (2958, 7), (2959, 7), (2960, 7), (2961, 7), (2962, 7), (2963, 7), (2964, 7), (2965, 7), (2967, 7), (2969, 7), (2973, 7), (2977, 7), (2978, 7), (2980, 7), (2985, 7), (2988, 7), (2990, 7), (2993, 7), (2994, 7), (2999, 7), (3003, 7), (3004, 7), (3005, 7), (3006, 7), (3010, 7), (3012, 7), (3016, 7), (3017, 7), (3020, 7), (3023, 7), (3025, 7), (3028, 7), (3034, 7), (3036, 7), (3040, 7), (3041, 7), (3047, 7), (3048, 7), (3049, 7), (3053, 7), (3055, 7), (3058, 7), (3059, 7), (3060, 7), (3062, 7), (3063, 7), (3064, 7), (3065, 7), (3066, 7), (3067, 7), (3069, 7), (3073, 7), (3074, 7), (3076, 7), (3081, 7), (3088, 7), (3089, 7), (3092, 7), (3095, 7), (3100, 7), (3105, 7), (3106, 7), (3111, 7), (3116, 7), (3117, 7), (3119, 7), (3121, 7), (3129, 7), (3130, 7), (3133, 7), (3134, 7), (3135, 7), (3136, 7), (3138, 7), (3139, 7), (3142, 7), (3145, 7), (3147, 7), (3157, 7), (3158, 7), (3159, 7), (3164, 7), (3168, 7), (3176, 7), (3178, 7), (3180, 7), (3182, 7), (3185, 7), (3186, 7), (3187, 7), (3194, 7), (3195, 7), (3200, 7), (3202, 7), (3204, 7), (3205, 7), (3207, 7), (3209, 7), (3215, 7), (3217, 7), (3223, 7), (3225, 7), (3229, 7), (3233, 7), (3234, 7), (3235, 7), (3237, 7), (3239, 7), (3240, 7), (3241, 7), (3242, 7), (3245, 7), (3246, 7), (3248, 7), (3249, 7), (3251, 7), (3252, 7), (3254, 7), (3256, 7), (3260, 7), (3261, 7), (3263, 7), (3265, 7), (3266, 7), (3268, 7), (3271, 7), (3276, 7), (3280, 7), (3287, 7), (3289, 7), (3290, 7), (3291, 7), (3292, 7), (3294, 7), (3300, 7), (3311, 7), (3312, 7), (3313, 7), (3317, 7), (3320, 7), (3321, 7), (3327, 7), (3329, 7), (3330, 7), (3333, 7), (3339, 7), (3346, 7), (3352, 7), (3353, 7), (3354, 7), (3355, 7), (3357, 7), (3359, 7), (3360, 7), (3363, 7), (3364, 7), (3365, 7), (3366, 7), (3367, 7), (3369, 7), (3370, 7), (3371, 7), (3372, 7), (3375, 7), (3377, 7), (3385, 7), (3386, 7), (3391, 7), (3394, 7), (3395, 7), (3396, 7), (3397, 7), (3398, 7), (3401, 7), (3402, 7), (3405, 7), (3407, 7), (3409, 7), (3410, 7), (3413, 7), (3416, 7), (3418, 7), (3419, 7), (3421, 7), (3424, 7), (3425, 7), (3427, 7), (3428, 7), (3429, 7), (3431, 7), (3432, 7), (3435, 7), (3436, 7), (3439, 7), (3440, 7), (3441, 7), (3443, 7), (3447, 7), (3450, 7), (3454, 7), (3456, 7), (3457, 7), (3460, 7), (3462, 7), (3464, 7), (3466, 7), (3467, 7), (3468, 7), (3469, 7), (3470, 7), (3472, 7), (3481, 7), (3482, 7), (3483, 7), (3484, 7), (3488, 7), (3499, 7), (3501, 7), (3505, 7), (3508, 7), (3510, 7), (3518, 7), (3520, 7), (3521, 7), (3523, 7), (2, 8), (5, 8), (6, 8), (7, 8), (9, 8), (12, 8), (13, 8), (16, 8), (21, 8), (25, 8), (27, 8), (34, 8), (39, 8), (42, 8), (45, 8), (51, 8), (54, 8), (59, 8), (63, 8), (65, 8), (66, 8), (67, 8), (68, 8), (69, 8), (70, 8), (73, 8), (74, 8), (75, 8), (76, 8), (79, 8), (83, 8), (87, 8), (90, 8), (92, 8), (95, 8), (96, 8), (100, 8), (101, 8), (102, 8), (106, 8), (107, 8), (109, 8), (112, 8), (114, 8), (116, 8), (120, 8), (121, 8), (126, 8), (129, 8), (130, 8), (133, 8), (135, 8), (136, 8), (139, 8), (142, 8), (144, 8), (145, 8), (146, 8), (150, 8), (154, 8), (155, 8), (156, 8), (157, 8), (160, 8), (162, 8), (163, 8), (165, 8), (166, 8), (172, 8), (173, 8), (176, 8), (177, 8), (180, 8), (183, 8), (184, 8), (185, 8), (186, 8), (188, 8), (189, 8), (191, 8), (195, 8), (196, 8), (198, 8), (200, 8), (203, 8), (209, 8), (211, 8), (213, 8), (216, 8), (217, 8), (219, 8), (220, 8), (222, 8), (223, 8), (227, 8), (231, 8), (233, 8), (234, 8), (236, 8), (238, 8), (240, 8), (241, 8), (244, 8), (246, 8), (248, 8), (251, 8), (252, 8), (254, 8), (257, 8), (259, 8), (263, 8), (265, 8), (270, 8), (274, 8), (277, 8), (280, 8), (282, 8), (283, 8), (287, 8), (288, 8), (292, 8), (294, 8), (295, 8), (301, 8), (303, 8), (304, 8), (305, 8), (308, 8), (309, 8), (312, 8), (313, 8), (316, 8), (320, 8), (321, 8), (322, 8), (323, 8), (326, 8), (330, 8), (331, 8), (336, 8), (337, 8), (339, 8), (341, 8), (346, 8), (356, 8), (360, 8), (365, 8), (368, 8), (369, 8), (377, 8), (378, 8), (379, 8), (380, 8), (381, 8), (382, 8), (383, 8), (385, 8), (386, 8), (393, 8), (398, 8), (414, 8), (420, 8), (433, 8), (434, 8), (442, 8), (457, 8), (471, 8), (483, 8), (490, 8), (491, 8), (494, 8), (496, 8), (502, 8), (505, 8), (506, 8), (508, 8), (516, 8), (518, 8), (519, 8), (529, 8), (530, 8), (531, 8), (534, 8), (535, 8), (541, 8), (546, 8), (547, 8), (548, 8), (550, 8), (556, 8), (561, 8), (563, 8), (566, 8), (568, 8), (570, 8), (572, 8), (580, 8), (585, 8), (589, 8), (593, 8), (597, 8), (598, 8), (599, 8), (602, 8), (603, 8), (604, 8), (606, 8), (617, 8), (618, 8), (624, 8), (627, 8), (636, 8), (637, 8), (644, 8), (664, 8), (668, 8), (671, 8), (672, 8), (676, 8), (680, 8), (686, 8), (687, 8), (692, 8), (694, 8), (710, 8), (711, 8), (712, 8), (714, 8), (717, 8), (724, 8), (727, 8), (734, 8), (737, 8), (738, 8), (745, 8), (751, 8), (755, 8), (761, 8), (772, 8), (773, 8), (774, 8), (780, 8), (788, 8), (789, 8), (791, 8), (792, 8), (794, 8), (795, 8), (798, 8), (799, 8), (804, 8), (808, 8), (818, 8), (823, 8), (824, 8), (826, 8), (828, 8), (829, 8), (835, 8), (841, 8), (842, 8), (845, 8), (846, 8), (848, 8), (850, 8), (853, 8), (854, 8), (856, 8), (864, 8), (869, 8), (870, 8), (872, 8), (874, 8), (879, 8), (880, 8), (882, 8), (884, 8), (885, 8), (888, 8), (889, 8), (890, 8), (894, 8), (895, 8), (896, 8), (907, 8), (908, 8), (910, 8), (911, 8), (915, 8), (916, 8), (924, 8), (927, 8), (929, 8), (930, 8), (931, 8), (932, 8), (935, 8), (937, 8), (942, 8), (943, 8), (944, 8), (948, 8), (954, 8), (957, 8), (958, 8), (959, 8), (961, 8), (966, 8), (971, 8), (972, 8), (973, 8), (977, 8), (979, 8), (981, 8), (985, 8), (986, 8), (988, 8), (989, 8), (992, 8), (993, 8), (994, 8), (998, 8), (999, 8), (1002, 8), (1003, 8), (1005, 8), (1008, 8), (1010, 8), (1012, 8), (1016, 8), (1026, 8), (1030, 8), (1033, 8), (1037, 8), (1038, 8), (1045, 8), (1052, 8), (1059, 8), (1060, 8), (1061, 8), (1062, 8), (1064, 8), (1065, 8), (1069, 8), (1074, 8), (1075, 8), (1076, 8), (1077, 8), (1079, 8), (1082, 8), (1084, 8), (1088, 8), (1089, 8), (1099, 8), (1104, 8), (1111, 8), (1117, 8), (1118, 8), (1124, 8), (1127, 8), (1129, 8), (1131, 8), (1132, 8), (1138, 8), (1139, 8), (1143, 8), (1147, 8), (1149, 8), (1153, 8), (1158, 8), (1160, 8), (1162, 8), (1167, 8), (1171, 8), (1175, 8), (1176, 8), (1179, 8), (1181, 8), (1185, 8), (1186, 8), (1187, 8), (1190, 8), (1191, 8), (1192, 8), (1193, 8), (1196, 8), (1198, 8), (1199, 8), (1200, 8), (1201, 8), (1202, 8), (1205, 8), (1206, 8), (1208, 8), (1211, 8), (1213, 8), (1214, 8), (1215, 8), (1217, 8), (1219, 8), (1222, 8), (1230, 8), (1235, 8), (1237, 8), (1239, 8), (1241, 8), (1243, 8), (1246, 8), (1248, 8), (1249, 8), (1252, 8), (1256, 8), (1257, 8), (1260, 8), (1264, 8), (1268, 8), (1269, 8), (1270, 8), (1274, 8), (1281, 8), (1282, 8), (1284, 8), (1285, 8), (1287, 8), (1290, 8), (1295, 8), (1297, 8), (1298, 8), (1302, 8), (1309, 8), (1315, 8), (1316, 8), (1321, 8), (1324, 8), (1326, 8), (1330, 8), (1331, 8), (1338, 8), (1340, 8), (1343, 8), (1345, 8), (1347, 8), (1348, 8), (1350, 8), (1353, 8), (1360, 8), (1362, 8), (1364, 8), (1365, 8), (1368, 8), (1371, 8), (1373, 8), (1374, 8), (1380, 8), (1382, 8), (1383, 8), (1385, 8), (1388, 8), (1389, 8), (1391, 8), (1393, 8), (1397, 8), (1398, 8), (1399, 8), (1400, 8), (1401, 8), (1403, 8), (1404, 8), (1406, 8), (1412, 8), (1416, 8), (1417, 8), (1420, 8), (1422, 8), (1425, 8), (1426, 8), (1431, 8), (1443, 8), (1446, 8), (1448, 8), (1449, 8), (1450, 8), (1456, 8), (1457, 8), (1458, 8), (1461, 8), (1462, 8), (1464, 8), (1468, 8), (1469, 8), (1471, 8), (1472, 8), (1477, 8), (1483, 8), (1486, 8), (1489, 8), (1493, 8), (1495, 8), (1496, 8), (1498, 8), (1499, 8), (1500, 8), (1501, 8), (1503, 8), (1505, 8), (1506, 8), (1511, 8), (1513, 8), (1514, 8), (1515, 8), (1516, 8), (1517, 8), (1519, 8), (1522, 8), (1523, 8), (1529, 8), (1532, 8), (1536, 8), (1540, 8), (1542, 8), (1546, 8), (1549, 8), (1552, 8), (1554, 8), (1557, 8), (1558, 8), (1566, 8), (1568, 8), (1569, 8), (1574, 8), (1575, 8), (1576, 8), (1578, 8), (1580, 8), (1583, 8), (1584, 8), (1585, 8), (1586, 8), (1588, 8), (1603, 8), (1606, 8), (1608, 8), (1612, 8), (1616, 8), (1617, 8), (1619, 8), (1620, 8), (1622, 8), (1623, 8), (1624, 8), (1627, 8), (1628, 8), (1629, 8), (1631, 8), (1636, 8), (1638, 8), (1639, 8), (1642, 8), (1643, 8), (1644, 8), (1645, 8), (1650, 8), (1651, 8), (1652, 8), (1653, 8), (1655, 8), (1656, 8), (1658, 8), (1659, 8), (1661, 8), (1664, 8), (1665, 8), (1669, 8), (1676, 8), (1677, 8), (1683, 8), (1686, 8), (1688, 8), (1691, 8), (1693, 8), (1695, 8), (1698, 8), (1702, 8), (1703, 8), (1707, 8), (1709, 8), (1710, 8), (1712, 8), (1713, 8), (1717, 8), (1718, 8), (1719, 8), (1720, 8), (1721, 8), (1722, 8), (1723, 8), (1724, 8), (1731, 8), (1734, 8), (1739, 8), (1746, 8), (1750, 8), (1751, 8), (1752, 8), (1753, 8), (1754, 8), (1755, 8), (1758, 8), (1760, 8), (1762, 8), (1763, 8), (1764, 8), (1768, 8), (1770, 8), (1773, 8), (1774, 8), (1775, 8), (1783, 8), (1784, 8), (1786, 8), (1787, 8), (1788, 8), (1790, 8), (1796, 8), (1800, 8), (1812, 8), (1818, 8), (1819, 8), (1820, 8), (1826, 8), (1827, 8), (1831, 8), (1832, 8), (1834, 8), (1836, 8), (1840, 8), (1841, 8), (1842, 8), (1847, 8), (1850, 8), (1851, 8), (1852, 8), (1853, 8), (1855, 8), (1856, 8), (1858, 8), (1859, 8), (1866, 8), (1867, 8), (1868, 8), (1869, 8), (1871, 8), (1876, 8), (1877, 8), (1878, 8), (1882, 8), (1884, 8), (1886, 8), (1887, 8), (1889, 8), (1893, 8), (1894, 8), (1898, 8), (1910, 8), (1914, 8), (1919, 8), (1926, 8), (1927, 8), (1928, 8), (1932, 8), (1935, 8), (1936, 8), (1939, 8), (1940, 8), (1949, 8), (1950, 8), (1956, 8), (1959, 8), (1962, 8), (1965, 8), (1968, 8), (1969, 8), (1971, 8), (1972, 8), (1975, 8), (1982, 8), (1983, 8), (1995, 8), (1997, 8), (2003, 8), (2008, 8), (2013, 8), (2017, 8), (2022, 8), (2026, 8), (2033, 8), (2036, 8), (2037, 8), (2043, 8), (2044, 8), (2045, 8), (2046, 8), (2053, 8), (2055, 8), (2058, 8), (2059, 8), (2066, 8), (2071, 8), (2073, 8), (2077, 8), (2079, 8), (2081, 8), (2082, 8), (2083, 8), (2087, 8), (2091, 8), (2094, 8), (2095, 8), (2098, 8), (2102, 8), (2104, 8), (2112, 8), (2122, 8), (2123, 8), (2124, 8), (2126, 8), (2129, 8), (2131, 8), (2135, 8), (2136, 8), (2143, 8), (2151, 8), (2152, 8), (2154, 8), (2156, 8), (2161, 8), (2165, 8), (2167, 8), (2172, 8), (2174, 8), (2175, 8), (2177, 8), (2178, 8), (2180, 8), (2183, 8), (2192, 8), (2197, 8), (2199, 8), (2200, 8), (2201, 8), (2202, 8), (2206, 8), (2208, 8), (2211, 8), (2215, 8), (2217, 8), (2218, 8), (2220, 8), (2222, 8), (2223, 8), (2225, 8), (2226, 8), (2227, 8), (2232, 8), (2233, 8), (2238, 8), (2239, 8), (2244, 8), (2251, 8), (2253, 8), (2255, 8), (2263, 8), (2265, 8), (2266, 8), (2269, 8), (2272, 8), (2274, 8), (2275, 8), (2276, 8), (2278, 8), (2279, 8), (2281, 8), (2282, 8), (2287, 8), (2291, 8), (2293, 8), (2294, 8), (2295, 8), (2296, 8), (2297, 8), (2298, 8), (2303, 8), (2304, 8), (2306, 8), (2307, 8), (2309, 8), (2310, 8), (2314, 8), (2318, 8), (2319, 8), (2322, 8), (2325, 8), (2328, 8), (2334, 8), (2335, 8), (2336, 8), (2344, 8), (2345, 8), (2351, 8), (2352, 8), (2358, 8), (2360, 8), (2367, 8), (2369, 8), (2371, 8), (2372, 8), (2378, 8), (2379, 8), (2391, 8), (2393, 8), (2411, 8), (2412, 8), (2413, 8), (2420, 8), (2422, 8), (2433, 8), (2434, 8), (2439, 8), (2440, 8), (2441, 8), (2442, 8), (2443, 8), (2449, 8), (2454, 8), (2458, 8), (2461, 8), (2462, 8), (2468, 8), (2471, 8), (2481, 8), (2483, 8), (2484, 8), (2485, 8), (2487, 8), (2493, 8), (2497, 8), (2501, 8), (2503, 8), (2504, 8), (2505, 8), (2507, 8), (2509, 8), (2510, 8), (2515, 8), (2516, 8), (2517, 8), (2520, 8), (2521, 8), (2525, 8), (2529, 8), (2534, 8), (2540, 8), (2543, 8), (2545, 8), (2551, 8), (2555, 8), (2561, 8), (2564, 8), (2565, 8), (2566, 8), (2567, 8), (2568, 8), (2569, 8), (2573, 8), (2577, 8), (2578, 8), (2579, 8), (2580, 8), (2581, 8), (2589, 8), (2590, 8), (2594, 8), (2595, 8), (2598, 8), (2601, 8), (2604, 8), (2606, 8), (2607, 8), (2608, 8), (2612, 8), (2613, 8), (2614, 8), (2618, 8), (2624, 8), (2625, 8), (2627, 8), (2628, 8), (2630, 8), (2637, 8), (2640, 8), (2646, 8), (2648, 8), (2650, 8), (2653, 8), (2654, 8), (2657, 8), (2658, 8), (2663, 8), (2664, 8), (2665, 8), (2668, 8), (2672, 8), (2676, 8), (2677, 8), (2682, 8), (2683, 8), (2688, 8), (2689, 8), (2692, 8), (2695, 8), (2697, 8), (2699, 8), (2700, 8), (2702, 8), (2703, 8), (2705, 8), (2707, 8), (2708, 8), (2714, 8), (2716, 8), (2718, 8), (2721, 8), (2729, 8), (2730, 8), (2733, 8), (2736, 8), (2743, 8), (2745, 8), (2746, 8), (2748, 8), (2749, 8), (2757, 8), (2758, 8), (2759, 8), (2760, 8), (2763, 8), (2767, 8), (2769, 8), (2777, 8), (2782, 8), (2783, 8), (2797, 8), (2799, 8), (2808, 8), (2809, 8), (2814, 8), (2816, 8), (2817, 8), (2825, 8), (2827, 8), (2830, 8), (2835, 8), (2847, 8), (2848, 8), (2857, 8), (2858, 8), (2861, 8), (2862, 8), (2863, 8), (2864, 8), (2869, 8), (2870, 8), (2872, 8), (2887, 8), (2890, 8), (2892, 8), (2896, 8), (2898, 8), (2900, 8), (2901, 8), (2903, 8), (2907, 8), (2919, 8), (2921, 8), (2922, 8), (2925, 8), (2931, 8), (2932, 8), (2935, 8), (2938, 8), (2941, 8), (2944, 8), (2946, 8), (2950, 8), (2952, 8), (2955, 8), (2957, 8), (2966, 8), (2968, 8), (2971, 8), (2972, 8), (2975, 8), (2983, 8), (2984, 8), (2987, 8), (2989, 8), (2995, 8), (3000, 8), (3001, 8), (3007, 8), (3008, 8), (3009, 8), (3015, 8), (3019, 8), (3021, 8), (3024, 8), (3029, 8), (3030, 8), (3031, 8), (3032, 8), (3033, 8), (3035, 8), (3038, 8), (3039, 8), (3042, 8), (3045, 8), (3054, 8), (3056, 8), (3057, 8), (3061, 8), (3068, 8), (3070, 8), (3071, 8), (3072, 8), (3075, 8), (3078, 8), (3079, 8), (3080, 8), (3082, 8), (3084, 8), (3085, 8), (3090, 8), (3091, 8), (3094, 8), (3096, 8), (3097, 8), (3098, 8), (3099, 8), (3101, 8), (3102, 8), (3103, 8), (3104, 8), (3107, 8), (3108, 8), (3113, 8), (3114, 8), (3115, 8), (3118, 8), (3120, 8), (3122, 8), (3123, 8), (3124, 8), (3126, 8), (3127, 8), (3132, 8), (3137, 8), (3140, 8), (3141, 8), (3143, 8), (3146, 8), (3148, 8), (3149, 8), (3150, 8), (3154, 8), (3155, 8), (3161, 8), (3162, 8), (3163, 8), (3165, 8), (3167, 8), (3170, 8), (3171, 8), (3173, 8), (3174, 8), (3177, 8), (3181, 8), (3184, 8), (3189, 8), (3190, 8), (3191, 8), (3196, 8), (3198, 8), (3199, 8), (3203, 8), (3210, 8), (3211, 8), (3212, 8), (3216, 8), (3218, 8), (3219, 8), (3226, 8), (3227, 8), (3228, 8), (3230, 8), (3231, 8), (3236, 8), (3247, 8), (3250, 8), (3253, 8), (3257, 8), (3262, 8), (3264, 8), (3269, 8), (3270, 8), (3273, 8), (3274, 8), (3275, 8), (3277, 8), (3278, 8), (3282, 8), (3283, 8), (3284, 8), (3285, 8), (3288, 8), (3299, 8), (3302, 8), (3303, 8), (3304, 8), (3305, 8), (3307, 8), (3310, 8), (3314, 8), (3319, 8), (3324, 8), (3326, 8), (3328, 8), (3331, 8), (3334, 8), (3336, 8), (3337, 8), (3340, 8), (3342, 8), (3343, 8), (3344, 8), (3345, 8), (3347, 8), (3348, 8), (3350, 8), (3356, 8), (3358, 8), (3361, 8), (3368, 8), (3373, 8), (3376, 8), (3380, 8), (3381, 8), (3382, 8), (3387, 8), (3390, 8), (3392, 8), (3408, 8), (3417, 8), (3433, 8), (3438, 8), (3475, 8), (3479, 8), (3485, 8), (3487, 8), (3496, 8), (3498, 8), (3514, 8), (3515, 8), (3, 9), (4, 9), (10, 9), (14, 9), (24, 9), (30, 9), (35, 9), (49, 9), (56, 9), (84, 9), (88, 9), (123, 9), (131, 9), (132, 9), (161, 9), (178, 9), (208, 9), (228, 9), (229, 9), (235, 9), (255, 9), (264, 9), (276, 9), (284, 9), (302, 9), (306, 9), (310, 9), (319, 9), (327, 9), (344, 9), (348, 9), (361, 9), (407, 9), (426, 9), (428, 9), (467, 9), (487, 9), (510, 9), (513, 9), (515, 9), (537, 9), (590, 9), (607, 9), (609, 9), (616, 9), (630, 9), (691, 9), (704, 9), (725, 9), (733, 9), (740, 9), (771, 9), (787, 9), (790, 9), (807, 9), (813, 9), (840, 9), (843, 9), (855, 9), (857, 9), (861, 9), (863, 9), (876, 9), (886, 9), (891, 9), (900, 9), (902, 9), (909, 9), (914, 9), (917, 9), (918, 9), (919, 9), (920, 9), (921, 9), (925, 9), (926, 9), (934, 9), (938, 9), (939, 9), (941, 9), (945, 9), (947, 9), (952, 9), (953, 9), (956, 9), (964, 9), (967, 9), (974, 9), (975, 9), (976, 9), (978, 9), (980, 9), (983, 9), (997, 9), (1000, 9), (1007, 9), (1011, 9), (1015, 9), (1023, 9), (1027, 9), (1028, 9), (1032, 9), (1051, 9), (1053, 9), (1055, 9), (1058, 9), (1068, 9), (1092, 9), (1096, 9), (1101, 9), (1110, 9), (1112, 9), (1126, 9), (1148, 9), (1152, 9), (1182, 9), (1189, 9), (1221, 9), (1227, 9), (1253, 9), (1254, 9), (1277, 9), (1280, 9), (1303, 9), (1304, 9), (1308, 9), (1310, 9), (1312, 9), (1314, 9), (1319, 9), (1320, 9), (1328, 9), (1329, 9), (1333, 9), (1335, 9), (1339, 9), (1341, 9), (1349, 9), (1356, 9), (1358, 9), (1377, 9), (1379, 9), (1381, 9), (1384, 9), (1390, 9), (1392, 9), (1395, 9), (1407, 9), (1410, 9), (1411, 9), (1418, 9), (1419, 9), (1423, 9), (1427, 9), (1432, 9), (1441, 9), (1447, 9), (1465, 9), (1470, 9), (1478, 9), (1491, 9), (1508, 9), (1526, 9), (1528, 9), (1544, 9), (1545, 9), (1550, 9), (1553, 9), (1559, 9), (1560, 9), (1561, 9), (1562, 9), (1563, 9), (1567, 9), (1573, 9), (1594, 9), (1600, 9), (1613, 9), (1630, 9), (1633, 9), (1637, 9), (1641, 9), (1660, 9), (1671, 9), (1679, 9), (1684, 9), (1692, 9), (1697, 9), (1699, 9), (1706, 9), (1728, 9), (1735, 9), (1736, 9), (1738, 9), (1741, 9), (1747, 9), (1767, 9), (1778, 9), (1780, 9), (1789, 9), (1804, 9), (1806, 9), (1808, 9), (1824, 9), (1865, 9), (1873, 9), (1881, 9), (1885, 9), (1890, 9), (1897, 9), (1913, 9), (1924, 9), (1933, 9), (1934, 9), (1953, 9), (1967, 9), (1970, 9), (1977, 9), (1978, 9), (1981, 9), (2010, 9), (2012, 9), (2016, 9), (2018, 9), (2039, 9), (2042, 9), (2047, 9), (2061, 9), (2065, 9), (2068, 9), (2070, 9), (2074, 9), (2128, 9), (2140, 9), (2145, 9), (2160, 9), (2162, 9), (2164, 9), (2181, 9), (2189, 9), (2203, 9), (2207, 9), (2210, 9), (2228, 9), (2230, 9), (2252, 9), (2283, 9), (2285, 9), (2313, 9), (2321, 9), (2323, 9), (2326, 9), (2331, 9), (2332, 9), (2343, 9), (2355, 9), (2380, 9), (2389, 9), (2395, 9), (2396, 9), (2397, 9), (2401, 9), (2408, 9), (2409, 9), (2419, 9), (2423, 9), (2426, 9), (2427, 9), (2429, 9), (2438, 9), (2444, 9), (2445, 9), (2450, 9), (2451, 9), (2452, 9), (2465, 9), (2472, 9), (2475, 9), (2489, 9), (2492, 9), (2494, 9), (2495, 9), (2496, 9), (2498, 9), (2508, 9), (2512, 9), (2514, 9), (2519, 9), (2527, 9), (2528, 9), (2530, 9), (2532, 9), (2533, 9), (2535, 9), (2537, 9), (2538, 9), (2542, 9), (2544, 9), (2546, 9), (2549, 9), (2552, 9), (2559, 9), (2560, 9), (2563, 9), (2570, 9), (2572, 9), (2582, 9), (2583, 9), (2584, 9), (2592, 9), (2605, 9), (2611, 9), (2620, 9), (2632, 9), (2634, 9), (2641, 9), (2649, 9), (2651, 9), (2670, 9), (2681, 9), (2694, 9), (2698, 9), (2704, 9), (2712, 9), (2713, 9), (2717, 9), (2762, 9), (2768, 9), (2770, 9), (2775, 9), (2785, 9), (2786, 9), (2793, 9), (2801, 9), (2804, 9), (2807, 9), (2812, 9), (2819, 9), (2832, 9), (2844, 9), (2845, 9), (2855, 9), (2875, 9), (2876, 9), (2888, 9), (2891, 9), (2897, 9), (2909, 9), (2916, 9), (2928, 9), (2954, 9), (2974, 9), (2976, 9), (2979, 9), (2981, 9), (2991, 9), (2996, 9), (2998, 9), (3011, 9), (3014, 9), (3018, 9), (3027, 9), (3044, 9), (3051, 9), (3087, 9), (3109, 9), (3110, 9), (3125, 9), (3160, 9), (3169, 9), (3172, 9), (3179, 9), (3183, 9), (3192, 9), (3193, 9), (3206, 9), (3208, 9), (3220, 9), (3244, 9), (3258, 9), (3267, 9), (3281, 9), (3286, 9), (3295, 9), (3296, 9), (3297, 9), (3306, 9), (3308, 9), (3309, 9), (3318, 9), (3322, 9), (3323, 9), (3332, 9), (3335, 9), (3341, 9), (3349, 9), (3374, 9), (3384, 9), (3389, 9), (3393, 9), (3399, 9), (3404, 9), (3411, 9), (3502, 9), (3504, 9), (23, 10), (218, 10), (272, 10), (475, 10), (703, 10), (778, 10), (801, 10), (933, 10), (1105, 10), (1159, 10), (1275, 10), (1354, 10), (1367, 10), (1405, 10), (1530, 10), (1543, 10), (1666, 10), (1674, 10), (1675, 10), (1690, 10), (1696, 10), (1732, 10), (1777, 10), (1843, 10), (1900, 10), (1908, 10), (1958, 10), (2054, 10), (2086, 10), (2105, 10), (2139, 10), (2182, 10), (2186, 10), (2190, 10), (2212, 10), (2214, 10), (2237, 10), (2245, 10), (2259, 10), (2260, 10), (2264, 10), (2308, 10), (2370, 10), (2394, 10), (2406, 10), (2455, 10), (2463, 10), (2490, 10), (2548, 10), (2553, 10), (2556, 10), (2558, 10), (2597, 10), (2600, 10), (2602, 10), (2776, 10), (2778, 10), (2792, 10), (2859, 10), (2873, 10), (2874, 10), (3043, 10), (3083, 10), (3224, 10), (3272, 10), (3279, 10), (3298, 10), (3325, 10), (3383, 10), (3509, 10), (317, 11), (432, 11), (677, 11), (785, 11), (1313, 11), (1346, 11), (1387, 11), (1408, 11), (2204, 11), (2240, 11), (2299, 11), (2357, 11), (2474, 11), (2773, 11), (3153, 11), (3201, 11), (1792, 12), (1943, 12)]
    goal_sort_reverse = [(1792, 12), (1943, 12), (317, 11), (432, 11), (677, 11), (785, 11), (1313, 11), (1346, 11), (1387, 11), (1408, 11), (2204, 11), (2240, 11), (2299, 11), (2357, 11), (2474, 11), (2773, 11), (3153, 11), (3201, 11), (23, 10), (218, 10), (272, 10), (475, 10), (703, 10), (778, 10), (801, 10), (933, 10), (1105, 10), (1159, 10), (1275, 10), (1354, 10), (1367, 10), (1405, 10), (1530, 10), (1543, 10), (1666, 10), (1674, 10), (1675, 10), (1690, 10), (1696, 10), (1732, 10), (1777, 10), (1843, 10), (1900, 10), (1908, 10), (1958, 10), (2054, 10), (2086, 10), (2105, 10), (2139, 10), (2182, 10), (2186, 10), (2190, 10), (2212, 10), (2214, 10), (2237, 10), (2245, 10), (2259, 10), (2260, 10), (2264, 10), (2308, 10), (2370, 10), (2394, 10), (2406, 10), (2455, 10), (2463, 10), (2490, 10), (2548, 10), (2553, 10), (2556, 10), (2558, 10), (2597, 10), (2600, 10), (2602, 10), (2776, 10), (2778, 10), (2792, 10), (2859, 10), (2873, 10), (2874, 10), (3043, 10), (3083, 10), (3224, 10), (3272, 10), (3279, 10), (3298, 10), (3325, 10), (3383, 10), (3509, 10), (3, 9), (4, 9), (10, 9), (14, 9), (24, 9), (30, 9), (35, 9), (49, 9), (56, 9), (84, 9), (88, 9), (123, 9), (131, 9), (132, 9), (161, 9), (178, 9), (208, 9), (228, 9), (229, 9), (235, 9), (255, 9), (264, 9), (276, 9), (284, 9), (302, 9), (306, 9), (310, 9), (319, 9), (327, 9), (344, 9), (348, 9), (361, 9), (407, 9), (426, 9), (428, 9), (467, 9), (487, 9), (510, 9), (513, 9), (515, 9), (537, 9), (590, 9), (607, 9), (609, 9), (616, 9), (630, 9), (691, 9), (704, 9), (725, 9), (733, 9), (740, 9), (771, 9), (787, 9), (790, 9), (807, 9), (813, 9), (840, 9), (843, 9), (855, 9), (857, 9), (861, 9), (863, 9), (876, 9), (886, 9), (891, 9), (900, 9), (902, 9), (909, 9), (914, 9), (917, 9), (918, 9), (919, 9), (920, 9), (921, 9), (925, 9), (926, 9), (934, 9), (938, 9), (939, 9), (941, 9), (945, 9), (947, 9), (952, 9), (953, 9), (956, 9), (964, 9), (967, 9), (974, 9), (975, 9), (976, 9), (978, 9), (980, 9), (983, 9), (997, 9), (1000, 9), (1007, 9), (1011, 9), (1015, 9), (1023, 9), (1027, 9), (1028, 9), (1032, 9), (1051, 9), (1053, 9), (1055, 9), (1058, 9), (1068, 9), (1092, 9), (1096, 9), (1101, 9), (1110, 9), (1112, 9), (1126, 9), (1148, 9), (1152, 9), (1182, 9), (1189, 9), (1221, 9), (1227, 9), (1253, 9), (1254, 9), (1277, 9), (1280, 9), (1303, 9), (1304, 9), (1308, 9), (1310, 9), (1312, 9), (1314, 9), (1319, 9), (1320, 9), (1328, 9), (1329, 9), (1333, 9), (1335, 9), (1339, 9), (1341, 9), (1349, 9), (1356, 9), (1358, 9), (1377, 9), (1379, 9), (1381, 9), (1384, 9), (1390, 9), (1392, 9), (1395, 9), (1407, 9), (1410, 9), (1411, 9), (1418, 9), (1419, 9), (1423, 9), (1427, 9), (1432, 9), (1441, 9), (1447, 9), (1465, 9), (1470, 9), (1478, 9), (1491, 9), (1508, 9), (1526, 9), (1528, 9), (1544, 9), (1545, 9), (1550, 9), (1553, 9), (1559, 9), (1560, 9), (1561, 9), (1562, 9), (1563, 9), (1567, 9), (1573, 9), (1594, 9), (1600, 9), (1613, 9), (1630, 9), (1633, 9), (1637, 9), (1641, 9), (1660, 9), (1671, 9), (1679, 9), (1684, 9), (1692, 9), (1697, 9), (1699, 9), (1706, 9), (1728, 9), (1735, 9), (1736, 9), (1738, 9), (1741, 9), (1747, 9), (1767, 9), (1778, 9), (1780, 9), (1789, 9), (1804, 9), (1806, 9), (1808, 9), (1824, 9), (1865, 9), (1873, 9), (1881, 9), (1885, 9), (1890, 9), (1897, 9), (1913, 9), (1924, 9), (1933, 9), (1934, 9), (1953, 9), (1967, 9), (1970, 9), (1977, 9), (1978, 9), (1981, 9), (2010, 9), (2012, 9), (2016, 9), (2018, 9), (2039, 9), (2042, 9), (2047, 9), (2061, 9), (2065, 9), (2068, 9), (2070, 9), (2074, 9), (2128, 9), (2140, 9), (2145, 9), (2160, 9), (2162, 9), (2164, 9), (2181, 9), (2189, 9), (2203, 9), (2207, 9), (2210, 9), (2228, 9), (2230, 9), (2252, 9), (2283, 9), (2285, 9), (2313, 9), (2321, 9), (2323, 9), (2326, 9), (2331, 9), (2332, 9), (2343, 9), (2355, 9), (2380, 9), (2389, 9), (2395, 9), (2396, 9), (2397, 9), (2401, 9), (2408, 9), (2409, 9), (2419, 9), (2423, 9), (2426, 9), (2427, 9), (2429, 9), (2438, 9), (2444, 9), (2445, 9), (2450, 9), (2451, 9), (2452, 9), (2465, 9), (2472, 9), (2475, 9), (2489, 9), (2492, 9), (2494, 9), (2495, 9), (2496, 9), (2498, 9), (2508, 9), (2512, 9), (2514, 9), (2519, 9), (2527, 9), (2528, 9), (2530, 9), (2532, 9), (2533, 9), (2535, 9), (2537, 9), (2538, 9), (2542, 9), (2544, 9), (2546, 9), (2549, 9), (2552, 9), (2559, 9), (2560, 9), (2563, 9), (2570, 9), (2572, 9), (2582, 9), (2583, 9), (2584, 9), (2592, 9), (2605, 9), (2611, 9), (2620, 9), (2632, 9), (2634, 9), (2641, 9), (2649, 9), (2651, 9), (2670, 9), (2681, 9), (2694, 9), (2698, 9), (2704, 9), (2712, 9), (2713, 9), (2717, 9), (2762, 9), (2768, 9), (2770, 9), (2775, 9), (2785, 9), (2786, 9), (2793, 9), (2801, 9), (2804, 9), (2807, 9), (2812, 9), (2819, 9), (2832, 9), (2844, 9), (2845, 9), (2855, 9), (2875, 9), (2876, 9), (2888, 9), (2891, 9), (2897, 9), (2909, 9), (2916, 9), (2928, 9), (2954, 9), (2974, 9), (2976, 9), (2979, 9), (2981, 9), (2991, 9), (2996, 9), (2998, 9), (3011, 9), (3014, 9), (3018, 9), (3027, 9), (3044, 9), (3051, 9), (3087, 9), (3109, 9), (3110, 9), (3125, 9), (3160, 9), (3169, 9), (3172, 9), (3179, 9), (3183, 9), (3192, 9), (3193, 9), (3206, 9), (3208, 9), (3220, 9), (3244, 9), (3258, 9), (3267, 9), (3281, 9), (3286, 9), (3295, 9), (3296, 9), (3297, 9), (3306, 9), (3308, 9), (3309, 9), (3318, 9), (3322, 9), (3323, 9), (3332, 9), (3335, 9), (3341, 9), (3349, 9), (3374, 9), (3384, 9), (3389, 9), (3393, 9), (3399, 9), (3404, 9), (3411, 9), (3502, 9), (3504, 9), (2, 8), (5, 8), (6, 8), (7, 8), (9, 8), (12, 8), (13, 8), (16, 8), (21, 8), (25, 8), (27, 8), (34, 8), (39, 8), (42, 8), (45, 8), (51, 8), (54, 8), (59, 8), (63, 8), (65, 8), (66, 8), (67, 8), (68, 8), (69, 8), (70, 8), (73, 8), (74, 8), (75, 8), (76, 8), (79, 8), (83, 8), (87, 8), (90, 8), (92, 8), (95, 8), (96, 8), (100, 8), (101, 8), (102, 8), (106, 8), (107, 8), (109, 8), (112, 8), (114, 8), (116, 8), (120, 8), (121, 8), (126, 8), (129, 8), (130, 8), (133, 8), (135, 8), (136, 8), (139, 8), (142, 8), (144, 8), (145, 8), (146, 8), (150, 8), (154, 8), (155, 8), (156, 8), (157, 8), (160, 8), (162, 8), (163, 8), (165, 8), (166, 8), (172, 8), (173, 8), (176, 8), (177, 8), (180, 8), (183, 8), (184, 8), (185, 8), (186, 8), (188, 8), (189, 8), (191, 8), (195, 8), (196, 8), (198, 8), (200, 8), (203, 8), (209, 8), (211, 8), (213, 8), (216, 8), (217, 8), (219, 8), (220, 8), (222, 8), (223, 8), (227, 8), (231, 8), (233, 8), (234, 8), (236, 8), (238, 8), (240, 8), (241, 8), (244, 8), (246, 8), (248, 8), (251, 8), (252, 8), (254, 8), (257, 8), (259, 8), (263, 8), (265, 8), (270, 8), (274, 8), (277, 8), (280, 8), (282, 8), (283, 8), (287, 8), (288, 8), (292, 8), (294, 8), (295, 8), (301, 8), (303, 8), (304, 8), (305, 8), (308, 8), (309, 8), (312, 8), (313, 8), (316, 8), (320, 8), (321, 8), (322, 8), (323, 8), (326, 8), (330, 8), (331, 8), (336, 8), (337, 8), (339, 8), (341, 8), (346, 8), (356, 8), (360, 8), (365, 8), (368, 8), (369, 8), (377, 8), (378, 8), (379, 8), (380, 8), (381, 8), (382, 8), (383, 8), (385, 8), (386, 8), (393, 8), (398, 8), (414, 8), (420, 8), (433, 8), (434, 8), (442, 8), (457, 8), (471, 8), (483, 8), (490, 8), (491, 8), (494, 8), (496, 8), (502, 8), (505, 8), (506, 8), (508, 8), (516, 8), (518, 8), (519, 8), (529, 8), (530, 8), (531, 8), (534, 8), (535, 8), (541, 8), (546, 8), (547, 8), (548, 8), (550, 8), (556, 8), (561, 8), (563, 8), (566, 8), (568, 8), (570, 8), (572, 8), (580, 8), (585, 8), (589, 8), (593, 8), (597, 8), (598, 8), (599, 8), (602, 8), (603, 8), (604, 8), (606, 8), (617, 8), (618, 8), (624, 8), (627, 8), (636, 8), (637, 8), (644, 8), (664, 8), (668, 8), (671, 8), (672, 8), (676, 8), (680, 8), (686, 8), (687, 8), (692, 8), (694, 8), (710, 8), (711, 8), (712, 8), (714, 8), (717, 8), (724, 8), (727, 8), (734, 8), (737, 8), (738, 8), (745, 8), (751, 8), (755, 8), (761, 8), (772, 8), (773, 8), (774, 8), (780, 8), (788, 8), (789, 8), (791, 8), (792, 8), (794, 8), (795, 8), (798, 8), (799, 8), (804, 8), (808, 8), (818, 8), (823, 8), (824, 8), (826, 8), (828, 8), (829, 8), (835, 8), (841, 8), (842, 8), (845, 8), (846, 8), (848, 8), (850, 8), (853, 8), (854, 8), (856, 8), (864, 8), (869, 8), (870, 8), (872, 8), (874, 8), (879, 8), (880, 8), (882, 8), (884, 8), (885, 8), (888, 8), (889, 8), (890, 8), (894, 8), (895, 8), (896, 8), (907, 8), (908, 8), (910, 8), (911, 8), (915, 8), (916, 8), (924, 8), (927, 8), (929, 8), (930, 8), (931, 8), (932, 8), (935, 8), (937, 8), (942, 8), (943, 8), (944, 8), (948, 8), (954, 8), (957, 8), (958, 8), (959, 8), (961, 8), (966, 8), (971, 8), (972, 8), (973, 8), (977, 8), (979, 8), (981, 8), (985, 8), (986, 8), (988, 8), (989, 8), (992, 8), (993, 8), (994, 8), (998, 8), (999, 8), (1002, 8), (1003, 8), (1005, 8), (1008, 8), (1010, 8), (1012, 8), (1016, 8), (1026, 8), (1030, 8), (1033, 8), (1037, 8), (1038, 8), (1045, 8), (1052, 8), (1059, 8), (1060, 8), (1061, 8), (1062, 8), (1064, 8), (1065, 8), (1069, 8), (1074, 8), (1075, 8), (1076, 8), (1077, 8), (1079, 8), (1082, 8), (1084, 8), (1088, 8), (1089, 8), (1099, 8), (1104, 8), (1111, 8), (1117, 8), (1118, 8), (1124, 8), (1127, 8), (1129, 8), (1131, 8), (1132, 8), (1138, 8), (1139, 8), (1143, 8), (1147, 8), (1149, 8), (1153, 8), (1158, 8), (1160, 8), (1162, 8), (1167, 8), (1171, 8), (1175, 8), (1176, 8), (1179, 8), (1181, 8), (1185, 8), (1186, 8), (1187, 8), (1190, 8), (1191, 8), (1192, 8), (1193, 8), (1196, 8), (1198, 8), (1199, 8), (1200, 8), (1201, 8), (1202, 8), (1205, 8), (1206, 8), (1208, 8), (1211, 8), (1213, 8), (1214, 8), (1215, 8), (1217, 8), (1219, 8), (1222, 8), (1230, 8), (1235, 8), (1237, 8), (1239, 8), (1241, 8), (1243, 8), (1246, 8), (1248, 8), (1249, 8), (1252, 8), (1256, 8), (1257, 8), (1260, 8), (1264, 8), (1268, 8), (1269, 8), (1270, 8), (1274, 8), (1281, 8), (1282, 8), (1284, 8), (1285, 8), (1287, 8), (1290, 8), (1295, 8), (1297, 8), (1298, 8), (1302, 8), (1309, 8), (1315, 8), (1316, 8), (1321, 8), (1324, 8), (1326, 8), (1330, 8), (1331, 8), (1338, 8), (1340, 8), (1343, 8), (1345, 8), (1347, 8), (1348, 8), (1350, 8), (1353, 8), (1360, 8), (1362, 8), (1364, 8), (1365, 8), (1368, 8), (1371, 8), (1373, 8), (1374, 8), (1380, 8), (1382, 8), (1383, 8), (1385, 8), (1388, 8), (1389, 8), (1391, 8), (1393, 8), (1397, 8), (1398, 8), (1399, 8), (1400, 8), (1401, 8), (1403, 8), (1404, 8), (1406, 8), (1412, 8), (1416, 8), (1417, 8), (1420, 8), (1422, 8), (1425, 8), (1426, 8), (1431, 8), (1443, 8), (1446, 8), (1448, 8), (1449, 8), (1450, 8), (1456, 8), (1457, 8), (1458, 8), (1461, 8), (1462, 8), (1464, 8), (1468, 8), (1469, 8), (1471, 8), (1472, 8), (1477, 8), (1483, 8), (1486, 8), (1489, 8), (1493, 8), (1495, 8), (1496, 8), (1498, 8), (1499, 8), (1500, 8), (1501, 8), (1503, 8), (1505, 8), (1506, 8), (1511, 8), (1513, 8), (1514, 8), (1515, 8), (1516, 8), (1517, 8), (1519, 8), (1522, 8), (1523, 8), (1529, 8), (1532, 8), (1536, 8), (1540, 8), (1542, 8), (1546, 8), (1549, 8), (1552, 8), (1554, 8), (1557, 8), (1558, 8), (1566, 8), (1568, 8), (1569, 8), (1574, 8), (1575, 8), (1576, 8), (1578, 8), (1580, 8), (1583, 8), (1584, 8), (1585, 8), (1586, 8), (1588, 8), (1603, 8), (1606, 8), (1608, 8), (1612, 8), (1616, 8), (1617, 8), (1619, 8), (1620, 8), (1622, 8), (1623, 8), (1624, 8), (1627, 8), (1628, 8), (1629, 8), (1631, 8), (1636, 8), (1638, 8), (1639, 8), (1642, 8), (1643, 8), (1644, 8), (1645, 8), (1650, 8), (1651, 8), (1652, 8), (1653, 8), (1655, 8), (1656, 8), (1658, 8), (1659, 8), (1661, 8), (1664, 8), (1665, 8), (1669, 8), (1676, 8), (1677, 8), (1683, 8), (1686, 8), (1688, 8), (1691, 8), (1693, 8), (1695, 8), (1698, 8), (1702, 8), (1703, 8), (1707, 8), (1709, 8), (1710, 8), (1712, 8), (1713, 8), (1717, 8), (1718, 8), (1719, 8), (1720, 8), (1721, 8), (1722, 8), (1723, 8), (1724, 8), (1731, 8), (1734, 8), (1739, 8), (1746, 8), (1750, 8), (1751, 8), (1752, 8), (1753, 8), (1754, 8), (1755, 8), (1758, 8), (1760, 8), (1762, 8), (1763, 8), (1764, 8), (1768, 8), (1770, 8), (1773, 8), (1774, 8), (1775, 8), (1783, 8), (1784, 8), (1786, 8), (1787, 8), (1788, 8), (1790, 8), (1796, 8), (1800, 8), (1812, 8), (1818, 8), (1819, 8), (1820, 8), (1826, 8), (1827, 8), (1831, 8), (1832, 8), (1834, 8), (1836, 8), (1840, 8), (1841, 8), (1842, 8), (1847, 8), (1850, 8), (1851, 8), (1852, 8), (1853, 8), (1855, 8), (1856, 8), (1858, 8), (1859, 8), (1866, 8), (1867, 8), (1868, 8), (1869, 8), (1871, 8), (1876, 8), (1877, 8), (1878, 8), (1882, 8), (1884, 8), (1886, 8), (1887, 8), (1889, 8), (1893, 8), (1894, 8), (1898, 8), (1910, 8), (1914, 8), (1919, 8), (1926, 8), (1927, 8), (1928, 8), (1932, 8), (1935, 8), (1936, 8), (1939, 8), (1940, 8), (1949, 8), (1950, 8), (1956, 8), (1959, 8), (1962, 8), (1965, 8), (1968, 8), (1969, 8), (1971, 8), (1972, 8), (1975, 8), (1982, 8), (1983, 8), (1995, 8), (1997, 8), (2003, 8), (2008, 8), (2013, 8), (2017, 8), (2022, 8), (2026, 8), (2033, 8), (2036, 8), (2037, 8), (2043, 8), (2044, 8), (2045, 8), (2046, 8), (2053, 8), (2055, 8), (2058, 8), (2059, 8), (2066, 8), (2071, 8), (2073, 8), (2077, 8), (2079, 8), (2081, 8), (2082, 8), (2083, 8), (2087, 8), (2091, 8), (2094, 8), (2095, 8), (2098, 8), (2102, 8), (2104, 8), (2112, 8), (2122, 8), (2123, 8), (2124, 8), (2126, 8), (2129, 8), (2131, 8), (2135, 8), (2136, 8), (2143, 8), (2151, 8), (2152, 8), (2154, 8), (2156, 8), (2161, 8), (2165, 8), (2167, 8), (2172, 8), (2174, 8), (2175, 8), (2177, 8), (2178, 8), (2180, 8), (2183, 8), (2192, 8), (2197, 8), (2199, 8), (2200, 8), (2201, 8), (2202, 8), (2206, 8), (2208, 8), (2211, 8), (2215, 8), (2217, 8), (2218, 8), (2220, 8), (2222, 8), (2223, 8), (2225, 8), (2226, 8), (2227, 8), (2232, 8), (2233, 8), (2238, 8), (2239, 8), (2244, 8), (2251, 8), (2253, 8), (2255, 8), (2263, 8), (2265, 8), (2266, 8), (2269, 8), (2272, 8), (2274, 8), (2275, 8), (2276, 8), (2278, 8), (2279, 8), (2281, 8), (2282, 8), (2287, 8), (2291, 8), (2293, 8), (2294, 8), (2295, 8), (2296, 8), (2297, 8), (2298, 8), (2303, 8), (2304, 8), (2306, 8), (2307, 8), (2309, 8), (2310, 8), (2314, 8), (2318, 8), (2319, 8), (2322, 8), (2325, 8), (2328, 8), (2334, 8), (2335, 8), (2336, 8), (2344, 8), (2345, 8), (2351, 8), (2352, 8), (2358, 8), (2360, 8), (2367, 8), (2369, 8), (2371, 8), (2372, 8), (2378, 8), (2379, 8), (2391, 8), (2393, 8), (2411, 8), (2412, 8), (2413, 8), (2420, 8), (2422, 8), (2433, 8), (2434, 8), (2439, 8), (2440, 8), (2441, 8), (2442, 8), (2443, 8), (2449, 8), (2454, 8), (2458, 8), (2461, 8), (2462, 8), (2468, 8), (2471, 8), (2481, 8), (2483, 8), (2484, 8), (2485, 8), (2487, 8), (2493, 8), (2497, 8), (2501, 8), (2503, 8), (2504, 8), (2505, 8), (2507, 8), (2509, 8), (2510, 8), (2515, 8), (2516, 8), (2517, 8), (2520, 8), (2521, 8), (2525, 8), (2529, 8), (2534, 8), (2540, 8), (2543, 8), (2545, 8), (2551, 8), (2555, 8), (2561, 8), (2564, 8), (2565, 8), (2566, 8), (2567, 8), (2568, 8), (2569, 8), (2573, 8), (2577, 8), (2578, 8), (2579, 8), (2580, 8), (2581, 8), (2589, 8), (2590, 8), (2594, 8), (2595, 8), (2598, 8), (2601, 8), (2604, 8), (2606, 8), (2607, 8), (2608, 8), (2612, 8), (2613, 8), (2614, 8), (2618, 8), (2624, 8), (2625, 8), (2627, 8), (2628, 8), (2630, 8), (2637, 8), (2640, 8), (2646, 8), (2648, 8), (2650, 8), (2653, 8), (2654, 8), (2657, 8), (2658, 8), (2663, 8), (2664, 8), (2665, 8), (2668, 8), (2672, 8), (2676, 8), (2677, 8), (2682, 8), (2683, 8), (2688, 8), (2689, 8), (2692, 8), (2695, 8), (2697, 8), (2699, 8), (2700, 8), (2702, 8), (2703, 8), (2705, 8), (2707, 8), (2708, 8), (2714, 8), (2716, 8), (2718, 8), (2721, 8), (2729, 8), (2730, 8), (2733, 8), (2736, 8), (2743, 8), (2745, 8), (2746, 8), (2748, 8), (2749, 8), (2757, 8), (2758, 8), (2759, 8), (2760, 8), (2763, 8), (2767, 8), (2769, 8), (2777, 8), (2782, 8), (2783, 8), (2797, 8), (2799, 8), (2808, 8), (2809, 8), (2814, 8), (2816, 8), (2817, 8), (2825, 8), (2827, 8), (2830, 8), (2835, 8), (2847, 8), (2848, 8), (2857, 8), (2858, 8), (2861, 8), (2862, 8), (2863, 8), (2864, 8), (2869, 8), (2870, 8), (2872, 8), (2887, 8), (2890, 8), (2892, 8), (2896, 8), (2898, 8), (2900, 8), (2901, 8), (2903, 8), (2907, 8), (2919, 8), (2921, 8), (2922, 8), (2925, 8), (2931, 8), (2932, 8), (2935, 8), (2938, 8), (2941, 8), (2944, 8), (2946, 8), (2950, 8), (2952, 8), (2955, 8), (2957, 8), (2966, 8), (2968, 8), (2971, 8), (2972, 8), (2975, 8), (2983, 8), (2984, 8), (2987, 8), (2989, 8), (2995, 8), (3000, 8), (3001, 8), (3007, 8), (3008, 8), (3009, 8), (3015, 8), (3019, 8), (3021, 8), (3024, 8), (3029, 8), (3030, 8), (3031, 8), (3032, 8), (3033, 8), (3035, 8), (3038, 8), (3039, 8), (3042, 8), (3045, 8), (3054, 8), (3056, 8), (3057, 8), (3061, 8), (3068, 8), (3070, 8), (3071, 8), (3072, 8), (3075, 8), (3078, 8), (3079, 8), (3080, 8), (3082, 8), (3084, 8), (3085, 8), (3090, 8), (3091, 8), (3094, 8), (3096, 8), (3097, 8), (3098, 8), (3099, 8), (3101, 8), (3102, 8), (3103, 8), (3104, 8), (3107, 8), (3108, 8), (3113, 8), (3114, 8), (3115, 8), (3118, 8), (3120, 8), (3122, 8), (3123, 8), (3124, 8), (3126, 8), (3127, 8), (3132, 8), (3137, 8), (3140, 8), (3141, 8), (3143, 8), (3146, 8), (3148, 8), (3149, 8), (3150, 8), (3154, 8), (3155, 8), (3161, 8), (3162, 8), (3163, 8), (3165, 8), (3167, 8), (3170, 8), (3171, 8), (3173, 8), (3174, 8), (3177, 8), (3181, 8), (3184, 8), (3189, 8), (3190, 8), (3191, 8), (3196, 8), (3198, 8), (3199, 8), (3203, 8), (3210, 8), (3211, 8), (3212, 8), (3216, 8), (3218, 8), (3219, 8), (3226, 8), (3227, 8), (3228, 8), (3230, 8), (3231, 8), (3236, 8), (3247, 8), (3250, 8), (3253, 8), (3257, 8), (3262, 8), (3264, 8), (3269, 8), (3270, 8), (3273, 8), (3274, 8), (3275, 8), (3277, 8), (3278, 8), (3282, 8), (3283, 8), (3284, 8), (3285, 8), (3288, 8), (3299, 8), (3302, 8), (3303, 8), (3304, 8), (3305, 8), (3307, 8), (3310, 8), (3314, 8), (3319, 8), (3324, 8), (3326, 8), (3328, 8), (3331, 8), (3334, 8), (3336, 8), (3337, 8), (3340, 8), (3342, 8), (3343, 8), (3344, 8), (3345, 8), (3347, 8), (3348, 8), (3350, 8), (3356, 8), (3358, 8), (3361, 8), (3368, 8), (3373, 8), (3376, 8), (3380, 8), (3381, 8), (3382, 8), (3387, 8), (3390, 8), (3392, 8), (3408, 8), (3417, 8), (3433, 8), (3438, 8), (3475, 8), (3479, 8), (3485, 8), (3487, 8), (3496, 8), (3498, 8), (3514, 8), (3515, 8), (8, 7), (11, 7), (15, 7), (17, 7), (19, 7), (22, 7), (28, 7), (29, 7), (31, 7), (32, 7), (37, 7), (38, 7), (40, 7), (41, 7), (43, 7), (44, 7), (46, 7), (50, 7), (53, 7), (58, 7), (60, 7), (61, 7), (71, 7), (72, 7), (77, 7), (78, 7), (81, 7), (82, 7), (86, 7), (91, 7), (97, 7), (98, 7), (99, 7), (103, 7), (104, 7), (108, 7), (110, 7), (113, 7), (115, 7), (119, 7), (125, 7), (127, 7), (128, 7), (137, 7), (140, 7), (141, 7), (143, 7), (147, 7), (148, 7), (149, 7), (151, 7), (153, 7), (158, 7), (159, 7), (164, 7), (168, 7), (170, 7), (171, 7), (174, 7), (175, 7), (181, 7), (187, 7), (192, 7), (194, 7), (197, 7), (204, 7), (205, 7), (206, 7), (212, 7), (214, 7), (215, 7), (224, 7), (230, 7), (232, 7), (239, 7), (242, 7), (245, 7), (250, 7), (253, 7), (256, 7), (260, 7), (261, 7), (267, 7), (269, 7), (271, 7), (273, 7), (275, 7), (279, 7), (281, 7), (285, 7), (286, 7), (290, 7), (298, 7), (300, 7), (307, 7), (311, 7), (314, 7), (318, 7), (324, 7), (328, 7), (332, 7), (333, 7), (335, 7), (338, 7), (343, 7), (349, 7), (350, 7), (351, 7), (352, 7), (354, 7), (357, 7), (363, 7), (364, 7), (366, 7), (372, 7), (373, 7), (375, 7), (376, 7), (384, 7), (388, 7), (389, 7), (391, 7), (394, 7), (395, 7), (399, 7), (401, 7), (402, 7), (403, 7), (404, 7), (406, 7), (408, 7), (409, 7), (411, 7), (415, 7), (417, 7), (418, 7), (419, 7), (421, 7), (422, 7), (424, 7), (427, 7), (429, 7), (430, 7), (431, 7), (435, 7), (436, 7), (438, 7), (440, 7), (443, 7), (444, 7), (445, 7), (446, 7), (447, 7), (448, 7), (449, 7), (450, 7), (451, 7), (452, 7), (453, 7), (454, 7), (461, 7), (462, 7), (464, 7), (465, 7), (466, 7), (469, 7), (470, 7), (472, 7), (473, 7), (474, 7), (476, 7), (478, 7), (480, 7), (482, 7), (485, 7), (486, 7), (489, 7), (492, 7), (493, 7), (495, 7), (498, 7), (500, 7), (501, 7), (503, 7), (504, 7), (507, 7), (509, 7), (511, 7), (512, 7), (514, 7), (520, 7), (522, 7), (523, 7), (525, 7), (526, 7), (527, 7), (528, 7), (532, 7), (533, 7), (536, 7), (538, 7), (540, 7), (542, 7), (543, 7), (544, 7), (545, 7), (551, 7), (554, 7), (555, 7), (557, 7), (558, 7), (559, 7), (560, 7), (565, 7), (569, 7), (571, 7), (573, 7), (574, 7), (577, 7), (579, 7), (582, 7), (583, 7), (584, 7), (586, 7), (592, 7), (594, 7), (596, 7), (601, 7), (605, 7), (608, 7), (610, 7), (611, 7), (615, 7), (619, 7), (620, 7), (623, 7), (625, 7), (626, 7), (629, 7), (631, 7), (632, 7), (634, 7), (635, 7), (638, 7), (639, 7), (640, 7), (642, 7), (643, 7), (645, 7), (648, 7), (649, 7), (650, 7), (651, 7), (653, 7), (655, 7), (656, 7), (657, 7), (658, 7), (660, 7), (663, 7), (665, 7), (669, 7), (670, 7), (673, 7), (674, 7), (675, 7), (678, 7), (679, 7), (682, 7), (683, 7), (684, 7), (685, 7), (689, 7), (690, 7), (693, 7), (697, 7), (698, 7), (699, 7), (700, 7), (701, 7), (702, 7), (706, 7), (708, 7), (709, 7), (713, 7), (715, 7), (716, 7), (730, 7), (735, 7), (736, 7), (742, 7), (746, 7), (749, 7), (750, 7), (756, 7), (759, 7), (764, 7), (766, 7), (767, 7), (768, 7), (770, 7), (777, 7), (779, 7), (782, 7), (783, 7), (784, 7), (786, 7), (793, 7), (796, 7), (797, 7), (800, 7), (802, 7), (803, 7), (806, 7), (809, 7), (810, 7), (812, 7), (814, 7), (815, 7), (817, 7), (819, 7), (820, 7), (821, 7), (822, 7), (825, 7), (827, 7), (830, 7), (831, 7), (833, 7), (834, 7), (836, 7), (837, 7), (838, 7), (839, 7), (847, 7), (849, 7), (852, 7), (858, 7), (859, 7), (860, 7), (865, 7), (867, 7), (868, 7), (871, 7), (873, 7), (877, 7), (878, 7), (881, 7), (883, 7), (887, 7), (892, 7), (893, 7), (897, 7), (898, 7), (899, 7), (903, 7), (905, 7), (906, 7), (912, 7), (913, 7), (922, 7), (923, 7), (928, 7), (936, 7), (940, 7), (949, 7), (950, 7), (951, 7), (955, 7), (960, 7), (965, 7), (968, 7), (969, 7), (984, 7), (987, 7), (990, 7), (991, 7), (995, 7), (996, 7), (1001, 7), (1004, 7), (1006, 7), (1009, 7), (1014, 7), (1017, 7), (1018, 7), (1019, 7), (1020, 7), (1021, 7), (1022, 7), (1024, 7), (1025, 7), (1029, 7), (1031, 7), (1034, 7), (1036, 7), (1039, 7), (1040, 7), (1041, 7), (1042, 7), (1043, 7), (1044, 7), (1046, 7), (1047, 7), (1048, 7), (1049, 7), (1057, 7), (1066, 7), (1067, 7), (1070, 7), (1071, 7), (1072, 7), (1073, 7), (1078, 7), (1080, 7), (1083, 7), (1085, 7), (1091, 7), (1094, 7), (1095, 7), (1097, 7), (1100, 7), (1102, 7), (1106, 7), (1107, 7), (1109, 7), (1113, 7), (1116, 7), (1119, 7), (1120, 7), (1121, 7), (1123, 7), (1125, 7), (1133, 7), (1134, 7), (1135, 7), (1136, 7), (1137, 7), (1141, 7), (1142, 7), (1144, 7), (1145, 7), (1151, 7), (1155, 7), (1156, 7), (1157, 7), (1163, 7), (1164, 7), (1168, 7), (1169, 7), (1170, 7), (1173, 7), (1174, 7), (1178, 7), (1183, 7), (1184, 7), (1188, 7), (1194, 7), (1195, 7), (1197, 7), (1203, 7), (1204, 7), (1209, 7), (1210, 7), (1212, 7), (1216, 7), (1218, 7), (1220, 7), (1223, 7), (1224, 7), (1226, 7), (1228, 7), (1229, 7), (1231, 7), (1232, 7), (1233, 7), (1234, 7), (1240, 7), (1250, 7), (1251, 7), (1255, 7), (1258, 7), (1259, 7), (1261, 7), (1263, 7), (1266, 7), (1267, 7), (1271, 7), (1272, 7), (1273, 7), (1278, 7), (1286, 7), (1289, 7), (1296, 7), (1299, 7), (1300, 7), (1301, 7), (1306, 7), (1317, 7), (1322, 7), (1323, 7), (1327, 7), (1332, 7), (1334, 7), (1336, 7), (1337, 7), (1344, 7), (1351, 7), (1355, 7), (1357, 7), (1359, 7), (1361, 7), (1363, 7), (1369, 7), (1370, 7), (1375, 7), (1376, 7), (1378, 7), (1386, 7), (1394, 7), (1396, 7), (1402, 7), (1409, 7), (1413, 7), (1421, 7), (1424, 7), (1429, 7), (1430, 7), (1433, 7), (1434, 7), (1435, 7), (1436, 7), (1438, 7), (1439, 7), (1440, 7), (1442, 7), (1444, 7), (1445, 7), (1451, 7), (1452, 7), (1454, 7), (1455, 7), (1459, 7), (1466, 7), (1467, 7), (1473, 7), (1475, 7), (1479, 7), (1481, 7), (1485, 7), (1487, 7), (1490, 7), (1497, 7), (1502, 7), (1504, 7), (1509, 7), (1510, 7), (1512, 7), (1518, 7), (1520, 7), (1521, 7), (1524, 7), (1533, 7), (1535, 7), (1539, 7), (1541, 7), (1547, 7), (1551, 7), (1555, 7), (1556, 7), (1564, 7), (1565, 7), (1570, 7), (1571, 7), (1572, 7), (1577, 7), (1579, 7), (1581, 7), (1582, 7), (1587, 7), (1589, 7), (1590, 7), (1591, 7), (1592, 7), (1593, 7), (1595, 7), (1596, 7), (1597, 7), (1598, 7), (1599, 7), (1604, 7), (1609, 7), (1610, 7), (1611, 7), (1614, 7), (1615, 7), (1621, 7), (1625, 7), (1626, 7), (1632, 7), (1634, 7), (1635, 7), (1646, 7), (1647, 7), (1648, 7), (1649, 7), (1654, 7), (1657, 7), (1662, 7), (1663, 7), (1667, 7), (1668, 7), (1670, 7), (1672, 7), (1673, 7), (1678, 7), (1680, 7), (1681, 7), (1682, 7), (1685, 7), (1687, 7), (1689, 7), (1694, 7), (1700, 7), (1701, 7), (1705, 7), (1714, 7), (1725, 7), (1726, 7), (1727, 7), (1729, 7), (1730, 7), (1733, 7), (1737, 7), (1740, 7), (1743, 7), (1744, 7), (1745, 7), (1748, 7), (1749, 7), (1757, 7), (1759, 7), (1761, 7), (1765, 7), (1766, 7), (1769, 7), (1771, 7), (1776, 7), (1779, 7), (1781, 7), (1782, 7), (1785, 7), (1791, 7), (1793, 7), (1795, 7), (1798, 7), (1799, 7), (1803, 7), (1807, 7), (1809, 7), (1810, 7), (1811, 7), (1814, 7), (1816, 7), (1817, 7), (1821, 7), (1822, 7), (1823, 7), (1825, 7), (1833, 7), (1835, 7), (1839, 7), (1844, 7), (1846, 7), (1848, 7), (1849, 7), (1854, 7), (1857, 7), (1861, 7), (1862, 7), (1863, 7), (1870, 7), (1872, 7), (1875, 7), (1880, 7), (1888, 7), (1892, 7), (1895, 7), (1896, 7), (1901, 7), (1902, 7), (1903, 7), (1904, 7), (1905, 7), (1907, 7), (1909, 7), (1911, 7), (1912, 7), (1915, 7), (1916, 7), (1917, 7), (1921, 7), (1922, 7), (1925, 7), (1929, 7), (1930, 7), (1937, 7), (1938, 7), (1941, 7), (1944, 7), (1945, 7), (1946, 7), (1947, 7), (1948, 7), (1951, 7), (1952, 7), (1955, 7), (1957, 7), (1960, 7), (1961, 7), (1964, 7), (1966, 7), (1973, 7), (1980, 7), (1985, 7), (1987, 7), (1988, 7), (1989, 7), (1990, 7), (1996, 7), (2004, 7), (2007, 7), (2009, 7), (2015, 7), (2019, 7), (2020, 7), (2029, 7), (2051, 7), (2056, 7), (2057, 7), (2060, 7), (2062, 7), (2063, 7), (2069, 7), (2072, 7), (2075, 7), (2080, 7), (2085, 7), (2088, 7), (2090, 7), (2092, 7), (2093, 7), (2096, 7), (2100, 7), (2101, 7), (2109, 7), (2110, 7), (2113, 7), (2114, 7), (2115, 7), (2116, 7), (2117, 7), (2118, 7), (2119, 7), (2120, 7), (2125, 7), (2132, 7), (2133, 7), (2134, 7), (2137, 7), (2142, 7), (2144, 7), (2146, 7), (2147, 7), (2148, 7), (2150, 7), (2153, 7), (2157, 7), (2159, 7), (2163, 7), (2166, 7), (2169, 7), (2170, 7), (2171, 7), (2176, 7), (2179, 7), (2184, 7), (2185, 7), (2187, 7), (2188, 7), (2191, 7), (2193, 7), (2194, 7), (2195, 7), (2196, 7), (2209, 7), (2213, 7), (2216, 7), (2219, 7), (2224, 7), (2235, 7), (2236, 7), (2242, 7), (2243, 7), (2246, 7), (2247, 7), (2248, 7), (2250, 7), (2254, 7), (2256, 7), (2257, 7), (2258, 7), (2261, 7), (2262, 7), (2267, 7), (2268, 7), (2270, 7), (2271, 7), (2277, 7), (2280, 7), (2284, 7), (2286, 7), (2288, 7), (2289, 7), (2290, 7), (2292, 7), (2300, 7), (2301, 7), (2302, 7), (2311, 7), (2312, 7), (2316, 7), (2324, 7), (2327, 7), (2329, 7), (2330, 7), (2333, 7), (2337, 7), (2339, 7), (2340, 7), (2341, 7), (2342, 7), (2346, 7), (2347, 7), (2348, 7), (2349, 7), (2350, 7), (2353, 7), (2354, 7), (2356, 7), (2359, 7), (2361, 7), (2363, 7), (2364, 7), (2368, 7), (2373, 7), (2374, 7), (2375, 7), (2376, 7), (2377, 7), (2384, 7), (2385, 7), (2386, 7), (2387, 7), (2390, 7), (2398, 7), (2399, 7), (2400, 7), (2403, 7), (2405, 7), (2407, 7), (2410, 7), (2414, 7), (2415, 7), (2416, 7), (2417, 7), (2421, 7), (2425, 7), (2428, 7), (2430, 7), (2431, 7), (2435, 7), (2436, 7), (2447, 7), (2448, 7), (2453, 7), (2456, 7), (2459, 7), (2464, 7), (2466, 7), (2467, 7), (2469, 7), (2470, 7), (2473, 7), (2476, 7), (2477, 7), (2478, 7), (2480, 7), (2482, 7), (2486, 7), (2488, 7), (2491, 7), (2499, 7), (2502, 7), (2506, 7), (2511, 7), (2513, 7), (2518, 7), (2522, 7), (2523, 7), (2524, 7), (2526, 7), (2531, 7), (2536, 7), (2541, 7), (2547, 7), (2554, 7), (2557, 7), (2571, 7), (2574, 7), (2575, 7), (2576, 7), (2586, 7), (2587, 7), (2588, 7), (2593, 7), (2596, 7), (2610, 7), (2615, 7), (2621, 7), (2622, 7), (2626, 7), (2629, 7), (2635, 7), (2638, 7), (2639, 7), (2642, 7), (2643, 7), (2644, 7), (2647, 7), (2652, 7), (2656, 7), (2659, 7), (2662, 7), (2666, 7), (2667, 7), (2669, 7), (2671, 7), (2673, 7), (2674, 7), (2675, 7), (2678, 7), (2679, 7), (2680, 7), (2684, 7), (2685, 7), (2686, 7), (2687, 7), (2690, 7), (2693, 7), (2696, 7), (2701, 7), (2706, 7), (2710, 7), (2715, 7), (2720, 7), (2722, 7), (2723, 7), (2724, 7), (2725, 7), (2727, 7), (2728, 7), (2731, 7), (2732, 7), (2735, 7), (2737, 7), (2738, 7), (2739, 7), (2740, 7), (2741, 7), (2752, 7), (2754, 7), (2755, 7), (2756, 7), (2761, 7), (2764, 7), (2765, 7), (2766, 7), (2771, 7), (2772, 7), (2774, 7), (2779, 7), (2780, 7), (2781, 7), (2784, 7), (2787, 7), (2788, 7), (2789, 7), (2790, 7), (2791, 7), (2794, 7), (2795, 7), (2796, 7), (2800, 7), (2802, 7), (2803, 7), (2805, 7), (2806, 7), (2810, 7), (2811, 7), (2813, 7), (2815, 7), (2818, 7), (2820, 7), (2821, 7), (2822, 7), (2823, 7), (2824, 7), (2829, 7), (2831, 7), (2833, 7), (2834, 7), (2836, 7), (2837, 7), (2839, 7), (2840, 7), (2842, 7), (2843, 7), (2846, 7), (2849, 7), (2850, 7), (2852, 7), (2853, 7), (2854, 7), (2865, 7), (2867, 7), (2868, 7), (2871, 7), (2877, 7), (2879, 7), (2880, 7), (2881, 7), (2882, 7), (2883, 7), (2884, 7), (2885, 7), (2886, 7), (2889, 7), (2893, 7), (2894, 7), (2895, 7), (2899, 7), (2902, 7), (2904, 7), (2906, 7), (2908, 7), (2911, 7), (2912, 7), (2913, 7), (2914, 7), (2915, 7), (2917, 7), (2918, 7), (2920, 7), (2923, 7), (2924, 7), (2926, 7), (2927, 7), (2929, 7), (2930, 7), (2933, 7), (2934, 7), (2936, 7), (2939, 7), (2940, 7), (2942, 7), (2943, 7), (2945, 7), (2947, 7), (2948, 7), (2949, 7), (2951, 7), (2953, 7), (2956, 7), (2958, 7), (2959, 7), (2960, 7), (2961, 7), (2962, 7), (2963, 7), (2964, 7), (2965, 7), (2967, 7), (2969, 7), (2973, 7), (2977, 7), (2978, 7), (2980, 7), (2985, 7), (2988, 7), (2990, 7), (2993, 7), (2994, 7), (2999, 7), (3003, 7), (3004, 7), (3005, 7), (3006, 7), (3010, 7), (3012, 7), (3016, 7), (3017, 7), (3020, 7), (3023, 7), (3025, 7), (3028, 7), (3034, 7), (3036, 7), (3040, 7), (3041, 7), (3047, 7), (3048, 7), (3049, 7), (3053, 7), (3055, 7), (3058, 7), (3059, 7), (3060, 7), (3062, 7), (3063, 7), (3064, 7), (3065, 7), (3066, 7), (3067, 7), (3069, 7), (3073, 7), (3074, 7), (3076, 7), (3081, 7), (3088, 7), (3089, 7), (3092, 7), (3095, 7), (3100, 7), (3105, 7), (3106, 7), (3111, 7), (3116, 7), (3117, 7), (3119, 7), (3121, 7), (3129, 7), (3130, 7), (3133, 7), (3134, 7), (3135, 7), (3136, 7), (3138, 7), (3139, 7), (3142, 7), (3145, 7), (3147, 7), (3157, 7), (3158, 7), (3159, 7), (3164, 7), (3168, 7), (3176, 7), (3178, 7), (3180, 7), (3182, 7), (3185, 7), (3186, 7), (3187, 7), (3194, 7), (3195, 7), (3200, 7), (3202, 7), (3204, 7), (3205, 7), (3207, 7), (3209, 7), (3215, 7), (3217, 7), (3223, 7), (3225, 7), (3229, 7), (3233, 7), (3234, 7), (3235, 7), (3237, 7), (3239, 7), (3240, 7), (3241, 7), (3242, 7), (3245, 7), (3246, 7), (3248, 7), (3249, 7), (3251, 7), (3252, 7), (3254, 7), (3256, 7), (3260, 7), (3261, 7), (3263, 7), (3265, 7), (3266, 7), (3268, 7), (3271, 7), (3276, 7), (3280, 7), (3287, 7), (3289, 7), (3290, 7), (3291, 7), (3292, 7), (3294, 7), (3300, 7), (3311, 7), (3312, 7), (3313, 7), (3317, 7), (3320, 7), (3321, 7), (3327, 7), (3329, 7), (3330, 7), (3333, 7), (3339, 7), (3346, 7), (3352, 7), (3353, 7), (3354, 7), (3355, 7), (3357, 7), (3359, 7), (3360, 7), (3363, 7), (3364, 7), (3365, 7), (3366, 7), (3367, 7), (3369, 7), (3370, 7), (3371, 7), (3372, 7), (3375, 7), (3377, 7), (3385, 7), (3386, 7), (3391, 7), (3394, 7), (3395, 7), (3396, 7), (3397, 7), (3398, 7), (3401, 7), (3402, 7), (3405, 7), (3407, 7), (3409, 7), (3410, 7), (3413, 7), (3416, 7), (3418, 7), (3419, 7), (3421, 7), (3424, 7), (3425, 7), (3427, 7), (3428, 7), (3429, 7), (3431, 7), (3432, 7), (3435, 7), (3436, 7), (3439, 7), (3440, 7), (3441, 7), (3443, 7), (3447, 7), (3450, 7), (3454, 7), (3456, 7), (3457, 7), (3460, 7), (3462, 7), (3464, 7), (3466, 7), (3467, 7), (3468, 7), (3469, 7), (3470, 7), (3472, 7), (3481, 7), (3482, 7), (3483, 7), (3484, 7), (3488, 7), (3499, 7), (3501, 7), (3505, 7), (3508, 7), (3510, 7), (3518, 7), (3520, 7), (3521, 7), (3523, 7), (0, 6), (18, 6), (20, 6), (26, 6), (33, 6), (55, 6), (62, 6), (80, 6), (89, 6), (94, 6), (105, 6), (117, 6), (122, 6), (134, 6), (152, 6), (167, 6), (179, 6), (182, 6), (190, 6), (193, 6), (199, 6), (201, 6), (207, 6), (210, 6), (221, 6), (237, 6), (243, 6), (247, 6), (262, 6), (266, 6), (268, 6), (291, 6), (293, 6), (296, 6), (297, 6), (299, 6), (315, 6), (325, 6), (329, 6), (334, 6), (340, 6), (342, 6), (345, 6), (347, 6), (353, 6), (355, 6), (358, 6), (359, 6), (362, 6), (367, 6), (370, 6), (371, 6), (374, 6), (387, 6), (390, 6), (392, 6), (396, 6), (397, 6), (400, 6), (405, 6), (410, 6), (412, 6), (413, 6), (416, 6), (423, 6), (425, 6), (437, 6), (439, 6), (441, 6), (455, 6), (456, 6), (458, 6), (459, 6), (460, 6), (463, 6), (468, 6), (477, 6), (479, 6), (481, 6), (484, 6), (488, 6), (497, 6), (499, 6), (517, 6), (521, 6), (524, 6), (539, 6), (549, 6), (552, 6), (553, 6), (562, 6), (564, 6), (567, 6), (575, 6), (576, 6), (578, 6), (581, 6), (587, 6), (588, 6), (591, 6), (595, 6), (600, 6), (612, 6), (613, 6), (614, 6), (621, 6), (622, 6), (628, 6), (633, 6), (641, 6), (646, 6), (647, 6), (652, 6), (654, 6), (659, 6), (661, 6), (662, 6), (666, 6), (681, 6), (688, 6), (695, 6), (696, 6), (705, 6), (707, 6), (718, 6), (719, 6), (720, 6), (721, 6), (722, 6), (723, 6), (726, 6), (728, 6), (729, 6), (731, 6), (732, 6), (739, 6), (741, 6), (743, 6), (744, 6), (747, 6), (752, 6), (753, 6), (754, 6), (757, 6), (758, 6), (760, 6), (762, 6), (763, 6), (765, 6), (769, 6), (775, 6), (776, 6), (781, 6), (805, 6), (811, 6), (816, 6), (832, 6), (851, 6), (862, 6), (866, 6), (875, 6), (901, 6), (904, 6), (946, 6), (962, 6), (963, 6), (970, 6), (982, 6), (1035, 6), (1050, 6), (1054, 6), (1056, 6), (1063, 6), (1081, 6), (1086, 6), (1087, 6), (1090, 6), (1093, 6), (1098, 6), (1103, 6), (1108, 6), (1114, 6), (1115, 6), (1122, 6), (1128, 6), (1130, 6), (1140, 6), (1146, 6), (1150, 6), (1154, 6), (1165, 6), (1172, 6), (1177, 6), (1180, 6), (1207, 6), (1225, 6), (1236, 6), (1238, 6), (1242, 6), (1245, 6), (1247, 6), (1262, 6), (1265, 6), (1276, 6), (1279, 6), (1283, 6), (1288, 6), (1291, 6), (1292, 6), (1293, 6), (1294, 6), (1305, 6), (1307, 6), (1311, 6), (1318, 6), (1325, 6), (1342, 6), (1352, 6), (1366, 6), (1372, 6), (1414, 6), (1428, 6), (1437, 6), (1453, 6), (1460, 6), (1463, 6), (1474, 6), (1476, 6), (1480, 6), (1482, 6), (1484, 6), (1488, 6), (1494, 6), (1507, 6), (1525, 6), (1527, 6), (1531, 6), (1534, 6), (1538, 6), (1601, 6), (1602, 6), (1605, 6), (1607, 6), (1618, 6), (1640, 6), (1704, 6), (1708, 6), (1711, 6), (1715, 6), (1716, 6), (1742, 6), (1756, 6), (1772, 6), (1794, 6), (1797, 6), (1801, 6), (1802, 6), (1813, 6), (1828, 6), (1829, 6), (1830, 6), (1837, 6), (1838, 6), (1845, 6), (1860, 6), (1864, 6), (1874, 6), (1879, 6), (1906, 6), (1920, 6), (1931, 6), (1942, 6), (1963, 6), (1974, 6), (1976, 6), (1984, 6), (1986, 6), (1991, 6), (1992, 6), (1993, 6), (1994, 6), (1998, 6), (1999, 6), (2000, 6), (2001, 6), (2002, 6), (2005, 6), (2006, 6), (2011, 6), (2014, 6), (2021, 6), (2023, 6), (2024, 6), (2025, 6), (2027, 6), (2028, 6), (2030, 6), (2031, 6), (2032, 6), (2034, 6), (2035, 6), (2038, 6), (2040, 6), (2041, 6), (2048, 6), (2049, 6), (2050, 6), (2052, 6), (2064, 6), (2076, 6), (2078, 6), (2084, 6), (2089, 6), (2097, 6), (2099, 6), (2103, 6), (2106, 6), (2107, 6), (2108, 6), (2111, 6), (2121, 6), (2127, 6), (2130, 6), (2138, 6), (2149, 6), (2155, 6), (2168, 6), (2173, 6), (2198, 6), (2205, 6), (2221, 6), (2231, 6), (2234, 6), (2241, 6), (2273, 6), (2305, 6), (2315, 6), (2317, 6), (2320, 6), (2362, 6), (2365, 6), (2366, 6), (2381, 6), (2382, 6), (2383, 6), (2388, 6), (2392, 6), (2402, 6), (2404, 6), (2418, 6), (2424, 6), (2437, 6), (2446, 6), (2457, 6), (2460, 6), (2479, 6), (2500, 6), (2539, 6), (2550, 6), (2562, 6), (2591, 6), (2599, 6), (2609, 6), (2616, 6), (2617, 6), (2623, 6), (2631, 6), (2633, 6), (2636, 6), (2645, 6), (2655, 6), (2660, 6), (2661, 6), (2691, 6), (2709, 6), (2711, 6), (2719, 6), (2726, 6), (2734, 6), (2742, 6), (2747, 6), (2750, 6), (2751, 6), (2753, 6), (2798, 6), (2826, 6), (2828, 6), (2838, 6), (2841, 6), (2851, 6), (2856, 6), (2860, 6), (2866, 6), (2878, 6), (2905, 6), (2910, 6), (2937, 6), (2970, 6), (2982, 6), (2986, 6), (2992, 6), (2997, 6), (3002, 6), (3013, 6), (3022, 6), (3026, 6), (3037, 6), (3046, 6), (3050, 6), (3052, 6), (3077, 6), (3086, 6), (3093, 6), (3112, 6), (3128, 6), (3131, 6), (3144, 6), (3151, 6), (3152, 6), (3156, 6), (3166, 6), (3175, 6), (3188, 6), (3197, 6), (3213, 6), (3214, 6), (3221, 6), (3222, 6), (3232, 6), (3238, 6), (3243, 6), (3255, 6), (3259, 6), (3293, 6), (3301, 6), (3315, 6), (3316, 6), (3338, 6), (3351, 6), (3362, 6), (3379, 6), (3388, 6), (3400, 6), (3403, 6), (3406, 6), (3412, 6), (3414, 6), (3415, 6), (3420, 6), (3422, 6), (3423, 6), (3426, 6), (3430, 6), (3434, 6), (3437, 6), (3442, 6), (3444, 6), (3445, 6), (3446, 6), (3448, 6), (3449, 6), (3451, 6), (3452, 6), (3453, 6), (3455, 6), (3458, 6), (3459, 6), (3461, 6), (3463, 6), (3465, 6), (3471, 6), (3473, 6), (3474, 6), (3476, 6), (3480, 6), (3486, 6), (3489, 6), (3490, 6), (3491, 6), (3492, 6), (3493, 6), (3494, 6), (3495, 6), (3497, 6), (3500, 6), (3503, 6), (3506, 6), (3507, 6), (3511, 6), (3512, 6), (3513, 6), (3516, 6), (3517, 6), (3519, 6), (3522, 6), (3524, 6), (1, 5), (36, 5), (47, 5), (48, 5), (52, 5), (57, 5), (64, 5), (85, 5), (93, 5), (111, 5), (118, 5), (124, 5), (138, 5), (169, 5), (202, 5), (225, 5), (226, 5), (249, 5), (258, 5), (278, 5), (289, 5), (667, 5), (748, 5), (844, 5), (1013, 5), (1161, 5), (1166, 5), (1244, 5), (1415, 5), (1492, 5), (1537, 5), (1548, 5), (1805, 5), (1815, 5), (1883, 5), (1891, 5), (1899, 5), (1918, 5), (1923, 5), (1954, 5), (1979, 5), (2067, 5), (2141, 5), (2158, 5), (2229, 5), (2249, 5), (2338, 5), (2432, 5), (2585, 5), (2603, 5), (2619, 5), (2744, 5), (3378, 5), (3477, 5), (3478, 5)]


elif agt == 13: # DQN agent for taxi domain
    load_actions(dialog_config.taxi_sys_request_slots, dialog_config.taxi_sys_inform_slots)
    agent = AgentDQN(kb, act_set, slot_set, agent_params)
    agent.initialize_config(taxi_request_slots, taxi_inform_slots)

    goal_sort = [(0, 8), (1, 8), (3, 8), (6, 8), (8, 8), (15, 8), (17, 8), (20, 8), (23, 8), (24, 8), (27, 8), (29, 8), (34, 8), (36, 8), (37, 8), (38, 8), (39, 8), (41, 8), (42, 8), (44, 8), (45, 8), (46, 8), (47, 8), (51, 8), (55, 8), (56, 8), (57, 8), (58, 8), (62, 8), (67, 8), (69, 8), (78, 8), (79, 8), (83, 8), (86, 8), (91, 8), (93, 8), (95, 8), (97, 8), (99, 8), (100, 8), (101, 8), (105, 8), (106, 8), (109, 8), (113, 8), (120, 8), (123, 8), (125, 8), (127, 8), (128, 8), (129, 8), (130, 8), (131, 8), (133, 8), (135, 8), (141, 8), (143, 8), (145, 8), (146, 8), (150, 8), (152, 8), (155, 8), (156, 8), (159, 8), (160, 8), (164, 8), (166, 8), (170, 8), (171, 8), (174, 8), (177, 8), (179, 8), (180, 8), (182, 8), (183, 8), (186, 8), (188, 8), (190, 8), (191, 8), (192, 8), (203, 8), (204, 8), (210, 8), (214, 8), (221, 8), (222, 8), (223, 8), (225, 8), (229, 8), (231, 8), (237, 8), (238, 8), (240, 8), (244, 8), (268, 8), (270, 8), (271, 8), (275, 8), (277, 8), (283, 8), (287, 8), (294, 8), (313, 8), (316, 8), (317, 8), (321, 8), (322, 8), (329, 8), (330, 8), (331, 8), (340, 8), (343, 8), (349, 8), (351, 8), (356, 8), (363, 8), (373, 8), (385, 8), (386, 8), (388, 8), (390, 8), (394, 8), (396, 8), (397, 8), (399, 8), (402, 8), (404, 8), (421, 8), (428, 8), (430, 8), (440, 8), (442, 8), (444, 8), (446, 8), (448, 8), (459, 8), (464, 8), (478, 8), (479, 8), (480, 8), (482, 8), (487, 8), (492, 8), (503, 8), (505, 8), (509, 8), (510, 8), (513, 8), (528, 8), (533, 8), (535, 8), (540, 8), (545, 8), (553, 8), (554, 8), (561, 8), (564, 8), (565, 8), (570, 8), (571, 8), (575, 8), (576, 8), (585, 8), (588, 8), (602, 8), (607, 8), (611, 8), (612, 8), (617, 8), (629, 8), (630, 8), (633, 8), (636, 8), (637, 8), (643, 8), (646, 8), (648, 8), (652, 8), (659, 8), (663, 8), (664, 8), (666, 8), (669, 8), (670, 8), (677, 8), (682, 8), (686, 8), (688, 8), (692, 8), (693, 8), (694, 8), (697, 8), (700, 8), (701, 8), (702, 8), (712, 8), (714, 8), (717, 8), (720, 8), (725, 8), (731, 8), (738, 8), (739, 8), (740, 8), (743, 8), (744, 8), (747, 8), (748, 8), (756, 8), (757, 8), (770, 8), (786, 8), (788, 8), (803, 8), (818, 8), (828, 8), (830, 8), (832, 8), (843, 8), (846, 8), (856, 8), (871, 8), (875, 8), (877, 8), (879, 8), (880, 8), (881, 8), (882, 8), (883, 8), (884, 8), (885, 8), (886, 8), (888, 8), (889, 8), (890, 8), (891, 8), (892, 8), (893, 8), (894, 8), (895, 8), (896, 8), (897, 8), (898, 8), (899, 8), (900, 8), (901, 8), (904, 8), (905, 8), (906, 8), (907, 8), (908, 8), (909, 8), (910, 8), (911, 8), (912, 8), (913, 8), (915, 8), (916, 8), (917, 8), (918, 8), (919, 8), (920, 8), (922, 8), (930, 8), (933, 8), (947, 8), (951, 8), (952, 8), (953, 8), (955, 8), (965, 8), (971, 8), (991, 8), (1009, 8), (1010, 8), (1014, 8), (1020, 8), (1022, 8), (1027, 8), (1032, 8), (1033, 8), (1034, 8), (1035, 8), (1040, 8), (1041, 8), (1056, 8), (1064, 8), (1066, 8), (1075, 8), (1078, 8), (1089, 8), (1090, 8), (1094, 8), (1097, 8), (1099, 8), (1102, 8), (1103, 8), (1109, 8), (1111, 8), (1124, 8), (1137, 8), (1140, 8), (1144, 8), (1146, 8), (1147, 8), (1148, 8), (1149, 8), (1151, 8), (1155, 8), (1156, 8), (1158, 8), (1159, 8), (1160, 8), (1161, 8), (1162, 8), (1163, 8), (1165, 8), (1166, 8), (1167, 8), (1168, 8), (1169, 8), (1173, 8), (1178, 8), (1183, 8), (1185, 8), (1192, 8), (1194, 8), (1195, 8), (1196, 8), (1208, 8), (1210, 8), (1214, 8), (1219, 8), (1220, 8), (1222, 8), (1225, 8), (1232, 8), (1233, 8), (1234, 8), (1239, 8), (1240, 8), (1242, 8), (1244, 8), (1245, 8), (1258, 8), (1261, 8), (1265, 8), (1267, 8), (1268, 8), (1273, 8), (1274, 8), (1276, 8), (1279, 8), (1288, 8), (1296, 8), (1303, 8), (1304, 8), (1307, 8), (1310, 8), (1311, 8), (1317, 8), (1318, 8), (1322, 8), (1333, 8), (1335, 8), (1338, 8), (1340, 8), (1343, 8), (1348, 8), (1350, 8), (1352, 8), (1370, 8), (1375, 8), (1377, 8), (1382, 8), (1390, 8), (1394, 8), (1430, 8), (1448, 8), (1450, 8), (1452, 8), (1459, 8), (1460, 8), (1463, 8), (1464, 8), (1467, 8), (1470, 8), (1471, 8), (1478, 8), (1479, 8), (1480, 8), (1482, 8), (1484, 8), (1486, 8), (1487, 8), (1488, 8), (1490, 8), (1497, 8), (1498, 8), (1499, 8), (1503, 8), (1505, 8), (1506, 8), (1509, 8), (1510, 8), (1511, 8), (1512, 8), (1513, 8), (1514, 8), (1516, 8), (1517, 8), (1524, 8), (1526, 8), (1527, 8), (1530, 8), (1536, 8), (1542, 8), (1543, 8), (1544, 8), (1546, 8), (1547, 8), (1550, 8), (1554, 8), (1556, 8), (1557, 8), (1561, 8), (1565, 8), (1566, 8), (1568, 8), (1570, 8), (1573, 8), (1574, 8), (1575, 8), (1578, 8), (1579, 8), (1582, 8), (1583, 8), (1588, 8), (1589, 8), (1592, 8), (1593, 8), (1594, 8), (1595, 8), (1598, 8), (1599, 8), (1601, 8), (1602, 8), (1604, 8), (1606, 8), (1607, 8), (1614, 8), (1615, 8), (1617, 8), (1620, 8), (1621, 8), (1624, 8), (1625, 8), (1627, 8), (1630, 8), (1631, 8), (1633, 8), (1636, 8), (1642, 8), (1643, 8), (1644, 8), (1645, 8), (1646, 8), (1647, 8), (1648, 8), (1649, 8), (1651, 8), (1655, 8), (1665, 8), (1669, 8), (1670, 8), (1671, 8), (1674, 8), (1676, 8), (1677, 8), (1684, 8), (1688, 8), (1691, 8), (1693, 8), (1694, 8), (1697, 8), (1703, 8), (1706, 8), (1708, 8), (1713, 8), (1714, 8), (1715, 8), (1716, 8), (1720, 8), (1723, 8), (1725, 8), (1728, 8), (1735, 8), (1736, 8), (1737, 8), (1738, 8), (1742, 8), (1749, 8), (1751, 8), (1752, 8), (1753, 8), (1755, 8), (1763, 8), (1768, 8), (1771, 8), (1774, 8), (1777, 8), (1778, 8), (1782, 8), (1784, 8), (1786, 8), (1787, 8), (1789, 8), (1791, 8), (1792, 8), (1793, 8), (1794, 8), (1795, 8), (1797, 8), (1798, 8), (1799, 8), (1800, 8), (1802, 8), (1803, 8), (1808, 8), (1810, 8), (1814, 8), (1824, 8), (1825, 8), (1831, 8), (1835, 8), (1836, 8), (1838, 8), (1845, 8), (1848, 8), (1852, 8), (1854, 8), (1856, 8), (1857, 8), (1861, 8), (1867, 8), (1870, 8), (1873, 8), (1875, 8), (1879, 8), (1883, 8), (1885, 8), (1888, 8), (1892, 8), (1893, 8), (1895, 8), (1899, 8), (1900, 8), (1904, 8), (1909, 8), (1913, 8), (1918, 8), (1923, 8), (1928, 8), (1929, 8), (1930, 8), (1932, 8), (1934, 8), (1935, 8), (1946, 8), (1949, 8), (1950, 8), (1952, 8), (1958, 8), (1963, 8), (1967, 8), (2007, 8), (2018, 8), (2019, 8), (2021, 8), (2023, 8), (2025, 8), (2029, 8), (2031, 8), (2035, 8), (2036, 8), (2039, 8), (2043, 8), (2046, 8), (2055, 8), (2067, 8), (2069, 8), (2071, 8), (2073, 8), (2074, 8), (2076, 8), (2077, 8), (2080, 8), (2082, 8), (2090, 8), (2095, 8), (2097, 8), (2100, 8), (2101, 8), (2102, 8), (2104, 8), (2105, 8), (2109, 8), (2110, 8), (2111, 8), (2113, 8), (2114, 8), (2118, 8), (2119, 8), (2123, 8), (2141, 8), (2144, 8), (2150, 8), (2158, 8), (2161, 8), (2162, 8), (2163, 8), (2172, 8), (2175, 8), (2178, 8), (2180, 8), (2189, 8), (2191, 8), (2195, 8), (2198, 8), (2231, 8), (2233, 8), (2242, 8), (2266, 8), (2292, 8), (2298, 8), (2306, 8), (2312, 8), (2321, 8), (2325, 8), (2330, 8), (2331, 8), (2332, 8), (2333, 8), (2334, 8), (2341, 8), (2345, 8), (2348, 8), (2349, 8), (2350, 8), (2355, 8), (2368, 8), (2393, 8), (2398, 8), (2400, 8), (2401, 8), (2405, 8), (2406, 8), (2414, 8), (2423, 8), (2427, 8), (2434, 8), (2437, 8), (2443, 8), (2451, 8), (2467, 8), (2479, 8), (2480, 8), (2492, 8), (2493, 8), (2499, 8), (2509, 8), (2529, 8), (2533, 8), (2534, 8), (2535, 8), (2538, 8), (2541, 8), (2542, 8), (2551, 8), (2571, 8), (2576, 8), (2577, 8), (2579, 8), (2598, 8), (2603, 8), (2612, 8), (2614, 8), (2615, 8), (2629, 8), (2639, 8), (2654, 8), (2655, 8), (2666, 8), (2667, 8), (2677, 8), (2679, 8), (2694, 8), (2712, 8), (2716, 8), (2717, 8), (2718, 8), (2721, 8), (2725, 8), (2733, 8), (2757, 8), (2759, 8), (2778, 8), (2784, 8), (2785, 8), (2794, 8), (2797, 8), (2812, 8), (2820, 8), (2825, 8), (2829, 8), (4, 9), (7, 9), (10, 9), (11, 9), (13, 9), (18, 9), (19, 9), (21, 9), (22, 9), (25, 9), (26, 9), (30, 9), (31, 9), (32, 9), (35, 9), (40, 9), (43, 9), (48, 9), (49, 9), (52, 9), (61, 9), (63, 9), (64, 9), (65, 9), (66, 9), (68, 9), (70, 9), (71, 9), (73, 9), (74, 9), (75, 9), (82, 9), (84, 9), (85, 9), (87, 9), (92, 9), (94, 9), (102, 9), (108, 9), (110, 9), (116, 9), (117, 9), (118, 9), (124, 9), (126, 9), (132, 9), (136, 9), (137, 9), (138, 9), (140, 9), (142, 9), (144, 9), (147, 9), (149, 9), (151, 9), (153, 9), (157, 9), (158, 9), (165, 9), (167, 9), (168, 9), (172, 9), (176, 9), (181, 9), (185, 9), (194, 9), (195, 9), (196, 9), (197, 9), (199, 9), (200, 9), (201, 9), (206, 9), (207, 9), (211, 9), (213, 9), (217, 9), (218, 9), (219, 9), (220, 9), (226, 9), (227, 9), (230, 9), (232, 9), (233, 9), (235, 9), (236, 9), (239, 9), (241, 9), (243, 9), (249, 9), (252, 9), (274, 9), (280, 9), (282, 9), (284, 9), (290, 9), (291, 9), (292, 9), (293, 9), (295, 9), (296, 9), (297, 9), (299, 9), (301, 9), (302, 9), (303, 9), (306, 9), (307, 9), (309, 9), (310, 9), (311, 9), (314, 9), (318, 9), (319, 9), (320, 9), (324, 9), (325, 9), (326, 9), (327, 9), (328, 9), (335, 9), (336, 9), (337, 9), (344, 9), (345, 9), (346, 9), (350, 9), (357, 9), (358, 9), (364, 9), (374, 9), (376, 9), (377, 9), (379, 9), (380, 9), (381, 9), (382, 9), (383, 9), (389, 9), (392, 9), (395, 9), (398, 9), (400, 9), (405, 9), (409, 9), (410, 9), (414, 9), (415, 9), (418, 9), (419, 9), (420, 9), (424, 9), (425, 9), (429, 9), (433, 9), (434, 9), (436, 9), (437, 9), (439, 9), (443, 9), (447, 9), (449, 9), (450, 9), (452, 9), (454, 9), (455, 9), (456, 9), (457, 9), (458, 9), (460, 9), (466, 9), (468, 9), (472, 9), (473, 9), (489, 9), (498, 9), (502, 9), (506, 9), (507, 9), (511, 9), (512, 9), (514, 9), (516, 9), (519, 9), (520, 9), (530, 9), (532, 9), (538, 9), (542, 9), (543, 9), (551, 9), (560, 9), (572, 9), (578, 9), (581, 9), (584, 9), (586, 9), (592, 9), (598, 9), (599, 9), (601, 9), (604, 9), (605, 9), (619, 9), (621, 9), (623, 9), (628, 9), (631, 9), (642, 9), (650, 9), (653, 9), (662, 9), (668, 9), (672, 9), (676, 9), (679, 9), (680, 9), (687, 9), (690, 9), (695, 9), (696, 9), (698, 9), (699, 9), (709, 9), (710, 9), (711, 9), (713, 9), (716, 9), (719, 9), (721, 9), (727, 9), (729, 9), (733, 9), (734, 9), (735, 9), (742, 9), (746, 9), (749, 9), (751, 9), (755, 9), (759, 9), (761, 9), (762, 9), (769, 9), (771, 9), (773, 9), (774, 9), (775, 9), (776, 9), (778, 9), (781, 9), (783, 9), (789, 9), (790, 9), (792, 9), (793, 9), (797, 9), (801, 9), (804, 9), (806, 9), (807, 9), (809, 9), (816, 9), (819, 9), (820, 9), (822, 9), (823, 9), (826, 9), (827, 9), (833, 9), (834, 9), (835, 9), (836, 9), (839, 9), (840, 9), (842, 9), (847, 9), (848, 9), (849, 9), (853, 9), (854, 9), (859, 9), (860, 9), (861, 9), (863, 9), (868, 9), (870, 9), (873, 9), (874, 9), (878, 9), (887, 9), (902, 9), (903, 9), (914, 9), (923, 9), (925, 9), (928, 9), (929, 9), (932, 9), (934, 9), (935, 9), (937, 9), (938, 9), (942, 9), (943, 9), (944, 9), (946, 9), (956, 9), (958, 9), (959, 9), (960, 9), (961, 9), (962, 9), (964, 9), (966, 9), (968, 9), (969, 9), (970, 9), (972, 9), (973, 9), (974, 9), (975, 9), (976, 9), (977, 9), (980, 9), (981, 9), (982, 9), (983, 9), (984, 9), (985, 9), (986, 9), (988, 9), (990, 9), (992, 9), (993, 9), (995, 9), (997, 9), (998, 9), (1006, 9), (1007, 9), (1008, 9), (1012, 9), (1013, 9), (1017, 9), (1018, 9), (1021, 9), (1025, 9), (1026, 9), (1028, 9), (1029, 9), (1030, 9), (1031, 9), (1036, 9), (1038, 9), (1043, 9), (1044, 9), (1046, 9), (1047, 9), (1049, 9), (1050, 9), (1051, 9), (1052, 9), (1053, 9), (1054, 9), (1055, 9), (1061, 9), (1065, 9), (1067, 9), (1068, 9), (1069, 9), (1071, 9), (1072, 9), (1073, 9), (1074, 9), (1076, 9), (1077, 9), (1079, 9), (1080, 9), (1081, 9), (1083, 9), (1084, 9), (1085, 9), (1086, 9), (1088, 9), (1091, 9), (1092, 9), (1093, 9), (1095, 9), (1101, 9), (1104, 9), (1105, 9), (1106, 9), (1107, 9), (1108, 9), (1110, 9), (1112, 9), (1113, 9), (1114, 9), (1117, 9), (1118, 9), (1125, 9), (1126, 9), (1127, 9), (1128, 9), (1130, 9), (1131, 9), (1132, 9), (1138, 9), (1141, 9), (1142, 9), (1150, 9), (1152, 9), (1154, 9), (1157, 9), (1164, 9), (1170, 9), (1171, 9), (1172, 9), (1174, 9), (1175, 9), (1176, 9), (1177, 9), (1180, 9), (1182, 9), (1184, 9), (1186, 9), (1187, 9), (1188, 9), (1189, 9), (1190, 9), (1191, 9), (1193, 9), (1198, 9), (1199, 9), (1200, 9), (1201, 9), (1203, 9), (1204, 9), (1205, 9), (1206, 9), (1207, 9), (1209, 9), (1211, 9), (1212, 9), (1215, 9), (1216, 9), (1218, 9), (1221, 9), (1226, 9), (1227, 9), (1231, 9), (1235, 9), (1237, 9), (1238, 9), (1255, 9), (1262, 9), (1270, 9), (1271, 9), (1275, 9), (1277, 9), (1278, 9), (1280, 9), (1282, 9), (1283, 9), (1285, 9), (1286, 9), (1287, 9), (1289, 9), (1290, 9), (1291, 9), (1292, 9), (1298, 9), (1299, 9), (1301, 9), (1305, 9), (1306, 9), (1308, 9), (1309, 9), (1312, 9), (1313, 9), (1315, 9), (1316, 9), (1319, 9), (1323, 9), (1326, 9), (1327, 9), (1328, 9), (1329, 9), (1331, 9), (1332, 9), (1334, 9), (1336, 9), (1337, 9), (1339, 9), (1342, 9), (1346, 9), (1347, 9), (1349, 9), (1351, 9), (1353, 9), (1361, 9), (1364, 9), (1365, 9), (1366, 9), (1369, 9), (1371, 9), (1373, 9), (1374, 9), (1383, 9), (1384, 9), (1385, 9), (1387, 9), (1388, 9), (1389, 9), (1391, 9), (1392, 9), (1395, 9), (1398, 9), (1401, 9), (1402, 9), (1404, 9), (1405, 9), (1406, 9), (1407, 9), (1408, 9), (1409, 9), (1410, 9), (1411, 9), (1412, 9), (1413, 9), (1414, 9), (1415, 9), (1416, 9), (1417, 9), (1418, 9), (1420, 9), (1421, 9), (1422, 9), (1423, 9), (1425, 9), (1427, 9), (1428, 9), (1429, 9), (1433, 9), (1434, 9), (1437, 9), (1438, 9), (1439, 9), (1440, 9), (1441, 9), (1442, 9), (1443, 9), (1444, 9), (1445, 9), (1447, 9), (1454, 9), (1457, 9), (1458, 9), (1461, 9), (1465, 9), (1466, 9), (1469, 9), (1473, 9), (1475, 9), (1476, 9), (1477, 9), (1481, 9), (1485, 9), (1489, 9), (1491, 9), (1492, 9), (1493, 9), (1494, 9), (1495, 9), (1496, 9), (1500, 9), (1501, 9), (1502, 9), (1507, 9), (1508, 9), (1518, 9), (1519, 9), (1521, 9), (1522, 9), (1525, 9), (1528, 9), (1529, 9), (1531, 9), (1532, 9), (1533, 9), (1538, 9), (1539, 9), (1540, 9), (1541, 9), (1548, 9), (1551, 9), (1558, 9), (1567, 9), (1569, 9), (1576, 9), (1580, 9), (1584, 9), (1587, 9), (1596, 9), (1597, 9), (1600, 9), (1608, 9), (1610, 9), (1611, 9), (1612, 9), (1613, 9), (1616, 9), (1618, 9), (1619, 9), (1622, 9), (1623, 9), (1634, 9), (1635, 9), (1637, 9), (1638, 9), (1639, 9), (1641, 9), (1650, 9), (1653, 9), (1654, 9), (1656, 9), (1659, 9), (1660, 9), (1663, 9), (1664, 9), (1667, 9), (1672, 9), (1673, 9), (1675, 9), (1679, 9), (1682, 9), (1685, 9), (1686, 9), (1690, 9), (1692, 9), (1695, 9), (1699, 9), (1700, 9), (1701, 9), (1710, 9), (1711, 9), (1712, 9), (1717, 9), (1719, 9), (1721, 9), (1722, 9), (1724, 9), (1726, 9), (1727, 9), (1730, 9), (1731, 9), (1733, 9), (1734, 9), (1739, 9), (1740, 9), (1744, 9), (1745, 9), (1746, 9), (1747, 9), (1750, 9), (1756, 9), (1757, 9), (1758, 9), (1759, 9), (1760, 9), (1761, 9), (1764, 9), (1781, 9), (1783, 9), (1785, 9), (1796, 9), (1805, 9), (1813, 9), (1815, 9), (1816, 9), (1817, 9), (1818, 9), (1819, 9), (1821, 9), (1822, 9), (1823, 9), (1827, 9), (1828, 9), (1830, 9), (1833, 9), (1834, 9), (1839, 9), (1840, 9), (1841, 9), (1842, 9), (1844, 9), (1846, 9), (1847, 9), (1849, 9), (1851, 9), (1855, 9), (1858, 9), (1859, 9), (1863, 9), (1865, 9), (1866, 9), (1874, 9), (1876, 9), (1881, 9), (1886, 9), (1897, 9), (1898, 9), (1902, 9), (1905, 9), (1906, 9), (1908, 9), (1911, 9), (1912, 9), (1915, 9), (1916, 9), (1925, 9), (1927, 9), (1931, 9), (1933, 9), (1939, 9), (1944, 9), (1945, 9), (1948, 9), (1951, 9), (1954, 9), (1955, 9), (1957, 9), (1959, 9), (1962, 9), (1970, 9), (1971, 9), (1974, 9), (1976, 9), (1980, 9), (1981, 9), (1982, 9), (1985, 9), (1990, 9), (1991, 9), (1994, 9), (1995, 9), (1996, 9), (1997, 9), (1999, 9), (2001, 9), (2002, 9), (2005, 9), (2006, 9), (2008, 9), (2009, 9), (2011, 9), (2012, 9), (2013, 9), (2014, 9), (2015, 9), (2016, 9), (2024, 9), (2027, 9), (2030, 9), (2034, 9), (2037, 9), (2045, 9), (2048, 9), (2049, 9), (2050, 9), (2051, 9), (2052, 9), (2054, 9), (2056, 9), (2057, 9), (2061, 9), (2068, 9), (2078, 9), (2081, 9), (2083, 9), (2084, 9), (2086, 9), (2088, 9), (2091, 9), (2094, 9), (2106, 9), (2107, 9), (2124, 9), (2125, 9), (2127, 9), (2129, 9), (2131, 9), (2132, 9), (2133, 9), (2135, 9), (2153, 9), (2155, 9), (2156, 9), (2159, 9), (2160, 9), (2164, 9), (2165, 9), (2167, 9), (2168, 9), (2169, 9), (2170, 9), (2171, 9), (2173, 9), (2176, 9), (2181, 9), (2182, 9), (2184, 9), (2185, 9), (2186, 9), (2190, 9), (2194, 9), (2196, 9), (2202, 9), (2204, 9), (2205, 9), (2207, 9), (2221, 9), (2223, 9), (2224, 9), (2227, 9), (2228, 9), (2229, 9), (2230, 9), (2235, 9), (2237, 9), (2244, 9), (2246, 9), (2250, 9), (2251, 9), (2253, 9), (2255, 9), (2256, 9), (2262, 9), (2263, 9), (2268, 9), (2270, 9), (2271, 9), (2272, 9), (2273, 9), (2274, 9), (2275, 9), (2276, 9), (2277, 9), (2278, 9), (2279, 9), (2280, 9), (2281, 9), (2283, 9), (2284, 9), (2287, 9), (2289, 9), (2290, 9), (2291, 9), (2293, 9), (2294, 9), (2295, 9), (2296, 9), (2297, 9), (2299, 9), (2300, 9), (2301, 9), (2302, 9), (2303, 9), (2304, 9), (2314, 9), (2317, 9), (2319, 9), (2320, 9), (2327, 9), (2329, 9), (2335, 9), (2338, 9), (2343, 9), (2344, 9), (2347, 9), (2352, 9), (2354, 9), (2357, 9), (2359, 9), (2364, 9), (2365, 9), (2367, 9), (2372, 9), (2378, 9), (2382, 9), (2383, 9), (2384, 9), (2385, 9), (2386, 9), (2387, 9), (2388, 9), (2389, 9), (2390, 9), (2391, 9), (2392, 9), (2394, 9), (2409, 9), (2410, 9), (2412, 9), (2416, 9), (2420, 9), (2431, 9), (2438, 9), (2439, 9), (2444, 9), (2448, 9), (2455, 9), (2458, 9), (2460, 9), (2462, 9), (2466, 9), (2472, 9), (2474, 9), (2476, 9), (2477, 9), (2481, 9), (2483, 9), (2484, 9), (2486, 9), (2487, 9), (2488, 9), (2489, 9), (2490, 9), (2491, 9), (2495, 9), (2497, 9), (2498, 9), (2503, 9), (2508, 9), (2511, 9), (2513, 9), (2514, 9), (2515, 9), (2516, 9), (2517, 9), (2518, 9), (2521, 9), (2527, 9), (2528, 9), (2532, 9), (2536, 9), (2537, 9), (2543, 9), (2544, 9), (2546, 9), (2547, 9), (2549, 9), (2552, 9), (2553, 9), (2554, 9), (2556, 9), (2557, 9), (2559, 9), (2560, 9), (2562, 9), (2563, 9), (2564, 9), (2565, 9), (2570, 9), (2572, 9), (2573, 9), (2574, 9), (2580, 9), (2582, 9), (2584, 9), (2589, 9), (2590, 9), (2592, 9), (2593, 9), (2594, 9), (2596, 9), (2597, 9), (2606, 9), (2607, 9), (2610, 9), (2619, 9), (2621, 9), (2623, 9), (2627, 9), (2628, 9), (2630, 9), (2631, 9), (2632, 9), (2633, 9), (2634, 9), (2636, 9), (2640, 9), (2643, 9), (2646, 9), (2648, 9), (2650, 9), (2660, 9), (2663, 9), (2664, 9), (2670, 9), (2673, 9), (2674, 9), (2675, 9), (2676, 9), (2678, 9), (2681, 9), (2683, 9), (2684, 9), (2688, 9), (2696, 9), (2698, 9), (2699, 9), (2700, 9), (2701, 9), (2702, 9), (2703, 9), (2706, 9), (2710, 9), (2711, 9), (2715, 9), (2719, 9), (2720, 9), (2722, 9), (2727, 9), (2729, 9), (2730, 9), (2738, 9), (2745, 9), (2750, 9), (2751, 9), (2756, 9), (2762, 9), (2766, 9), (2770, 9), (2774, 9), (2776, 9), (2777, 9), (2779, 9), (2788, 9), (2789, 9), (2792, 9), (2796, 9), (2801, 9), (2803, 9), (2805, 9), (2808, 9), (2810, 9), (2811, 9), (2813, 9), (2815, 9), (2816, 9), (2818, 9), (2819, 9), (2823, 9), (2827, 9), (2, 10), (5, 10), (12, 10), (16, 10), (28, 10), (54, 10), (60, 10), (72, 10), (76, 10), (80, 10), (88, 10), (89, 10), (90, 10), (96, 10), (98, 10), (107, 10), (111, 10), (112, 10), (115, 10), (119, 10), (121, 10), (122, 10), (148, 10), (154, 10), (161, 10), (162, 10), (169, 10), (173, 10), (178, 10), (187, 10), (189, 10), (193, 10), (198, 10), (202, 10), (208, 10), (212, 10), (224, 10), (242, 10), (246, 10), (250, 10), (265, 10), (266, 10), (269, 10), (272, 10), (279, 10), (281, 10), (285, 10), (286, 10), (288, 10), (289, 10), (298, 10), (300, 10), (304, 10), (305, 10), (308, 10), (312, 10), (315, 10), (323, 10), (332, 10), (334, 10), (341, 10), (342, 10), (348, 10), (353, 10), (355, 10), (359, 10), (360, 10), (362, 10), (365, 10), (368, 10), (370, 10), (371, 10), (387, 10), (391, 10), (401, 10), (406, 10), (407, 10), (408, 10), (411, 10), (413, 10), (416, 10), (417, 10), (422, 10), (427, 10), (453, 10), (461, 10), (462, 10), (463, 10), (467, 10), (469, 10), (470, 10), (471, 10), (474, 10), (476, 10), (483, 10), (485, 10), (486, 10), (488, 10), (490, 10), (491, 10), (494, 10), (496, 10), (497, 10), (499, 10), (500, 10), (515, 10), (517, 10), (518, 10), (521, 10), (522, 10), (524, 10), (526, 10), (529, 10), (531, 10), (536, 10), (539, 10), (541, 10), (546, 10), (555, 10), (556, 10), (557, 10), (558, 10), (559, 10), (563, 10), (569, 10), (573, 10), (574, 10), (579, 10), (582, 10), (583, 10), (587, 10), (589, 10), (590, 10), (591, 10), (593, 10), (597, 10), (600, 10), (606, 10), (609, 10), (610, 10), (613, 10), (620, 10), (622, 10), (624, 10), (625, 10), (626, 10), (627, 10), (632, 10), (634, 10), (635, 10), (638, 10), (639, 10), (640, 10), (641, 10), (644, 10), (645, 10), (647, 10), (649, 10), (651, 10), (654, 10), (655, 10), (656, 10), (657, 10), (658, 10), (660, 10), (661, 10), (667, 10), (674, 10), (675, 10), (691, 10), (703, 10), (704, 10), (705, 10), (708, 10), (715, 10), (723, 10), (724, 10), (726, 10), (728, 10), (730, 10), (732, 10), (736, 10), (741, 10), (745, 10), (750, 10), (752, 10), (753, 10), (758, 10), (763, 10), (764, 10), (765, 10), (766, 10), (772, 10), (777, 10), (779, 10), (780, 10), (782, 10), (784, 10), (785, 10), (787, 10), (791, 10), (795, 10), (796, 10), (800, 10), (802, 10), (805, 10), (808, 10), (810, 10), (811, 10), (812, 10), (813, 10), (814, 10), (817, 10), (821, 10), (824, 10), (825, 10), (829, 10), (831, 10), (837, 10), (838, 10), (841, 10), (845, 10), (855, 10), (857, 10), (858, 10), (862, 10), (864, 10), (865, 10), (866, 10), (869, 10), (872, 10), (924, 10), (927, 10), (941, 10), (945, 10), (949, 10), (954, 10), (957, 10), (978, 10), (979, 10), (994, 10), (999, 10), (1000, 10), (1001, 10), (1002, 10), (1003, 10), (1004, 10), (1005, 10), (1011, 10), (1015, 10), (1016, 10), (1023, 10), (1024, 10), (1037, 10), (1039, 10), (1042, 10), (1048, 10), (1057, 10), (1059, 10), (1062, 10), (1063, 10), (1082, 10), (1087, 10), (1100, 10), (1115, 10), (1121, 10), (1122, 10), (1123, 10), (1129, 10), (1135, 10), (1143, 10), (1145, 10), (1179, 10), (1181, 10), (1202, 10), (1213, 10), (1217, 10), (1223, 10), (1224, 10), (1228, 10), (1229, 10), (1230, 10), (1236, 10), (1241, 10), (1246, 10), (1248, 10), (1249, 10), (1251, 10), (1257, 10), (1263, 10), (1272, 10), (1281, 10), (1284, 10), (1293, 10), (1297, 10), (1300, 10), (1302, 10), (1314, 10), (1321, 10), (1325, 10), (1330, 10), (1341, 10), (1345, 10), (1354, 10), (1358, 10), (1367, 10), (1368, 10), (1376, 10), (1378, 10), (1379, 10), (1380, 10), (1381, 10), (1393, 10), (1397, 10), (1399, 10), (1400, 10), (1419, 10), (1424, 10), (1426, 10), (1431, 10), (1432, 10), (1435, 10), (1436, 10), (1446, 10), (1449, 10), (1451, 10), (1453, 10), (1455, 10), (1462, 10), (1468, 10), (1472, 10), (1474, 10), (1504, 10), (1515, 10), (1520, 10), (1523, 10), (1534, 10), (1535, 10), (1537, 10), (1549, 10), (1552, 10), (1553, 10), (1555, 10), (1559, 10), (1560, 10), (1562, 10), (1563, 10), (1571, 10), (1572, 10), (1577, 10), (1581, 10), (1585, 10), (1586, 10), (1590, 10), (1591, 10), (1605, 10), (1609, 10), (1626, 10), (1628, 10), (1629, 10), (1632, 10), (1640, 10), (1652, 10), (1658, 10), (1662, 10), (1668, 10), (1678, 10), (1683, 10), (1687, 10), (1689, 10), (1696, 10), (1702, 10), (1704, 10), (1705, 10), (1707, 10), (1718, 10), (1732, 10), (1741, 10), (1743, 10), (1748, 10), (1754, 10), (1762, 10), (1765, 10), (1766, 10), (1767, 10), (1769, 10), (1770, 10), (1772, 10), (1773, 10), (1775, 10), (1779, 10), (1780, 10), (1788, 10), (1790, 10), (1801, 10), (1804, 10), (1806, 10), (1809, 10), (1812, 10), (1820, 10), (1826, 10), (1829, 10), (1832, 10), (1837, 10), (1843, 10), (1850, 10), (1853, 10), (1860, 10), (1862, 10), (1864, 10), (1868, 10), (1878, 10), (1884, 10), (1891, 10), (1896, 10), (1901, 10), (1903, 10), (1910, 10), (1919, 10), (1921, 10), (1922, 10), (1924, 10), (1938, 10), (1940, 10), (1941, 10), (1942, 10), (1947, 10), (1953, 10), (1956, 10), (1960, 10), (1961, 10), (1964, 10), (1968, 10), (1969, 10), (1972, 10), (1973, 10), (1977, 10), (1978, 10), (1984, 10), (1986, 10), (1987, 10), (1988, 10), (1989, 10), (1992, 10), (1993, 10), (2000, 10), (2004, 10), (2020, 10), (2022, 10), (2026, 10), (2028, 10), (2033, 10), (2038, 10), (2040, 10), (2041, 10), (2042, 10), (2044, 10), (2047, 10), (2053, 10), (2059, 10), (2063, 10), (2065, 10), (2070, 10), (2075, 10), (2079, 10), (2085, 10), (2089, 10), (2092, 10), (2093, 10), (2096, 10), (2098, 10), (2103, 10), (2108, 10), (2112, 10), (2115, 10), (2116, 10), (2117, 10), (2120, 10), (2126, 10), (2130, 10), (2145, 10), (2146, 10), (2147, 10), (2148, 10), (2149, 10), (2151, 10), (2174, 10), (2188, 10), (2192, 10), (2193, 10), (2197, 10), (2199, 10), (2200, 10), (2201, 10), (2206, 10), (2208, 10), (2210, 10), (2211, 10), (2213, 10), (2215, 10), (2216, 10), (2217, 10), (2218, 10), (2219, 10), (2220, 10), (2222, 10), (2225, 10), (2226, 10), (2232, 10), (2234, 10), (2236, 10), (2240, 10), (2241, 10), (2243, 10), (2245, 10), (2248, 10), (2249, 10), (2252, 10), (2254, 10), (2257, 10), (2258, 10), (2259, 10), (2261, 10), (2264, 10), (2267, 10), (2269, 10), (2282, 10), (2285, 10), (2286, 10), (2288, 10), (2305, 10), (2307, 10), (2308, 10), (2309, 10), (2310, 10), (2311, 10), (2315, 10), (2316, 10), (2318, 10), (2322, 10), (2324, 10), (2328, 10), (2336, 10), (2342, 10), (2351, 10), (2353, 10), (2358, 10), (2361, 10), (2362, 10), (2363, 10), (2369, 10), (2371, 10), (2374, 10), (2376, 10), (2377, 10), (2380, 10), (2381, 10), (2396, 10), (2399, 10), (2402, 10), (2403, 10), (2404, 10), (2407, 10), (2408, 10), (2411, 10), (2413, 10), (2415, 10), (2417, 10), (2419, 10), (2421, 10), (2422, 10), (2424, 10), (2429, 10), (2430, 10), (2432, 10), (2433, 10), (2435, 10), (2436, 10), (2440, 10), (2441, 10), (2442, 10), (2445, 10), (2446, 10), (2447, 10), (2449, 10), (2450, 10), (2452, 10), (2461, 10), (2463, 10), (2464, 10), (2468, 10), (2473, 10), (2478, 10), (2482, 10), (2485, 10), (2494, 10), (2500, 10), (2501, 10), (2504, 10), (2505, 10), (2506, 10), (2507, 10), (2510, 10), (2512, 10), (2520, 10), (2522, 10), (2523, 10), (2539, 10), (2545, 10), (2548, 10), (2550, 10), (2558, 10), (2578, 10), (2587, 10), (2588, 10), (2591, 10), (2595, 10), (2599, 10), (2604, 10), (2608, 10), (2609, 10), (2611, 10), (2613, 10), (2617, 10), (2618, 10), (2620, 10), (2635, 10), (2637, 10), (2638, 10), (2647, 10), (2649, 10), (2652, 10), (2656, 10), (2657, 10), (2661, 10), (2665, 10), (2669, 10), (2671, 10), (2672, 10), (2680, 10), (2682, 10), (2685, 10), (2689, 10), (2691, 10), (2692, 10), (2693, 10), (2697, 10), (2704, 10), (2705, 10), (2707, 10), (2708, 10), (2713, 10), (2724, 10), (2726, 10), (2728, 10), (2731, 10), (2732, 10), (2734, 10), (2735, 10), (2736, 10), (2739, 10), (2740, 10), (2741, 10), (2742, 10), (2744, 10), (2746, 10), (2747, 10), (2749, 10), (2752, 10), (2753, 10), (2754, 10), (2758, 10), (2760, 10), (2764, 10), (2765, 10), (2767, 10), (2768, 10), (2769, 10), (2772, 10), (2773, 10), (2795, 10), (2799, 10), (2800, 10), (2802, 10), (2821, 10), (2822, 10), (2824, 10), (2826, 10), (2828, 10), (9, 11), (14, 11), (33, 11), (59, 11), (77, 11), (81, 11), (103, 11), (104, 11), (114, 11), (134, 11), (163, 11), (175, 11), (184, 11), (205, 11), (209, 11), (215, 11), (216, 11), (228, 11), (234, 11), (245, 11), (247, 11), (248, 11), (251, 11), (253, 11), (254, 11), (255, 11), (256, 11), (257, 11), (258, 11), (259, 11), (260, 11), (261, 11), (262, 11), (263, 11), (264, 11), (267, 11), (273, 11), (276, 11), (278, 11), (333, 11), (339, 11), (352, 11), (354, 11), (361, 11), (366, 11), (367, 11), (369, 11), (372, 11), (375, 11), (378, 11), (384, 11), (393, 11), (403, 11), (412, 11), (423, 11), (426, 11), (431, 11), (432, 11), (435, 11), (445, 11), (451, 11), (465, 11), (475, 11), (481, 11), (484, 11), (493, 11), (495, 11), (501, 11), (504, 11), (508, 11), (523, 11), (525, 11), (527, 11), (537, 11), (544, 11), (547, 11), (548, 11), (549, 11), (550, 11), (552, 11), (562, 11), (566, 11), (567, 11), (577, 11), (580, 11), (594, 11), (595, 11), (596, 11), (603, 11), (608, 11), (614, 11), (615, 11), (616, 11), (618, 11), (665, 11), (671, 11), (678, 11), (683, 11), (684, 11), (685, 11), (689, 11), (706, 11), (707, 11), (718, 11), (722, 11), (754, 11), (767, 11), (794, 11), (798, 11), (799, 11), (844, 11), (850, 11), (851, 11), (852, 11), (867, 11), (876, 11), (921, 11), (926, 11), (931, 11), (936, 11), (939, 11), (940, 11), (948, 11), (950, 11), (963, 11), (967, 11), (987, 11), (989, 11), (996, 11), (1019, 11), (1045, 11), (1058, 11), (1060, 11), (1070, 11), (1096, 11), (1098, 11), (1116, 11), (1119, 11), (1133, 11), (1134, 11), (1136, 11), (1139, 11), (1153, 11), (1197, 11), (1247, 11), (1250, 11), (1252, 11), (1253, 11), (1254, 11), (1256, 11), (1259, 11), (1260, 11), (1264, 11), (1266, 11), (1269, 11), (1295, 11), (1320, 11), (1324, 11), (1344, 11), (1355, 11), (1356, 11), (1357, 11), (1359, 11), (1360, 11), (1363, 11), (1372, 11), (1386, 11), (1396, 11), (1403, 11), (1456, 11), (1483, 11), (1545, 11), (1564, 11), (1603, 11), (1657, 11), (1661, 11), (1666, 11), (1680, 11), (1681, 11), (1698, 11), (1709, 11), (1729, 11), (1776, 11), (1807, 11), (1811, 11), (1869, 11), (1871, 11), (1872, 11), (1877, 11), (1880, 11), (1882, 11), (1887, 11), (1889, 11), (1890, 11), (1894, 11), (1907, 11), (1914, 11), (1917, 11), (1920, 11), (1936, 11), (1937, 11), (1965, 11), (1979, 11), (1983, 11), (1998, 11), (2058, 11), (2062, 11), (2064, 11), (2066, 11), (2072, 11), (2087, 11), (2099, 11), (2121, 11), (2122, 11), (2128, 11), (2134, 11), (2136, 11), (2139, 11), (2140, 11), (2142, 11), (2152, 11), (2154, 11), (2166, 11), (2179, 11), (2183, 11), (2203, 11), (2212, 11), (2214, 11), (2238, 11), (2247, 11), (2260, 11), (2313, 11), (2323, 11), (2326, 11), (2337, 11), (2339, 11), (2340, 11), (2346, 11), (2360, 11), (2366, 11), (2370, 11), (2373, 11), (2375, 11), (2379, 11), (2395, 11), (2397, 11), (2418, 11), (2425, 11), (2426, 11), (2428, 11), (2453, 11), (2454, 11), (2456, 11), (2457, 11), (2459, 11), (2465, 11), (2469, 11), (2470, 11), (2475, 11), (2496, 11), (2502, 11), (2519, 11), (2524, 11), (2525, 11), (2526, 11), (2530, 11), (2531, 11), (2540, 11), (2555, 11), (2561, 11), (2566, 11), (2567, 11), (2568, 11), (2569, 11), (2581, 11), (2583, 11), (2585, 11), (2586, 11), (2600, 11), (2601, 11), (2602, 11), (2605, 11), (2616, 11), (2622, 11), (2624, 11), (2625, 11), (2626, 11), (2641, 11), (2642, 11), (2644, 11), (2645, 11), (2651, 11), (2653, 11), (2658, 11), (2662, 11), (2668, 11), (2686, 11), (2687, 11), (2690, 11), (2695, 11), (2709, 11), (2714, 11), (2723, 11), (2737, 11), (2743, 11), (2748, 11), (2755, 11), (2763, 11), (2771, 11), (2775, 11), (2780, 11), (2781, 11), (2782, 11), (2786, 11), (2787, 11), (2790, 11), (2791, 11), (2793, 11), (2804, 11), (2806, 11), (2807, 11), (2809, 11), (2814, 11), (2817, 11), (50, 12), (53, 12), (139, 12), (338, 12), (347, 12), (438, 12), (441, 12), (477, 12), (534, 12), (568, 12), (673, 12), (681, 12), (737, 12), (760, 12), (768, 12), (815, 12), (1243, 12), (1294, 12), (1362, 12), (1926, 12), (1943, 12), (1966, 12), (1975, 12), (2003, 12), (2010, 12), (2017, 12), (2032, 12), (2060, 12), (2137, 12), (2138, 12), (2143, 12), (2157, 12), (2177, 12), (2187, 12), (2209, 12), (2239, 12), (2265, 12), (2356, 12), (2471, 12), (2575, 12), (2659, 12), (2761, 12), (2783, 12), (2798, 12), (1120, 13)]
    goal_sort_reverse = [(1120, 13), (50, 12), (53, 12), (139, 12), (338, 12), (347, 12), (438, 12), (441, 12), (477, 12), (534, 12), (568, 12), (673, 12), (681, 12), (737, 12), (760, 12), (768, 12), (815, 12), (1243, 12), (1294, 12), (1362, 12), (1926, 12), (1943, 12), (1966, 12), (1975, 12), (2003, 12), (2010, 12), (2017, 12), (2032, 12), (2060, 12), (2137, 12), (2138, 12), (2143, 12), (2157, 12), (2177, 12), (2187, 12), (2209, 12), (2239, 12), (2265, 12), (2356, 12), (2471, 12), (2575, 12), (2659, 12), (2761, 12), (2783, 12), (2798, 12), (9, 11), (14, 11), (33, 11), (59, 11), (77, 11), (81, 11), (103, 11), (104, 11), (114, 11), (134, 11), (163, 11), (175, 11), (184, 11), (205, 11), (209, 11), (215, 11), (216, 11), (228, 11), (234, 11), (245, 11), (247, 11), (248, 11), (251, 11), (253, 11), (254, 11), (255, 11), (256, 11), (257, 11), (258, 11), (259, 11), (260, 11), (261, 11), (262, 11), (263, 11), (264, 11), (267, 11), (273, 11), (276, 11), (278, 11), (333, 11), (339, 11), (352, 11), (354, 11), (361, 11), (366, 11), (367, 11), (369, 11), (372, 11), (375, 11), (378, 11), (384, 11), (393, 11), (403, 11), (412, 11), (423, 11), (426, 11), (431, 11), (432, 11), (435, 11), (445, 11), (451, 11), (465, 11), (475, 11), (481, 11), (484, 11), (493, 11), (495, 11), (501, 11), (504, 11), (508, 11), (523, 11), (525, 11), (527, 11), (537, 11), (544, 11), (547, 11), (548, 11), (549, 11), (550, 11), (552, 11), (562, 11), (566, 11), (567, 11), (577, 11), (580, 11), (594, 11), (595, 11), (596, 11), (603, 11), (608, 11), (614, 11), (615, 11), (616, 11), (618, 11), (665, 11), (671, 11), (678, 11), (683, 11), (684, 11), (685, 11), (689, 11), (706, 11), (707, 11), (718, 11), (722, 11), (754, 11), (767, 11), (794, 11), (798, 11), (799, 11), (844, 11), (850, 11), (851, 11), (852, 11), (867, 11), (876, 11), (921, 11), (926, 11), (931, 11), (936, 11), (939, 11), (940, 11), (948, 11), (950, 11), (963, 11), (967, 11), (987, 11), (989, 11), (996, 11), (1019, 11), (1045, 11), (1058, 11), (1060, 11), (1070, 11), (1096, 11), (1098, 11), (1116, 11), (1119, 11), (1133, 11), (1134, 11), (1136, 11), (1139, 11), (1153, 11), (1197, 11), (1247, 11), (1250, 11), (1252, 11), (1253, 11), (1254, 11), (1256, 11), (1259, 11), (1260, 11), (1264, 11), (1266, 11), (1269, 11), (1295, 11), (1320, 11), (1324, 11), (1344, 11), (1355, 11), (1356, 11), (1357, 11), (1359, 11), (1360, 11), (1363, 11), (1372, 11), (1386, 11), (1396, 11), (1403, 11), (1456, 11), (1483, 11), (1545, 11), (1564, 11), (1603, 11), (1657, 11), (1661, 11), (1666, 11), (1680, 11), (1681, 11), (1698, 11), (1709, 11), (1729, 11), (1776, 11), (1807, 11), (1811, 11), (1869, 11), (1871, 11), (1872, 11), (1877, 11), (1880, 11), (1882, 11), (1887, 11), (1889, 11), (1890, 11), (1894, 11), (1907, 11), (1914, 11), (1917, 11), (1920, 11), (1936, 11), (1937, 11), (1965, 11), (1979, 11), (1983, 11), (1998, 11), (2058, 11), (2062, 11), (2064, 11), (2066, 11), (2072, 11), (2087, 11), (2099, 11), (2121, 11), (2122, 11), (2128, 11), (2134, 11), (2136, 11), (2139, 11), (2140, 11), (2142, 11), (2152, 11), (2154, 11), (2166, 11), (2179, 11), (2183, 11), (2203, 11), (2212, 11), (2214, 11), (2238, 11), (2247, 11), (2260, 11), (2313, 11), (2323, 11), (2326, 11), (2337, 11), (2339, 11), (2340, 11), (2346, 11), (2360, 11), (2366, 11), (2370, 11), (2373, 11), (2375, 11), (2379, 11), (2395, 11), (2397, 11), (2418, 11), (2425, 11), (2426, 11), (2428, 11), (2453, 11), (2454, 11), (2456, 11), (2457, 11), (2459, 11), (2465, 11), (2469, 11), (2470, 11), (2475, 11), (2496, 11), (2502, 11), (2519, 11), (2524, 11), (2525, 11), (2526, 11), (2530, 11), (2531, 11), (2540, 11), (2555, 11), (2561, 11), (2566, 11), (2567, 11), (2568, 11), (2569, 11), (2581, 11), (2583, 11), (2585, 11), (2586, 11), (2600, 11), (2601, 11), (2602, 11), (2605, 11), (2616, 11), (2622, 11), (2624, 11), (2625, 11), (2626, 11), (2641, 11), (2642, 11), (2644, 11), (2645, 11), (2651, 11), (2653, 11), (2658, 11), (2662, 11), (2668, 11), (2686, 11), (2687, 11), (2690, 11), (2695, 11), (2709, 11), (2714, 11), (2723, 11), (2737, 11), (2743, 11), (2748, 11), (2755, 11), (2763, 11), (2771, 11), (2775, 11), (2780, 11), (2781, 11), (2782, 11), (2786, 11), (2787, 11), (2790, 11), (2791, 11), (2793, 11), (2804, 11), (2806, 11), (2807, 11), (2809, 11), (2814, 11), (2817, 11), (2, 10), (5, 10), (12, 10), (16, 10), (28, 10), (54, 10), (60, 10), (72, 10), (76, 10), (80, 10), (88, 10), (89, 10), (90, 10), (96, 10), (98, 10), (107, 10), (111, 10), (112, 10), (115, 10), (119, 10), (121, 10), (122, 10), (148, 10), (154, 10), (161, 10), (162, 10), (169, 10), (173, 10), (178, 10), (187, 10), (189, 10), (193, 10), (198, 10), (202, 10), (208, 10), (212, 10), (224, 10), (242, 10), (246, 10), (250, 10), (265, 10), (266, 10), (269, 10), (272, 10), (279, 10), (281, 10), (285, 10), (286, 10), (288, 10), (289, 10), (298, 10), (300, 10), (304, 10), (305, 10), (308, 10), (312, 10), (315, 10), (323, 10), (332, 10), (334, 10), (341, 10), (342, 10), (348, 10), (353, 10), (355, 10), (359, 10), (360, 10), (362, 10), (365, 10), (368, 10), (370, 10), (371, 10), (387, 10), (391, 10), (401, 10), (406, 10), (407, 10), (408, 10), (411, 10), (413, 10), (416, 10), (417, 10), (422, 10), (427, 10), (453, 10), (461, 10), (462, 10), (463, 10), (467, 10), (469, 10), (470, 10), (471, 10), (474, 10), (476, 10), (483, 10), (485, 10), (486, 10), (488, 10), (490, 10), (491, 10), (494, 10), (496, 10), (497, 10), (499, 10), (500, 10), (515, 10), (517, 10), (518, 10), (521, 10), (522, 10), (524, 10), (526, 10), (529, 10), (531, 10), (536, 10), (539, 10), (541, 10), (546, 10), (555, 10), (556, 10), (557, 10), (558, 10), (559, 10), (563, 10), (569, 10), (573, 10), (574, 10), (579, 10), (582, 10), (583, 10), (587, 10), (589, 10), (590, 10), (591, 10), (593, 10), (597, 10), (600, 10), (606, 10), (609, 10), (610, 10), (613, 10), (620, 10), (622, 10), (624, 10), (625, 10), (626, 10), (627, 10), (632, 10), (634, 10), (635, 10), (638, 10), (639, 10), (640, 10), (641, 10), (644, 10), (645, 10), (647, 10), (649, 10), (651, 10), (654, 10), (655, 10), (656, 10), (657, 10), (658, 10), (660, 10), (661, 10), (667, 10), (674, 10), (675, 10), (691, 10), (703, 10), (704, 10), (705, 10), (708, 10), (715, 10), (723, 10), (724, 10), (726, 10), (728, 10), (730, 10), (732, 10), (736, 10), (741, 10), (745, 10), (750, 10), (752, 10), (753, 10), (758, 10), (763, 10), (764, 10), (765, 10), (766, 10), (772, 10), (777, 10), (779, 10), (780, 10), (782, 10), (784, 10), (785, 10), (787, 10), (791, 10), (795, 10), (796, 10), (800, 10), (802, 10), (805, 10), (808, 10), (810, 10), (811, 10), (812, 10), (813, 10), (814, 10), (817, 10), (821, 10), (824, 10), (825, 10), (829, 10), (831, 10), (837, 10), (838, 10), (841, 10), (845, 10), (855, 10), (857, 10), (858, 10), (862, 10), (864, 10), (865, 10), (866, 10), (869, 10), (872, 10), (924, 10), (927, 10), (941, 10), (945, 10), (949, 10), (954, 10), (957, 10), (978, 10), (979, 10), (994, 10), (999, 10), (1000, 10), (1001, 10), (1002, 10), (1003, 10), (1004, 10), (1005, 10), (1011, 10), (1015, 10), (1016, 10), (1023, 10), (1024, 10), (1037, 10), (1039, 10), (1042, 10), (1048, 10), (1057, 10), (1059, 10), (1062, 10), (1063, 10), (1082, 10), (1087, 10), (1100, 10), (1115, 10), (1121, 10), (1122, 10), (1123, 10), (1129, 10), (1135, 10), (1143, 10), (1145, 10), (1179, 10), (1181, 10), (1202, 10), (1213, 10), (1217, 10), (1223, 10), (1224, 10), (1228, 10), (1229, 10), (1230, 10), (1236, 10), (1241, 10), (1246, 10), (1248, 10), (1249, 10), (1251, 10), (1257, 10), (1263, 10), (1272, 10), (1281, 10), (1284, 10), (1293, 10), (1297, 10), (1300, 10), (1302, 10), (1314, 10), (1321, 10), (1325, 10), (1330, 10), (1341, 10), (1345, 10), (1354, 10), (1358, 10), (1367, 10), (1368, 10), (1376, 10), (1378, 10), (1379, 10), (1380, 10), (1381, 10), (1393, 10), (1397, 10), (1399, 10), (1400, 10), (1419, 10), (1424, 10), (1426, 10), (1431, 10), (1432, 10), (1435, 10), (1436, 10), (1446, 10), (1449, 10), (1451, 10), (1453, 10), (1455, 10), (1462, 10), (1468, 10), (1472, 10), (1474, 10), (1504, 10), (1515, 10), (1520, 10), (1523, 10), (1534, 10), (1535, 10), (1537, 10), (1549, 10), (1552, 10), (1553, 10), (1555, 10), (1559, 10), (1560, 10), (1562, 10), (1563, 10), (1571, 10), (1572, 10), (1577, 10), (1581, 10), (1585, 10), (1586, 10), (1590, 10), (1591, 10), (1605, 10), (1609, 10), (1626, 10), (1628, 10), (1629, 10), (1632, 10), (1640, 10), (1652, 10), (1658, 10), (1662, 10), (1668, 10), (1678, 10), (1683, 10), (1687, 10), (1689, 10), (1696, 10), (1702, 10), (1704, 10), (1705, 10), (1707, 10), (1718, 10), (1732, 10), (1741, 10), (1743, 10), (1748, 10), (1754, 10), (1762, 10), (1765, 10), (1766, 10), (1767, 10), (1769, 10), (1770, 10), (1772, 10), (1773, 10), (1775, 10), (1779, 10), (1780, 10), (1788, 10), (1790, 10), (1801, 10), (1804, 10), (1806, 10), (1809, 10), (1812, 10), (1820, 10), (1826, 10), (1829, 10), (1832, 10), (1837, 10), (1843, 10), (1850, 10), (1853, 10), (1860, 10), (1862, 10), (1864, 10), (1868, 10), (1878, 10), (1884, 10), (1891, 10), (1896, 10), (1901, 10), (1903, 10), (1910, 10), (1919, 10), (1921, 10), (1922, 10), (1924, 10), (1938, 10), (1940, 10), (1941, 10), (1942, 10), (1947, 10), (1953, 10), (1956, 10), (1960, 10), (1961, 10), (1964, 10), (1968, 10), (1969, 10), (1972, 10), (1973, 10), (1977, 10), (1978, 10), (1984, 10), (1986, 10), (1987, 10), (1988, 10), (1989, 10), (1992, 10), (1993, 10), (2000, 10), (2004, 10), (2020, 10), (2022, 10), (2026, 10), (2028, 10), (2033, 10), (2038, 10), (2040, 10), (2041, 10), (2042, 10), (2044, 10), (2047, 10), (2053, 10), (2059, 10), (2063, 10), (2065, 10), (2070, 10), (2075, 10), (2079, 10), (2085, 10), (2089, 10), (2092, 10), (2093, 10), (2096, 10), (2098, 10), (2103, 10), (2108, 10), (2112, 10), (2115, 10), (2116, 10), (2117, 10), (2120, 10), (2126, 10), (2130, 10), (2145, 10), (2146, 10), (2147, 10), (2148, 10), (2149, 10), (2151, 10), (2174, 10), (2188, 10), (2192, 10), (2193, 10), (2197, 10), (2199, 10), (2200, 10), (2201, 10), (2206, 10), (2208, 10), (2210, 10), (2211, 10), (2213, 10), (2215, 10), (2216, 10), (2217, 10), (2218, 10), (2219, 10), (2220, 10), (2222, 10), (2225, 10), (2226, 10), (2232, 10), (2234, 10), (2236, 10), (2240, 10), (2241, 10), (2243, 10), (2245, 10), (2248, 10), (2249, 10), (2252, 10), (2254, 10), (2257, 10), (2258, 10), (2259, 10), (2261, 10), (2264, 10), (2267, 10), (2269, 10), (2282, 10), (2285, 10), (2286, 10), (2288, 10), (2305, 10), (2307, 10), (2308, 10), (2309, 10), (2310, 10), (2311, 10), (2315, 10), (2316, 10), (2318, 10), (2322, 10), (2324, 10), (2328, 10), (2336, 10), (2342, 10), (2351, 10), (2353, 10), (2358, 10), (2361, 10), (2362, 10), (2363, 10), (2369, 10), (2371, 10), (2374, 10), (2376, 10), (2377, 10), (2380, 10), (2381, 10), (2396, 10), (2399, 10), (2402, 10), (2403, 10), (2404, 10), (2407, 10), (2408, 10), (2411, 10), (2413, 10), (2415, 10), (2417, 10), (2419, 10), (2421, 10), (2422, 10), (2424, 10), (2429, 10), (2430, 10), (2432, 10), (2433, 10), (2435, 10), (2436, 10), (2440, 10), (2441, 10), (2442, 10), (2445, 10), (2446, 10), (2447, 10), (2449, 10), (2450, 10), (2452, 10), (2461, 10), (2463, 10), (2464, 10), (2468, 10), (2473, 10), (2478, 10), (2482, 10), (2485, 10), (2494, 10), (2500, 10), (2501, 10), (2504, 10), (2505, 10), (2506, 10), (2507, 10), (2510, 10), (2512, 10), (2520, 10), (2522, 10), (2523, 10), (2539, 10), (2545, 10), (2548, 10), (2550, 10), (2558, 10), (2578, 10), (2587, 10), (2588, 10), (2591, 10), (2595, 10), (2599, 10), (2604, 10), (2608, 10), (2609, 10), (2611, 10), (2613, 10), (2617, 10), (2618, 10), (2620, 10), (2635, 10), (2637, 10), (2638, 10), (2647, 10), (2649, 10), (2652, 10), (2656, 10), (2657, 10), (2661, 10), (2665, 10), (2669, 10), (2671, 10), (2672, 10), (2680, 10), (2682, 10), (2685, 10), (2689, 10), (2691, 10), (2692, 10), (2693, 10), (2697, 10), (2704, 10), (2705, 10), (2707, 10), (2708, 10), (2713, 10), (2724, 10), (2726, 10), (2728, 10), (2731, 10), (2732, 10), (2734, 10), (2735, 10), (2736, 10), (2739, 10), (2740, 10), (2741, 10), (2742, 10), (2744, 10), (2746, 10), (2747, 10), (2749, 10), (2752, 10), (2753, 10), (2754, 10), (2758, 10), (2760, 10), (2764, 10), (2765, 10), (2767, 10), (2768, 10), (2769, 10), (2772, 10), (2773, 10), (2795, 10), (2799, 10), (2800, 10), (2802, 10), (2821, 10), (2822, 10), (2824, 10), (2826, 10), (2828, 10), (4, 9), (7, 9), (10, 9), (11, 9), (13, 9), (18, 9), (19, 9), (21, 9), (22, 9), (25, 9), (26, 9), (30, 9), (31, 9), (32, 9), (35, 9), (40, 9), (43, 9), (48, 9), (49, 9), (52, 9), (61, 9), (63, 9), (64, 9), (65, 9), (66, 9), (68, 9), (70, 9), (71, 9), (73, 9), (74, 9), (75, 9), (82, 9), (84, 9), (85, 9), (87, 9), (92, 9), (94, 9), (102, 9), (108, 9), (110, 9), (116, 9), (117, 9), (118, 9), (124, 9), (126, 9), (132, 9), (136, 9), (137, 9), (138, 9), (140, 9), (142, 9), (144, 9), (147, 9), (149, 9), (151, 9), (153, 9), (157, 9), (158, 9), (165, 9), (167, 9), (168, 9), (172, 9), (176, 9), (181, 9), (185, 9), (194, 9), (195, 9), (196, 9), (197, 9), (199, 9), (200, 9), (201, 9), (206, 9), (207, 9), (211, 9), (213, 9), (217, 9), (218, 9), (219, 9), (220, 9), (226, 9), (227, 9), (230, 9), (232, 9), (233, 9), (235, 9), (236, 9), (239, 9), (241, 9), (243, 9), (249, 9), (252, 9), (274, 9), (280, 9), (282, 9), (284, 9), (290, 9), (291, 9), (292, 9), (293, 9), (295, 9), (296, 9), (297, 9), (299, 9), (301, 9), (302, 9), (303, 9), (306, 9), (307, 9), (309, 9), (310, 9), (311, 9), (314, 9), (318, 9), (319, 9), (320, 9), (324, 9), (325, 9), (326, 9), (327, 9), (328, 9), (335, 9), (336, 9), (337, 9), (344, 9), (345, 9), (346, 9), (350, 9), (357, 9), (358, 9), (364, 9), (374, 9), (376, 9), (377, 9), (379, 9), (380, 9), (381, 9), (382, 9), (383, 9), (389, 9), (392, 9), (395, 9), (398, 9), (400, 9), (405, 9), (409, 9), (410, 9), (414, 9), (415, 9), (418, 9), (419, 9), (420, 9), (424, 9), (425, 9), (429, 9), (433, 9), (434, 9), (436, 9), (437, 9), (439, 9), (443, 9), (447, 9), (449, 9), (450, 9), (452, 9), (454, 9), (455, 9), (456, 9), (457, 9), (458, 9), (460, 9), (466, 9), (468, 9), (472, 9), (473, 9), (489, 9), (498, 9), (502, 9), (506, 9), (507, 9), (511, 9), (512, 9), (514, 9), (516, 9), (519, 9), (520, 9), (530, 9), (532, 9), (538, 9), (542, 9), (543, 9), (551, 9), (560, 9), (572, 9), (578, 9), (581, 9), (584, 9), (586, 9), (592, 9), (598, 9), (599, 9), (601, 9), (604, 9), (605, 9), (619, 9), (621, 9), (623, 9), (628, 9), (631, 9), (642, 9), (650, 9), (653, 9), (662, 9), (668, 9), (672, 9), (676, 9), (679, 9), (680, 9), (687, 9), (690, 9), (695, 9), (696, 9), (698, 9), (699, 9), (709, 9), (710, 9), (711, 9), (713, 9), (716, 9), (719, 9), (721, 9), (727, 9), (729, 9), (733, 9), (734, 9), (735, 9), (742, 9), (746, 9), (749, 9), (751, 9), (755, 9), (759, 9), (761, 9), (762, 9), (769, 9), (771, 9), (773, 9), (774, 9), (775, 9), (776, 9), (778, 9), (781, 9), (783, 9), (789, 9), (790, 9), (792, 9), (793, 9), (797, 9), (801, 9), (804, 9), (806, 9), (807, 9), (809, 9), (816, 9), (819, 9), (820, 9), (822, 9), (823, 9), (826, 9), (827, 9), (833, 9), (834, 9), (835, 9), (836, 9), (839, 9), (840, 9), (842, 9), (847, 9), (848, 9), (849, 9), (853, 9), (854, 9), (859, 9), (860, 9), (861, 9), (863, 9), (868, 9), (870, 9), (873, 9), (874, 9), (878, 9), (887, 9), (902, 9), (903, 9), (914, 9), (923, 9), (925, 9), (928, 9), (929, 9), (932, 9), (934, 9), (935, 9), (937, 9), (938, 9), (942, 9), (943, 9), (944, 9), (946, 9), (956, 9), (958, 9), (959, 9), (960, 9), (961, 9), (962, 9), (964, 9), (966, 9), (968, 9), (969, 9), (970, 9), (972, 9), (973, 9), (974, 9), (975, 9), (976, 9), (977, 9), (980, 9), (981, 9), (982, 9), (983, 9), (984, 9), (985, 9), (986, 9), (988, 9), (990, 9), (992, 9), (993, 9), (995, 9), (997, 9), (998, 9), (1006, 9), (1007, 9), (1008, 9), (1012, 9), (1013, 9), (1017, 9), (1018, 9), (1021, 9), (1025, 9), (1026, 9), (1028, 9), (1029, 9), (1030, 9), (1031, 9), (1036, 9), (1038, 9), (1043, 9), (1044, 9), (1046, 9), (1047, 9), (1049, 9), (1050, 9), (1051, 9), (1052, 9), (1053, 9), (1054, 9), (1055, 9), (1061, 9), (1065, 9), (1067, 9), (1068, 9), (1069, 9), (1071, 9), (1072, 9), (1073, 9), (1074, 9), (1076, 9), (1077, 9), (1079, 9), (1080, 9), (1081, 9), (1083, 9), (1084, 9), (1085, 9), (1086, 9), (1088, 9), (1091, 9), (1092, 9), (1093, 9), (1095, 9), (1101, 9), (1104, 9), (1105, 9), (1106, 9), (1107, 9), (1108, 9), (1110, 9), (1112, 9), (1113, 9), (1114, 9), (1117, 9), (1118, 9), (1125, 9), (1126, 9), (1127, 9), (1128, 9), (1130, 9), (1131, 9), (1132, 9), (1138, 9), (1141, 9), (1142, 9), (1150, 9), (1152, 9), (1154, 9), (1157, 9), (1164, 9), (1170, 9), (1171, 9), (1172, 9), (1174, 9), (1175, 9), (1176, 9), (1177, 9), (1180, 9), (1182, 9), (1184, 9), (1186, 9), (1187, 9), (1188, 9), (1189, 9), (1190, 9), (1191, 9), (1193, 9), (1198, 9), (1199, 9), (1200, 9), (1201, 9), (1203, 9), (1204, 9), (1205, 9), (1206, 9), (1207, 9), (1209, 9), (1211, 9), (1212, 9), (1215, 9), (1216, 9), (1218, 9), (1221, 9), (1226, 9), (1227, 9), (1231, 9), (1235, 9), (1237, 9), (1238, 9), (1255, 9), (1262, 9), (1270, 9), (1271, 9), (1275, 9), (1277, 9), (1278, 9), (1280, 9), (1282, 9), (1283, 9), (1285, 9), (1286, 9), (1287, 9), (1289, 9), (1290, 9), (1291, 9), (1292, 9), (1298, 9), (1299, 9), (1301, 9), (1305, 9), (1306, 9), (1308, 9), (1309, 9), (1312, 9), (1313, 9), (1315, 9), (1316, 9), (1319, 9), (1323, 9), (1326, 9), (1327, 9), (1328, 9), (1329, 9), (1331, 9), (1332, 9), (1334, 9), (1336, 9), (1337, 9), (1339, 9), (1342, 9), (1346, 9), (1347, 9), (1349, 9), (1351, 9), (1353, 9), (1361, 9), (1364, 9), (1365, 9), (1366, 9), (1369, 9), (1371, 9), (1373, 9), (1374, 9), (1383, 9), (1384, 9), (1385, 9), (1387, 9), (1388, 9), (1389, 9), (1391, 9), (1392, 9), (1395, 9), (1398, 9), (1401, 9), (1402, 9), (1404, 9), (1405, 9), (1406, 9), (1407, 9), (1408, 9), (1409, 9), (1410, 9), (1411, 9), (1412, 9), (1413, 9), (1414, 9), (1415, 9), (1416, 9), (1417, 9), (1418, 9), (1420, 9), (1421, 9), (1422, 9), (1423, 9), (1425, 9), (1427, 9), (1428, 9), (1429, 9), (1433, 9), (1434, 9), (1437, 9), (1438, 9), (1439, 9), (1440, 9), (1441, 9), (1442, 9), (1443, 9), (1444, 9), (1445, 9), (1447, 9), (1454, 9), (1457, 9), (1458, 9), (1461, 9), (1465, 9), (1466, 9), (1469, 9), (1473, 9), (1475, 9), (1476, 9), (1477, 9), (1481, 9), (1485, 9), (1489, 9), (1491, 9), (1492, 9), (1493, 9), (1494, 9), (1495, 9), (1496, 9), (1500, 9), (1501, 9), (1502, 9), (1507, 9), (1508, 9), (1518, 9), (1519, 9), (1521, 9), (1522, 9), (1525, 9), (1528, 9), (1529, 9), (1531, 9), (1532, 9), (1533, 9), (1538, 9), (1539, 9), (1540, 9), (1541, 9), (1548, 9), (1551, 9), (1558, 9), (1567, 9), (1569, 9), (1576, 9), (1580, 9), (1584, 9), (1587, 9), (1596, 9), (1597, 9), (1600, 9), (1608, 9), (1610, 9), (1611, 9), (1612, 9), (1613, 9), (1616, 9), (1618, 9), (1619, 9), (1622, 9), (1623, 9), (1634, 9), (1635, 9), (1637, 9), (1638, 9), (1639, 9), (1641, 9), (1650, 9), (1653, 9), (1654, 9), (1656, 9), (1659, 9), (1660, 9), (1663, 9), (1664, 9), (1667, 9), (1672, 9), (1673, 9), (1675, 9), (1679, 9), (1682, 9), (1685, 9), (1686, 9), (1690, 9), (1692, 9), (1695, 9), (1699, 9), (1700, 9), (1701, 9), (1710, 9), (1711, 9), (1712, 9), (1717, 9), (1719, 9), (1721, 9), (1722, 9), (1724, 9), (1726, 9), (1727, 9), (1730, 9), (1731, 9), (1733, 9), (1734, 9), (1739, 9), (1740, 9), (1744, 9), (1745, 9), (1746, 9), (1747, 9), (1750, 9), (1756, 9), (1757, 9), (1758, 9), (1759, 9), (1760, 9), (1761, 9), (1764, 9), (1781, 9), (1783, 9), (1785, 9), (1796, 9), (1805, 9), (1813, 9), (1815, 9), (1816, 9), (1817, 9), (1818, 9), (1819, 9), (1821, 9), (1822, 9), (1823, 9), (1827, 9), (1828, 9), (1830, 9), (1833, 9), (1834, 9), (1839, 9), (1840, 9), (1841, 9), (1842, 9), (1844, 9), (1846, 9), (1847, 9), (1849, 9), (1851, 9), (1855, 9), (1858, 9), (1859, 9), (1863, 9), (1865, 9), (1866, 9), (1874, 9), (1876, 9), (1881, 9), (1886, 9), (1897, 9), (1898, 9), (1902, 9), (1905, 9), (1906, 9), (1908, 9), (1911, 9), (1912, 9), (1915, 9), (1916, 9), (1925, 9), (1927, 9), (1931, 9), (1933, 9), (1939, 9), (1944, 9), (1945, 9), (1948, 9), (1951, 9), (1954, 9), (1955, 9), (1957, 9), (1959, 9), (1962, 9), (1970, 9), (1971, 9), (1974, 9), (1976, 9), (1980, 9), (1981, 9), (1982, 9), (1985, 9), (1990, 9), (1991, 9), (1994, 9), (1995, 9), (1996, 9), (1997, 9), (1999, 9), (2001, 9), (2002, 9), (2005, 9), (2006, 9), (2008, 9), (2009, 9), (2011, 9), (2012, 9), (2013, 9), (2014, 9), (2015, 9), (2016, 9), (2024, 9), (2027, 9), (2030, 9), (2034, 9), (2037, 9), (2045, 9), (2048, 9), (2049, 9), (2050, 9), (2051, 9), (2052, 9), (2054, 9), (2056, 9), (2057, 9), (2061, 9), (2068, 9), (2078, 9), (2081, 9), (2083, 9), (2084, 9), (2086, 9), (2088, 9), (2091, 9), (2094, 9), (2106, 9), (2107, 9), (2124, 9), (2125, 9), (2127, 9), (2129, 9), (2131, 9), (2132, 9), (2133, 9), (2135, 9), (2153, 9), (2155, 9), (2156, 9), (2159, 9), (2160, 9), (2164, 9), (2165, 9), (2167, 9), (2168, 9), (2169, 9), (2170, 9), (2171, 9), (2173, 9), (2176, 9), (2181, 9), (2182, 9), (2184, 9), (2185, 9), (2186, 9), (2190, 9), (2194, 9), (2196, 9), (2202, 9), (2204, 9), (2205, 9), (2207, 9), (2221, 9), (2223, 9), (2224, 9), (2227, 9), (2228, 9), (2229, 9), (2230, 9), (2235, 9), (2237, 9), (2244, 9), (2246, 9), (2250, 9), (2251, 9), (2253, 9), (2255, 9), (2256, 9), (2262, 9), (2263, 9), (2268, 9), (2270, 9), (2271, 9), (2272, 9), (2273, 9), (2274, 9), (2275, 9), (2276, 9), (2277, 9), (2278, 9), (2279, 9), (2280, 9), (2281, 9), (2283, 9), (2284, 9), (2287, 9), (2289, 9), (2290, 9), (2291, 9), (2293, 9), (2294, 9), (2295, 9), (2296, 9), (2297, 9), (2299, 9), (2300, 9), (2301, 9), (2302, 9), (2303, 9), (2304, 9), (2314, 9), (2317, 9), (2319, 9), (2320, 9), (2327, 9), (2329, 9), (2335, 9), (2338, 9), (2343, 9), (2344, 9), (2347, 9), (2352, 9), (2354, 9), (2357, 9), (2359, 9), (2364, 9), (2365, 9), (2367, 9), (2372, 9), (2378, 9), (2382, 9), (2383, 9), (2384, 9), (2385, 9), (2386, 9), (2387, 9), (2388, 9), (2389, 9), (2390, 9), (2391, 9), (2392, 9), (2394, 9), (2409, 9), (2410, 9), (2412, 9), (2416, 9), (2420, 9), (2431, 9), (2438, 9), (2439, 9), (2444, 9), (2448, 9), (2455, 9), (2458, 9), (2460, 9), (2462, 9), (2466, 9), (2472, 9), (2474, 9), (2476, 9), (2477, 9), (2481, 9), (2483, 9), (2484, 9), (2486, 9), (2487, 9), (2488, 9), (2489, 9), (2490, 9), (2491, 9), (2495, 9), (2497, 9), (2498, 9), (2503, 9), (2508, 9), (2511, 9), (2513, 9), (2514, 9), (2515, 9), (2516, 9), (2517, 9), (2518, 9), (2521, 9), (2527, 9), (2528, 9), (2532, 9), (2536, 9), (2537, 9), (2543, 9), (2544, 9), (2546, 9), (2547, 9), (2549, 9), (2552, 9), (2553, 9), (2554, 9), (2556, 9), (2557, 9), (2559, 9), (2560, 9), (2562, 9), (2563, 9), (2564, 9), (2565, 9), (2570, 9), (2572, 9), (2573, 9), (2574, 9), (2580, 9), (2582, 9), (2584, 9), (2589, 9), (2590, 9), (2592, 9), (2593, 9), (2594, 9), (2596, 9), (2597, 9), (2606, 9), (2607, 9), (2610, 9), (2619, 9), (2621, 9), (2623, 9), (2627, 9), (2628, 9), (2630, 9), (2631, 9), (2632, 9), (2633, 9), (2634, 9), (2636, 9), (2640, 9), (2643, 9), (2646, 9), (2648, 9), (2650, 9), (2660, 9), (2663, 9), (2664, 9), (2670, 9), (2673, 9), (2674, 9), (2675, 9), (2676, 9), (2678, 9), (2681, 9), (2683, 9), (2684, 9), (2688, 9), (2696, 9), (2698, 9), (2699, 9), (2700, 9), (2701, 9), (2702, 9), (2703, 9), (2706, 9), (2710, 9), (2711, 9), (2715, 9), (2719, 9), (2720, 9), (2722, 9), (2727, 9), (2729, 9), (2730, 9), (2738, 9), (2745, 9), (2750, 9), (2751, 9), (2756, 9), (2762, 9), (2766, 9), (2770, 9), (2774, 9), (2776, 9), (2777, 9), (2779, 9), (2788, 9), (2789, 9), (2792, 9), (2796, 9), (2801, 9), (2803, 9), (2805, 9), (2808, 9), (2810, 9), (2811, 9), (2813, 9), (2815, 9), (2816, 9), (2818, 9), (2819, 9), (2823, 9), (2827, 9), (0, 8), (1, 8), (3, 8), (6, 8), (8, 8), (15, 8), (17, 8), (20, 8), (23, 8), (24, 8), (27, 8), (29, 8), (34, 8), (36, 8), (37, 8), (38, 8), (39, 8), (41, 8), (42, 8), (44, 8), (45, 8), (46, 8), (47, 8), (51, 8), (55, 8), (56, 8), (57, 8), (58, 8), (62, 8), (67, 8), (69, 8), (78, 8), (79, 8), (83, 8), (86, 8), (91, 8), (93, 8), (95, 8), (97, 8), (99, 8), (100, 8), (101, 8), (105, 8), (106, 8), (109, 8), (113, 8), (120, 8), (123, 8), (125, 8), (127, 8), (128, 8), (129, 8), (130, 8), (131, 8), (133, 8), (135, 8), (141, 8), (143, 8), (145, 8), (146, 8), (150, 8), (152, 8), (155, 8), (156, 8), (159, 8), (160, 8), (164, 8), (166, 8), (170, 8), (171, 8), (174, 8), (177, 8), (179, 8), (180, 8), (182, 8), (183, 8), (186, 8), (188, 8), (190, 8), (191, 8), (192, 8), (203, 8), (204, 8), (210, 8), (214, 8), (221, 8), (222, 8), (223, 8), (225, 8), (229, 8), (231, 8), (237, 8), (238, 8), (240, 8), (244, 8), (268, 8), (270, 8), (271, 8), (275, 8), (277, 8), (283, 8), (287, 8), (294, 8), (313, 8), (316, 8), (317, 8), (321, 8), (322, 8), (329, 8), (330, 8), (331, 8), (340, 8), (343, 8), (349, 8), (351, 8), (356, 8), (363, 8), (373, 8), (385, 8), (386, 8), (388, 8), (390, 8), (394, 8), (396, 8), (397, 8), (399, 8), (402, 8), (404, 8), (421, 8), (428, 8), (430, 8), (440, 8), (442, 8), (444, 8), (446, 8), (448, 8), (459, 8), (464, 8), (478, 8), (479, 8), (480, 8), (482, 8), (487, 8), (492, 8), (503, 8), (505, 8), (509, 8), (510, 8), (513, 8), (528, 8), (533, 8), (535, 8), (540, 8), (545, 8), (553, 8), (554, 8), (561, 8), (564, 8), (565, 8), (570, 8), (571, 8), (575, 8), (576, 8), (585, 8), (588, 8), (602, 8), (607, 8), (611, 8), (612, 8), (617, 8), (629, 8), (630, 8), (633, 8), (636, 8), (637, 8), (643, 8), (646, 8), (648, 8), (652, 8), (659, 8), (663, 8), (664, 8), (666, 8), (669, 8), (670, 8), (677, 8), (682, 8), (686, 8), (688, 8), (692, 8), (693, 8), (694, 8), (697, 8), (700, 8), (701, 8), (702, 8), (712, 8), (714, 8), (717, 8), (720, 8), (725, 8), (731, 8), (738, 8), (739, 8), (740, 8), (743, 8), (744, 8), (747, 8), (748, 8), (756, 8), (757, 8), (770, 8), (786, 8), (788, 8), (803, 8), (818, 8), (828, 8), (830, 8), (832, 8), (843, 8), (846, 8), (856, 8), (871, 8), (875, 8), (877, 8), (879, 8), (880, 8), (881, 8), (882, 8), (883, 8), (884, 8), (885, 8), (886, 8), (888, 8), (889, 8), (890, 8), (891, 8), (892, 8), (893, 8), (894, 8), (895, 8), (896, 8), (897, 8), (898, 8), (899, 8), (900, 8), (901, 8), (904, 8), (905, 8), (906, 8), (907, 8), (908, 8), (909, 8), (910, 8), (911, 8), (912, 8), (913, 8), (915, 8), (916, 8), (917, 8), (918, 8), (919, 8), (920, 8), (922, 8), (930, 8), (933, 8), (947, 8), (951, 8), (952, 8), (953, 8), (955, 8), (965, 8), (971, 8), (991, 8), (1009, 8), (1010, 8), (1014, 8), (1020, 8), (1022, 8), (1027, 8), (1032, 8), (1033, 8), (1034, 8), (1035, 8), (1040, 8), (1041, 8), (1056, 8), (1064, 8), (1066, 8), (1075, 8), (1078, 8), (1089, 8), (1090, 8), (1094, 8), (1097, 8), (1099, 8), (1102, 8), (1103, 8), (1109, 8), (1111, 8), (1124, 8), (1137, 8), (1140, 8), (1144, 8), (1146, 8), (1147, 8), (1148, 8), (1149, 8), (1151, 8), (1155, 8), (1156, 8), (1158, 8), (1159, 8), (1160, 8), (1161, 8), (1162, 8), (1163, 8), (1165, 8), (1166, 8), (1167, 8), (1168, 8), (1169, 8), (1173, 8), (1178, 8), (1183, 8), (1185, 8), (1192, 8), (1194, 8), (1195, 8), (1196, 8), (1208, 8), (1210, 8), (1214, 8), (1219, 8), (1220, 8), (1222, 8), (1225, 8), (1232, 8), (1233, 8), (1234, 8), (1239, 8), (1240, 8), (1242, 8), (1244, 8), (1245, 8), (1258, 8), (1261, 8), (1265, 8), (1267, 8), (1268, 8), (1273, 8), (1274, 8), (1276, 8), (1279, 8), (1288, 8), (1296, 8), (1303, 8), (1304, 8), (1307, 8), (1310, 8), (1311, 8), (1317, 8), (1318, 8), (1322, 8), (1333, 8), (1335, 8), (1338, 8), (1340, 8), (1343, 8), (1348, 8), (1350, 8), (1352, 8), (1370, 8), (1375, 8), (1377, 8), (1382, 8), (1390, 8), (1394, 8), (1430, 8), (1448, 8), (1450, 8), (1452, 8), (1459, 8), (1460, 8), (1463, 8), (1464, 8), (1467, 8), (1470, 8), (1471, 8), (1478, 8), (1479, 8), (1480, 8), (1482, 8), (1484, 8), (1486, 8), (1487, 8), (1488, 8), (1490, 8), (1497, 8), (1498, 8), (1499, 8), (1503, 8), (1505, 8), (1506, 8), (1509, 8), (1510, 8), (1511, 8), (1512, 8), (1513, 8), (1514, 8), (1516, 8), (1517, 8), (1524, 8), (1526, 8), (1527, 8), (1530, 8), (1536, 8), (1542, 8), (1543, 8), (1544, 8), (1546, 8), (1547, 8), (1550, 8), (1554, 8), (1556, 8), (1557, 8), (1561, 8), (1565, 8), (1566, 8), (1568, 8), (1570, 8), (1573, 8), (1574, 8), (1575, 8), (1578, 8), (1579, 8), (1582, 8), (1583, 8), (1588, 8), (1589, 8), (1592, 8), (1593, 8), (1594, 8), (1595, 8), (1598, 8), (1599, 8), (1601, 8), (1602, 8), (1604, 8), (1606, 8), (1607, 8), (1614, 8), (1615, 8), (1617, 8), (1620, 8), (1621, 8), (1624, 8), (1625, 8), (1627, 8), (1630, 8), (1631, 8), (1633, 8), (1636, 8), (1642, 8), (1643, 8), (1644, 8), (1645, 8), (1646, 8), (1647, 8), (1648, 8), (1649, 8), (1651, 8), (1655, 8), (1665, 8), (1669, 8), (1670, 8), (1671, 8), (1674, 8), (1676, 8), (1677, 8), (1684, 8), (1688, 8), (1691, 8), (1693, 8), (1694, 8), (1697, 8), (1703, 8), (1706, 8), (1708, 8), (1713, 8), (1714, 8), (1715, 8), (1716, 8), (1720, 8), (1723, 8), (1725, 8), (1728, 8), (1735, 8), (1736, 8), (1737, 8), (1738, 8), (1742, 8), (1749, 8), (1751, 8), (1752, 8), (1753, 8), (1755, 8), (1763, 8), (1768, 8), (1771, 8), (1774, 8), (1777, 8), (1778, 8), (1782, 8), (1784, 8), (1786, 8), (1787, 8), (1789, 8), (1791, 8), (1792, 8), (1793, 8), (1794, 8), (1795, 8), (1797, 8), (1798, 8), (1799, 8), (1800, 8), (1802, 8), (1803, 8), (1808, 8), (1810, 8), (1814, 8), (1824, 8), (1825, 8), (1831, 8), (1835, 8), (1836, 8), (1838, 8), (1845, 8), (1848, 8), (1852, 8), (1854, 8), (1856, 8), (1857, 8), (1861, 8), (1867, 8), (1870, 8), (1873, 8), (1875, 8), (1879, 8), (1883, 8), (1885, 8), (1888, 8), (1892, 8), (1893, 8), (1895, 8), (1899, 8), (1900, 8), (1904, 8), (1909, 8), (1913, 8), (1918, 8), (1923, 8), (1928, 8), (1929, 8), (1930, 8), (1932, 8), (1934, 8), (1935, 8), (1946, 8), (1949, 8), (1950, 8), (1952, 8), (1958, 8), (1963, 8), (1967, 8), (2007, 8), (2018, 8), (2019, 8), (2021, 8), (2023, 8), (2025, 8), (2029, 8), (2031, 8), (2035, 8), (2036, 8), (2039, 8), (2043, 8), (2046, 8), (2055, 8), (2067, 8), (2069, 8), (2071, 8), (2073, 8), (2074, 8), (2076, 8), (2077, 8), (2080, 8), (2082, 8), (2090, 8), (2095, 8), (2097, 8), (2100, 8), (2101, 8), (2102, 8), (2104, 8), (2105, 8), (2109, 8), (2110, 8), (2111, 8), (2113, 8), (2114, 8), (2118, 8), (2119, 8), (2123, 8), (2141, 8), (2144, 8), (2150, 8), (2158, 8), (2161, 8), (2162, 8), (2163, 8), (2172, 8), (2175, 8), (2178, 8), (2180, 8), (2189, 8), (2191, 8), (2195, 8), (2198, 8), (2231, 8), (2233, 8), (2242, 8), (2266, 8), (2292, 8), (2298, 8), (2306, 8), (2312, 8), (2321, 8), (2325, 8), (2330, 8), (2331, 8), (2332, 8), (2333, 8), (2334, 8), (2341, 8), (2345, 8), (2348, 8), (2349, 8), (2350, 8), (2355, 8), (2368, 8), (2393, 8), (2398, 8), (2400, 8), (2401, 8), (2405, 8), (2406, 8), (2414, 8), (2423, 8), (2427, 8), (2434, 8), (2437, 8), (2443, 8), (2451, 8), (2467, 8), (2479, 8), (2480, 8), (2492, 8), (2493, 8), (2499, 8), (2509, 8), (2529, 8), (2533, 8), (2534, 8), (2535, 8), (2538, 8), (2541, 8), (2542, 8), (2551, 8), (2571, 8), (2576, 8), (2577, 8), (2579, 8), (2598, 8), (2603, 8), (2612, 8), (2614, 8), (2615, 8), (2629, 8), (2639, 8), (2654, 8), (2655, 8), (2666, 8), (2667, 8), (2677, 8), (2679, 8), (2694, 8), (2712, 8), (2716, 8), (2717, 8), (2718, 8), (2721, 8), (2725, 8), (2733, 8), (2757, 8), (2759, 8), (2778, 8), (2784, 8), (2785, 8), (2794, 8), (2797, 8), (2812, 8), (2820, 8), (2825, 8), (2829, 8)]


################################################################################
#    Add your agent here
################################################################################
else:
    pass

################################################################################
#   Parameters for User Simulators
################################################################################
usersim_params = {}
usersim_params['max_turn'] = max_turn
usersim_params['slot_err_probability'] = params['slot_err_prob']
usersim_params['slot_err_mode'] = params['slot_err_mode']
usersim_params['intent_err_probability'] = params['intent_err_prob']
usersim_params['simulator_run_mode'] = params['run_mode']
usersim_params['simulator_act_level'] = params['act_level']
usersim_params['learning_phase'] = params['learning_phase']

if usr == 0:# real user
    user_sim = RealUser(movie_dictionary, act_set, slot_set, goal_set, usersim_params)
elif usr == 1: # movie simulator
    user_sim = RuleSimulator(movie_dictionary, act_set, slot_set, goal_set, usersim_params)
elif usr == 2: # restaurant simulator
    user_sim = RuleRestaurantSimulator(movie_dictionary, act_set, slot_set, goal_set, usersim_params)
elif usr == 3: # taxi simulator
    user_sim = RuleTaxiSimulator(movie_dictionary, act_set, slot_set, goal_set, usersim_params)


################################################################################
#    Add your user simulator here
################################################################################
else:
    pass


################################################################################
# load trained NLG model
################################################################################
nlg_model_path = params['nlg_model_path']
diaact_nl_pairs = params['diaact_nl_pairs']
nlg_model = nlg()
nlg_model.load_nlg_model(nlg_model_path)
nlg_model.load_predefine_act_nl_pairs(diaact_nl_pairs) # load nlg templates

agent.set_nlg_model(nlg_model)
user_sim.set_nlg_model(nlg_model)

################################################################################
# load trained NLU model
################################################################################
nlu_model_path = params['nlu_model_path']
nlu_model = nlu()
nlu_model.load_nlu_model(nlu_model_path)

agent.set_nlu_model(nlu_model)
user_sim.set_nlu_model(nlu_model)

################################################################################
# Dialog Manager
################################################################################
dialog_manager = DialogManager(agent, user_sim, act_set, slot_set, kb)
    
################################################################################
#   Run num_episodes Conversation Simulations
################################################################################
status = {'successes': 0, 'count': 0, 'cumulative_reward': 0}

simulation_epoch_size = params['simulation_epoch_size']
batch_size = params['batch_size'] # default = 16
warm_start = params['warm_start']
warm_start_epochs = params['warm_start_epochs']

success_rate_threshold = params['success_rate_threshold']
save_check_point = params['save_check_point']


""" Best Model and Performance Records """
best_model = {}
best_res = {'success_rate': 0, 'ave_reward':float('-inf'), 'ave_turns': float('inf'), 'epoch':0}
best_model['model'] = copy.deepcopy(agent)
best_res['success_rate'] = 0

performance_records = {}
performance_records['success_rate'] = {}
performance_records['ave_turns'] = {}
performance_records['ave_reward'] = {}
performance_records['ave_intrinsic_reward'] = {}


decompose_number = 0
subgoal_number_records = {}
decompose_number_records = {}



""" Save model """
def save_model(path, agt, success_rate, agent, best_epoch, cur_epoch):
    filename = 'agt_%s_%s_%s_%.5f.p' % (agt, best_epoch, cur_epoch, success_rate)
    filepath = os.path.join(path, filename)
    checkpoint = {}
    if (agt == 9 or agt == 12 or agt == 13):
        checkpoint['state_dict'] = {k: v.cpu() for k, v in agent.dqn.state_dict().items()}
        # print checkpoint['state_dict']
    # if (agt == 12 or agt == 13): checkpoint['model'] = copy.deepcopy(agent.dqn.model)
    checkpoint['params'] = params
    checkpoint['agent_params'] = agent_params
    try:
        # print checkpoint
        pickle.dump(checkpoint, open(filepath, "wb+"))
        print 'saved model in %s' % (filepath, )
    except Exception, e:
        print 'Error: Writing model fails: %s' % (filepath, )
        print e

""" save performance numbers """
def save_performance_records(path, num, records):
    filename = '%s.json' % (num)
    filepath = os.path.join(path, filename)
    try:
        json.dump(records, open(filepath, "wb"))
        print 'saved model in %s' % (filepath, )
    except Exception, e:
        print 'Error: Writing model fails: %s' % (filepath, )
        print e

def valid_success(goal, current_status):

    g_r = goal.get("request_slots").keys()
    g_c = goal.get("inform_slots").keys()

    s_r = current_status.get("request_slots").keys()
    s_c = current_status.get("inform_slots").keys()

    # if len(set(g_r) - set(s_r)) == 0 and len(set(g_c) - set(s_c))==0:
    if len(set(g_r) - set(s_r)) == 0 and len(set(g_c) - set(s_c)) :
        return True
    else:
        return False





def goal_equal(g1, g2):
    """
    compare two  {"info":{"price":"low", "food":"chinese"}, "request":{"address":None}}
    :param g1:
    :param g2:
    :return:
    """
    g1_r = g1.get("request_slots").keys()
    g1_c = g1.get("inform_slots").keys()
    g2_r = g2.get("request_slots").keys()
    g2_c = g2.get("inform_slots").keys()

    if g1_c == g2_c and g1_r == g2_r:
        return True
    else:
        return False

def fake_kl2(s1, s2):
    """
    state_distance
    :param s1:
    :param s2:
    :return:
    """
    return np.sqrt(np.sum(np.square(s1 - s2)))

def fake_kl(s1, s2):
    """
    state_cosin
    :param s1:
    :param s2:
    :return:
    """
    s1 = s1.reshape((-1,))
    s2 = s2.reshape((-1,))

    return np.dot(s1,s2)/(np.linalg.norm(s1)*(np.linalg.norm(s2)))

dialog_tail = []
success_dialog = []
stick_success_dialogs = []
stick_threshold = 0.5

change_flag = False

#DQN
def simulation_epoch_train_private_subgoal(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    global dict_change
    global dict_goal_now
    global decompose_number


    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        #first directly adding an inform_slot?
                        if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                            for i in complete_goal['inform_slots']:
                                if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                    dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                    break
                        else:
                        #then directly add an request_slot?
                            for i in complete_goal['request_slots']:
                                if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                    dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                    break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])

                cumulative_turns += dialog_manager.state_tracker.turn_count


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#DQN_addingexperience
def simulation_epoch_train_private_subgoal_addingER(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        #first directly adding an inform_slot?
                        if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                            for i in complete_goal['inform_slots']:
                                if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                    dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                    break
                        else:
                        #then directly add an request_slot?
                            for i in complete_goal['request_slots']:
                                if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                    dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                    break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

# AR
def simulation_epoch_train_subgoal(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                    len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                        len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break
                            # if len(dict_goal_now[goal_id]['inform_slots']) == len(
                            #         complete_goal['inform_slots']) and len(
                            #         dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            #     dict_change[goal_id] = False

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

# AR without adding experience
def simulation_epoch_train_subgoal_withoutER(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                    len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                        len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break
                            # if len(dict_goal_now[goal_id]['inform_slots']) == len(
                            #         complete_goal['inform_slots']) and len(
                            #         dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            #     dict_change[goal_id] = False

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                # dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#C + R
def simulation_epoch_train_subgoal2(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                    len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                        len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break
                            # if len(dict_goal_now[goal_id]['inform_slots']) == len(
                            #         complete_goal['inform_slots']) and len(
                            #         dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            #     dict_change[goal_id] = False

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    # #substitude goal with a subgoal
                    # dict_change[goal_id] = True
                    # #if have complete any slots
                    # if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                    #     dict_goal_now[goal_id] = tmp_p
                    # else:
                    #     #adding random slot
                    #     if len(complete_goal['inform_slots'])>0:
                    #         temp = {"request_slots": {}, "inform_slots": {}}
                    #         temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                    #         dict_goal_now[goal_id] = temp
                    #     else:
                    #         temp = {"request_slots": {}, "inform_slots": {}}
                    #         temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                    #         dict_goal_now[goal_id] = temp

                    if dict_change[goal_id] == True:
                        if len(tmp_p) > len(dict_goal_now[goal_id]):
                            dict_goal_now[goal_id] = tmp_p
                    else:
                        # substitude goal with a subgoal
                        dict_change[goal_id] = True
                        # if have complete any slots
                        if len(tmp_p['inform_slots']) > 0 or len(tmp_p['request_slots']) > 0:
                            dict_goal_now[goal_id] = tmp_p
                        else:
                            # adding random slot
                            if len(complete_goal['inform_slots']) > 0:
                                temp = {"request_slots": {}, "inform_slots": {}}
                                temp['inform_slots'][complete_goal['inform_slots'].keys()[0]] = \
                                complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                                dict_goal_now[goal_id] = temp
                            else:
                                temp = {"request_slots": {}, "inform_slots": {}}
                                temp['request_slots'][complete_goal['request_slots'].keys()[0]] = \
                                complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                                dict_goal_now[goal_id] = temp
                        decompose_number = decompose_number + 1


                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#only F
def simulation_epoch_train_subgoal2_onlyfailureslot(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        # add_slot_number = int(round((cumulative_reward/dialog_manager.max_reward) * (len(complete_goal)-len(dict_goal_now[goal_id]))))
                        # for i in range(add_slot_number):
                        #     # first directly adding an inform_slot?
                        #     if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                        #         for i in complete_goal['inform_slots']:
                        #             if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #                 dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #                 break
                        #     else:
                        #         # then directly add an request_slot?
                        #         for i in complete_goal['request_slots']:
                        #             if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #                 dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #                 break
                        #     # if len(dict_goal_now[goal_id]['inform_slots']) == len(
                        #     #         complete_goal['inform_slots']) and len(
                        #     #         dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                        #     #     dict_change[goal_id] = False

                        #first directly adding an inform_slot?
                        if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                            for i in complete_goal['inform_slots']:
                                if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                    dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                    break
                        else:
                        #then directly add an request_slot?
                            for i in complete_goal['request_slots']:
                                if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                    dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                    break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    # #substitude goal with a subgoal
                    # dict_change[goal_id] = True
                    # #if have complete any slots
                    # if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                    #     dict_goal_now[goal_id] = tmp_p
                    # else:
                    #     #adding random slot
                    #     if len(complete_goal['inform_slots'])>0:
                    #         temp = {"request_slots": {}, "inform_slots": {}}
                    #         temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                    #         dict_goal_now[goal_id] = temp
                    #     else:
                    #         temp = {"request_slots": {}, "inform_slots": {}}
                    #         temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                    #         dict_goal_now[goal_id] = temp

                    if dict_change[goal_id] == True:
                        if len(tmp_p) > len(dict_goal_now[goal_id]):
                            dict_goal_now[goal_id] = tmp_p
                    else:
                        # substitude goal with a subgoal
                        dict_change[goal_id] = True
                        # if have complete any slots
                        if len(tmp_p['inform_slots']) > 0 or len(tmp_p['request_slots']) > 0:
                            dict_goal_now[goal_id] = tmp_p
                        else:
                            # adding random slot
                            if len(complete_goal['inform_slots']) > 0:
                                temp = {"request_slots": {}, "inform_slots": {}}
                                temp['inform_slots'][complete_goal['inform_slots'].keys()[0]] = \
                                complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                                dict_goal_now[goal_id] = temp
                            else:
                                temp = {"request_slots": {}, "inform_slots": {}}
                                temp['request_slots'][complete_goal['request_slots'].keys()[0]] = \
                                complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                                dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1


                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#E
def simulation_epoch_train_subgoal3(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1-total_icm_loss) * (
                                    len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                        len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#E without adding experience
def simulation_epoch_train_subgoal3_withoutER(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1-total_icm_loss) * (
                                    len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                        len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                # dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

# R+ F
def simulation_epoch_train_subgoal4(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    record_fail_number[goal_id].append(1)
                    if dict_change[goal_id]==True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                    len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                        len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break
                            # if len(dict_goal_now[goal_id]['inform_slots']) == len(
                            #         complete_goal['inform_slots']) and len(
                            #         dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            #     dict_change[goal_id] = False

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    record_fail_number[goal_id].append(0)
                    t = 0
                    if len(record_fail_number[goal_id]) >=2:
                        for i in record_fail_number[goal_id]:
                            if i == 0:
                                t += 1
                            else:
                                t = 0
                        if t>=2:
                            # substitude goal with a subgoal
                            dict_change[goal_id] = True
                            # if have complete any slots
                            if len(tmp_p['inform_slots']) > 0 or len(tmp_p['request_slots']) > 0:
                                dict_goal_now[goal_id] = tmp_p
                            else:
                                # adding random slot
                                if len(complete_goal['inform_slots']) > 0:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['inform_slots'][complete_goal['inform_slots'].keys()[0]] = \
                                    complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                                else:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['request_slots'][complete_goal['request_slots'].keys()[0]] = \
                                    complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                            decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#R+C
def simulation_epoch_train_subgoal4_withoutER(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    record_fail_number[goal_id].append(1)
                    if dict_change[goal_id]==True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                    len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                        len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break
                            # if len(dict_goal_now[goal_id]['inform_slots']) == len(
                            #         complete_goal['inform_slots']) and len(
                            #         dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            #     dict_change[goal_id] = False

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    record_fail_number[goal_id].append(0)
                    t = 0
                    if len(record_fail_number[goal_id]) >=2:
                        for i in record_fail_number[goal_id]:
                            if i == 0:
                                t += 1
                            else:
                                t = 0
                        if t>=2:
                            # substitude goal with a subgoal
                            dict_change[goal_id] = True
                            # if have complete any slots
                            if len(tmp_p['inform_slots']) > 0 or len(tmp_p['request_slots']) > 0:
                                dict_goal_now[goal_id] = tmp_p
                            else:
                                # adding random slot
                                if len(complete_goal['inform_slots']) > 0:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['inform_slots'][complete_goal['inform_slots'].keys()[0]] = \
                                    complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                                else:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['request_slots'][complete_goal['request_slots'].keys()[0]] = \
                                    complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                            decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                # dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#CF
def simulation_epoch_train_subgoal5(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    record_fail_number[goal_id].append(1)
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        #first directly adding an inform_slot?
                        if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                            for i in complete_goal['inform_slots']:
                                if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                    dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                    break
                        else:
                        #then directly add an request_slot?
                            for i in complete_goal['request_slots']:
                                if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                    dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                    break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    record_fail_number[goal_id].append(0)
                    t = 0
                    if len(record_fail_number[goal_id]) >= 2:
                        for i in record_fail_number[goal_id]:
                            if i == 0:
                                t += 1
                            else:
                                t = 0
                        #         Mtimes
                        if t >= 3:
                            # substitude goal with a subgoal
                            dict_change[goal_id] = True
                            # if have complete any slots
                            if len(tmp_p['inform_slots']) > 0 or len(tmp_p['request_slots']) > 0:
                                dict_goal_now[goal_id] = tmp_p
                            else:
                                # adding random slot
                                if len(complete_goal['inform_slots']) > 0:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['inform_slots'][complete_goal['inform_slots'].keys()[0]] = \
                                    complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                                else:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['request_slots'][complete_goal['request_slots'].keys()[0]] = \
                                    complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                            decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#CF_continous without adding experience
def simulation_epoch_train_subgoal5_withoutER(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    record_fail_number[goal_id].append(1)
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        #first directly adding an inform_slot?
                        if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                            for i in complete_goal['inform_slots']:
                                if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                    dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                    break
                        else:
                        #then directly add an request_slot?
                            for i in complete_goal['request_slots']:
                                if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                    dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                    break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    record_fail_number[goal_id].append(0)
                    t = 0
                    if len(record_fail_number[goal_id]) >= 2:
                        for i in record_fail_number[goal_id]:
                            if i == 0:
                                t += 1
                            else:
                                t = 0
                        if t >= 2:
                            # substitude goal with a subgoal
                            dict_change[goal_id] = True
                            # if have complete any slots
                            if len(tmp_p['inform_slots']) > 0 or len(tmp_p['request_slots']) > 0:
                                dict_goal_now[goal_id] = tmp_p
                            else:
                                # adding random slot
                                if len(complete_goal['inform_slots']) > 0:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['inform_slots'][complete_goal['inform_slots'].keys()[0]] = \
                                    complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                                else:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['request_slots'][complete_goal['request_slots'].keys()[0]] = \
                                    complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                            decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                # dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#CE
def simulation_epoch_train_subgoal6(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    record_fail_number[goal_id].append(1)
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1-total_icm_loss) * (
                                    len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                        len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    record_fail_number[goal_id].append(0)
                    t = 0
                    if len(record_fail_number[goal_id]) >= 2:
                        for i in record_fail_number[goal_id]:
                            if i == 0:
                                t += 1
                            else:
                                t = 0
                        if t >= 2:
                            # substitude goal with a subgoal
                            dict_change[goal_id] = True
                            # if have complete any slots
                            if len(tmp_p['inform_slots']) > 0 or len(tmp_p['request_slots']) > 0:
                                dict_goal_now[goal_id] = tmp_p
                            else:
                                # adding random slot
                                if len(complete_goal['inform_slots']) > 0:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['inform_slots'][complete_goal['inform_slots'].keys()[0]] = \
                                    complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                                else:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['request_slots'][complete_goal['request_slots'].keys()[0]] = \
                                    complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                            decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#CE_without adding experience
def simulation_epoch_train_subgoal6_withoutER(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):
        goal_id = random.randint(0, num_goals-1)
        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    record_fail_number[goal_id].append(1)
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1-total_icm_loss) * (
                                    len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                        len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    record_fail_number[goal_id].append(0)
                    t = 0
                    if len(record_fail_number[goal_id]) >= 2:
                        for i in record_fail_number[goal_id]:
                            if i == 0:
                                t += 1
                            else:
                                t = 0
                        if t >= 2:
                            # substitude goal with a subgoal
                            dict_change[goal_id] = True
                            # if have complete any slots
                            if len(tmp_p['inform_slots']) > 0 or len(tmp_p['request_slots']) > 0:
                                dict_goal_now[goal_id] = tmp_p
                            else:
                                # adding random slot
                                if len(complete_goal['inform_slots']) > 0:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['inform_slots'][complete_goal['inform_slots'].keys()[0]] = \
                                    complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                                else:
                                    temp = {"request_slots": {}, "inform_slots": {}}
                                    temp['request_slots'][complete_goal['request_slots'].keys()[0]] = \
                                    complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                                    dict_goal_now[goal_id] = temp
                            decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count

                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                # dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

def simulation_epoch_train(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    res = {}

    for episode in xrange(simulation_epoch_size):
        dialog_manager.initialize_episode()
        # n_list = []
        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            # n_list.append(n)

            if episode_over:
                if reward > 0:
                    successes += 1
                cumulative_turns += dialog_manager.state_tracker.turn_count
                # print n_list
            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1

    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

def simulation_epoch_train_addingexperience(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    res = {}

    dialog_head = []

    for episode in xrange(simulation_epoch_size):
        dialog_manager.initialize_episode()
        # n_list = []

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        # subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporary goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        if dialog_manager.agent.experience_replay_pool == []:
            start_index = len(dialog_manager.agent.experience_replay_pool)
        else:
            start_index = len(dialog_manager.agent.experience_replay_pool) - 1

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            # n_list.append(n)

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p)  # temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        # subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---complete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])

            if episode_over:
                if reward > 0:
                    successes += 1
                cumulative_turns += dialog_manager.state_tracker.turn_count
                # print n_list

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []

            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1

    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res



#learned one by one
def simulation_epoch_train_subgoal7(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode != 0:
            if dict_change[goal_id] == True:
                goal_id = goal_id
        else:
            goal_id = random.randint(0, num_goals-1)

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        #first directly adding an inform_slot?
                        if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                            for i in complete_goal['inform_slots']:
                                if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                    dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                    break
                        else:
                        #then directly add an request_slot?
                            for i in complete_goal['request_slots']:
                                if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                    dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                    break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res


#learned one by one and  from easyness to hardness
def simulation_epoch_train_subgoal8(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])
                for i in goal_sort:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort):
                    goal_id = goal_sort[0][0]
                else:
                    goal_id = goal_sort[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        #first directly adding an inform_slot?
                        if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                            for i in complete_goal['inform_slots']:
                                if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                    dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                    break
                        else:
                        #then directly add an request_slot?
                            for i in complete_goal['request_slots']:
                                if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                    dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                    break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#R+ learned one by one
def simulation_epoch_train_subgoal9(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode != 0:
            if dict_change[goal_id] == True:
                goal_id = goal_id
        else:
            goal_id = random.randint(0, num_goals-1)

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1

                    if dict_change[goal_id] == True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res


#R+ learned one by one and  from easyness to hardness
def simulation_epoch_train_subgoal10(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])
                for i in goal_sort:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort):
                    goal_id = goal_sort[0][0]
                else:
                    goal_id = goal_sort[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#R+ learned one by one
def simulation_epoch_train_subgoal9_withoutadding(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode != 0:
            if dict_change[goal_id] == True:
                goal_id = goal_id
        else:
            goal_id = random.randint(0, num_goals-1)

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1

                    if dict_change[goal_id] == True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                # dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#RC+ learned one by one and from easyness to hardness
def simulation_epoch_train_subgoal10_withoutadding(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])
                for i in goal_sort:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort):
                    goal_id = goal_sort[0][0]
                else:
                    goal_id = goal_sort[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                # dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res


#E+ learned one by one
def simulation_epoch_train_subgoal11(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode != 0:
            if dict_change[goal_id] == True:
                goal_id = goal_id
        else:
            goal_id = random.randint(0, num_goals-1)

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1 - total_icm_loss) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        # if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots']) == len(complete_goal['inform_slots']) and len(
                                dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

def simulation_epoch_train_subgoal11_withoutadding(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode != 0:
            if dict_change[goal_id] == True:
                goal_id = goal_id
        else:
            goal_id = random.randint(0, num_goals-1)

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1 - total_icm_loss) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        # if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots']) == len(complete_goal['inform_slots']) and len(
                                dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#E+ learned one by one and  from easyness to hardness
def simulation_epoch_train_subgoal12(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])
                for i in goal_sort:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort):
                    goal_id = goal_sort[0][0]
                else:
                    goal_id = goal_sort[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1 - total_icm_loss) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        # if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots']) == len(complete_goal['inform_slots']) and len(
                                dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

def simulation_epoch_train_subgoal12_withoutadding(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])
                for i in goal_sort:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort):
                    goal_id = goal_sort[0][0]
                else:
                    goal_id = goal_sort[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1 - total_icm_loss) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        # if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots']) == len(complete_goal['inform_slots']) and len(
                                dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res


#learned one by one and  from  hardness to easiness
def simulation_epoch_train_subgoal13(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort_reverse[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])

                for i in goal_sort_reverse:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort_reverse.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort_reverse):
                    goal_id = goal_sort_reverse[0][0]
                else:
                    goal_id = goal_sort_reverse[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        #first directly adding an inform_slot?
                        if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                            for i in complete_goal['inform_slots']:
                                if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                    dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                    break
                        else:
                        #then directly add an request_slot?
                            for i in complete_goal['request_slots']:
                                if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                    dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                    break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

def simulation_epoch_train_subgoal13_withoutadding(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort_reverse[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])
                for i in goal_sort_reverse:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort_reverse.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort_reverse):
                    goal_id = goal_sort_reverse[0][0]
                else:
                    goal_id = goal_sort_reverse[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id]==True:
                        #first directly adding an inform_slot?
                        if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                            for i in complete_goal['inform_slots']:
                                if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                    dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                    break
                        else:
                        #then directly add an request_slot?
                            for i in complete_goal['request_slots']:
                                if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                    dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                    break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#R+ learned one by one and  from  hardness to easiness
def simulation_epoch_train_subgoal14(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort_reverse[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])

                for i in goal_sort_reverse:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort_reverse.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort_reverse):
                    goal_id = goal_sort_reverse[0][0]
                else:
                    goal_id = goal_sort_reverse[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

def simulation_epoch_train_subgoal14_withoutadding(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort_reverse[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])

                for i in goal_sort_reverse:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort_reverse.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort_reverse):
                    goal_id = goal_sort_reverse[0][0]
                else:
                    goal_id = goal_sort_reverse[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        add_slot_number = int(round((cumulative_reward / dialog_manager.max_reward) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        #if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots'])==len(complete_goal['inform_slots']) and len(dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

#E+ learned one by one and learning  from  hardness to easiness
def simulation_epoch_train_subgoal15(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort_reverse[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])
                for i in goal_sort_reverse:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort_reverse.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort_reverse):
                    goal_id = goal_sort_reverse[0][0]
                else:
                    goal_id = goal_sort_reverse[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1 - total_icm_loss) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        # if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots']) == len(complete_goal['inform_slots']) and len(
                                dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

def simulation_epoch_train_subgoal15_withoutadding(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0

    dialog_head = []
    total_icm_loss = 0


    global dict_change
    global dict_goal_now
    global decompose_number

    res = {}
    for episode in xrange(simulation_epoch_size):

        if episode == 0:
            goal_id = goal_sort_reverse[0][0]
        else:
            if dict_change[goal_id] == True:
                goal_id = goal_id
            else:
                # if 'ticket' in all_goal_set[goal_id]['request_slots']:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(
                #         all_goal_set[goal_id]['request_slots']) - 1
                # else:
                #     slot_n = len(all_goal_set[goal_id]['inform_slots']) + len(all_goal_set[goal_id]['request_slots'])

                for i in goal_sort_reverse:
                    if goal_id in i:
                        slot_n = i[1]

                goal_id_index = goal_sort_reverse.index((goal_id, slot_n))
                if goal_id_index + 1 == len(goal_sort_reverse):
                    goal_id = goal_sort_reverse[0][0]
                else:
                    goal_id = goal_sort_reverse[goal_id_index + 1][0]

        goal = dict_goal_now[goal_id]
        complete_goal = all_goal_set[goal_id]
        dialog_manager.initialize_episode(current_goal_len=len(goal['inform_slots'])+len(goal['request_slots']),
                                          complete_goal_len=len(complete_goal['inform_slots'])+len(complete_goal['request_slots']),
                                          selected_goal=goal)

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        #subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporay goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        start_index = len(dialog_manager.agent.experience_replay_pool)

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            step += 1
            total_icm_loss += dialog_manager.icm_loss

            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p) #temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        #subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---compete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) - 1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])


            if episode_over:
                if reward > 0:
                    successes += 1
                    #add diffuclty of subgoal
                    #whether the goal have been substitute
                    if dict_change[goal_id] == True:
                        print 'total_icm_loss', total_icm_loss
                        add_slot_number = int(round((1 - total_icm_loss) * (
                                len(complete_goal['inform_slots']) + len(complete_goal['request_slots']) - (
                                len(goal['inform_slots']) + len(goal['request_slots'])))))
                        print 'add_slot_number', add_slot_number

                        for i in range(add_slot_number):
                            # first directly adding an inform_slot?
                            if len(dict_goal_now[goal_id]['inform_slots']) < len(complete_goal['inform_slots']):
                                for i in complete_goal['inform_slots']:
                                    if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                                        dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                                        break
                            else:
                                # then directly add an request_slot?
                                for i in complete_goal['request_slots']:
                                    if i not in dict_goal_now[goal_id]['request_slots'].keys():
                                        dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                                        break

                        # #first directly adding an inform_slot?
                        # if len(dict_goal_now[goal_id]['inform_slots'])<len(complete_goal['inform_slots']):
                        #     for i in complete_goal['inform_slots']:
                        #         if i not in dict_goal_now[goal_id]['inform_slots'].keys():
                        #             dict_goal_now[goal_id]['inform_slots'][i] = complete_goal['inform_slots'][i]
                        #             break
                        # else:
                        # #then directly add an request_slot?
                        #     for i in complete_goal['request_slots']:
                        #         if i not in dict_goal_now[goal_id]['request_slots'].keys():
                        #             dict_goal_now[goal_id]['request_slots'][i] = complete_goal['request_slots'][i]
                        #             break

                        # if complete the entire goal
                        if len(dict_goal_now[goal_id]['inform_slots']) == len(complete_goal['inform_slots']) and len(
                                dict_goal_now[goal_id]['request_slots']) == len(complete_goal['request_slots']):
                            dict_change[goal_id] = False

                        if total_icm_loss == 0:
                            dict_change = False
                            dict_goal_now[goal_id] = complete_goal
                else:
                    #substitude goal with a subgoal
                    dict_change[goal_id] = True
                    #if have complete any slots
                    if len(tmp_p['inform_slots'])>0 or len(tmp_p['request_slots'])>0:
                        dict_goal_now[goal_id] = tmp_p
                    else:
                        #adding random slot
                        if len(complete_goal['inform_slots'])>0:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['inform_slots'][complete_goal['inform_slots'].keys()[0]]=complete_goal['inform_slots'][complete_goal['inform_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                        else:
                            temp = {"request_slots": {}, "inform_slots": {}}
                            temp['request_slots'][complete_goal['request_slots'].keys()[0]] = complete_goal['request_slots'][complete_goal['request_slots'].keys()[0]]
                            dict_goal_now[goal_id] = temp
                    decompose_number = decompose_number + 1

                subgoal_number[goal_id] = len(dict_goal_now[goal_id]['inform_slots']) + len(dict_goal_now[goal_id]['request_slots'])
                cumulative_turns += dialog_manager.state_tracker.turn_count



                # for i in dialog_head:
                #     dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []


            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1


    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (
        loss / (update_count + 1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes) / simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward) / simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns) / simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward) / simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (
    res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

""" Run N simulation Dialogues """
def simulation_epoch(simulation_epoch_size, train=False):
    successes = 0
    cumulative_reward = 0
    intrinsic_reward = 0
    cumulative_turns = 0
    loss = 0
    update_count = 0
    step = 0
    
    res = {}
    for episode in xrange(simulation_epoch_size):
        dialog_manager.initialize_episode()
        episode_over = False
        while(not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            #cumulative_intrinsic_reward += dialog_manager.instrinsic_reward
            cumulative_reward += reward
            step += 1
            if episode_over:
                if reward > 0: 
                    successes += 1
                    #print ("simulation episode %s: Success" % (episode))
                #else: print ("simulation episode %s: Fail" % (episode))
                cumulative_turns += dialog_manager.state_tracker.turn_count
            if train and step % 1 == 0:
                err, i_r = agent.train(batch_size, 1)
                loss += err
                intrinsic_reward += i_r
                update_count += 1
    if train:
        print ("cur bellman err %.4f, experience replay pool %s" % (loss/(update_count+1e-10), len(agent.experience_replay_pool)))
    res['success_rate'] = float(successes)/simulation_epoch_size
    res['ave_reward'] = float(cumulative_reward)/simulation_epoch_size
    res['ave_turns'] = float(cumulative_turns)/simulation_epoch_size
    res['ave_intrinsic_reward'] = float(intrinsic_reward)/simulation_epoch_size
    print ("simulation success rate %s, ave reward %s, ave turns %s, i_r %s" % (res['success_rate'], res['ave_reward'], res['ave_turns'], res['ave_intrinsic_reward']))
    return res

""" Warm_Start Simulation (by Rule Policy) """
def warm_start_simulation():
    successes = 0
    cumulative_reward = 0
    cumulative_turns = 0
    
    res = {}
    warm_start_run_epochs = 0
    for episode in xrange(warm_start_epochs):
        dialog_manager.initialize_episode()
        episode_over = False
        while(not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward
            if episode_over:
                if reward > 0: 
                    successes += 1
                    print ("warm_start simulation episode %s: Success" % (episode))
                else: print ("warm_start simulation episode %s: Fail" % (episode))
                cumulative_turns += dialog_manager.state_tracker.turn_count
        
        warm_start_run_epochs += 1
        
        if len(agent.experience_replay_pool) >= agent.experience_replay_pool_size:
            break

    agent.warm_start = 2
    res['success_rate'] = float(successes)/warm_start_run_epochs
    res['ave_reward'] = float(cumulative_reward)/warm_start_run_epochs
    res['ave_turns'] = float(cumulative_turns)/warm_start_run_epochs
    print ("Warm_Start %s epochs, success rate %s, ave reward %s, ave turns %s" % (episode+1, res['success_rate'], res['ave_reward'], res['ave_turns']))
    print ("Current experience replay buffer size %s" % (len(agent.experience_replay_pool)))

def warm_start_simulation_addingexperience():
    successes = 0
    cumulative_reward = 0
    cumulative_turns = 0

    res = {}
    warm_start_run_epochs = 0

    dialog_head = []

    for episode in xrange(warm_start_epochs):
        dialog_manager.initialize_episode()

        import copy
        ##current dialogue goal
        G = copy.deepcopy(dialog_manager.user.goal)
        C = G["inform_slots"]
        R = G["request_slots"]
        # subgoal
        tmp_p = {"request_slots": {}, "inform_slots": {}}

        ##temporary goal
        tmp_q = {}
        tmp_q["inform_slots"] = C
        tmp_q["request_slots"] = R

        if dialog_manager.agent.experience_replay_pool == []:
            start_index = len(dialog_manager.agent.experience_replay_pool)
        else:
            start_index = len(dialog_manager.agent.experience_replay_pool) -1

        episode_over = False
        while (not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            cumulative_reward += reward


            segment_outcome = False
            for key in tmp_q.keys():
                slots_dict = tmp_q[key]
                for _slot in slots_dict.keys():
                    tmpG = copy.deepcopy(tmp_p)  # temporary subgoal
                    tmpG[key][_slot] = slots_dict[_slot]
                    if valid_success(tmpG, dialog_manager.state_tracker.current_slots):
                        segment_outcome = True
                        # subgoal
                        tmp_p[key][_slot] = slots_dict[_slot]
                        del tmp_q[key][_slot]

            # adding experience
            if segment_outcome == True:
                # print("---complete subgoal---")
                ### [1, 2, 3, 4, (5, 6, 7, 8), 9, 10]   start_index = 4, current_index = 7, tail_start_index = 8
                current_dialog_index = len(dialog_manager.agent.experience_replay_pool) -1
                copy_experience_replay_pool = list(copy.deepcopy(dialog_manager.agent.experience_replay_pool))
                dialog_head.append(copy_experience_replay_pool[start_index:])

            if episode_over:
                if reward > 0:
                    successes += 1
                    print ("warm_start simulation episode %s: Success" % (episode))
                else:
                    print ("warm_start simulation episode %s: Fail" % (episode))
                cumulative_turns += dialog_manager.state_tracker.turn_count

                for i in dialog_head:
                    dialog_manager.agent.experience_replay_pool.extend(i)
                dialog_head = []

        warm_start_run_epochs += 1

        if len(agent.experience_replay_pool) >= agent.experience_replay_pool_size:
            break

    agent.warm_start = 2
    res['success_rate'] = float(successes) / warm_start_run_epochs
    res['ave_reward'] = float(cumulative_reward) / warm_start_run_epochs
    res['ave_turns'] = float(cumulative_turns) / warm_start_run_epochs
    print ("Warm_Start %s epochs, success rate %s, ave reward %s, ave turns %s" % (
    episode + 1, res['success_rate'], res['ave_reward'], res['ave_turns']))
    print ("Current experience replay buffer size %s" % (len(agent.experience_replay_pool)))


#returns_f = open('returns2.log', 'w+')
def run_episodes(count, status):
    successes = 0
    cumulative_reward = 0
    cumulative_turns = 0
    
    if (agt == 9 or agt == 12 or agt == 13) and params['trained_model_path'] == None and warm_start == 1:
        print ('warm_start starting ...')
        warm_start_simulation()
        # warm_start_simulation_addingexperience()

        print ('warm_start finished, start RL training ...')

    for episode in xrange(count):
        print ("Episode: %s" % (episode))
        dialog_manager.initialize_episode()

        episode_over = False

        while(not episode_over):
            episode_over, reward = dialog_manager.next_turn()
            agent.returns[0].append(reward)
            cumulative_reward += reward

            if episode_over:
                if reward > 0:
                    print ("Successful Dialog!")
                    successes += 1
                else: print ("Failed Dialog!")

                cumulative_turns += dialog_manager.state_tracker.turn_count


        # '''
        # for i in reversed(range(1, len(agent.returns[0]))):
        #     agent.returns[0][i - 1] += agent.returns[0][i] * 0.95
        #     returns_f.writelines('%f %f\n' % (agent.returns[0][i], agent.returns[1][i]))
        # returns_f.writelines('%f %f\n' % (agent.returns[0][0], agent.returns[1][0]))
        # print(agent.returns)
        # '''
        # simulation
        if (agt == 9 or agt == 12 or agt == 13) and params['trained_model_path'] == None:
            agent.predict_mode = True


            #T
            # if episode < 250:
            #     # simulation_res = simulation_epoch_train(5, train=True)
            #     simulation_res = simulation_epoch_train_addingexperience(5, train=True)
            # else:
            #     simulation_res = simulation_epoch_train_private_subgoal(5, train=True)

            simulation_res = simulation_epoch_train_subgoal5(5, train=True)
            # simulation_res = simulation_epoch_train(5, train=True)

            a = copy.deepcopy(subgoal_number)
            subgoal_number_records[episode] = a

            b = copy.deepcopy(decompose_number)
            decompose_number_records[episode] = b

            save_performance_records(params['write_model_dir'], 'subgoal', subgoal_number_records)
            save_performance_records(params['write_model_dir'], 'decomposenumber', decompose_number_records)


            performance_records['ave_intrinsic_reward'][episode] = simulation_res['ave_intrinsic_reward']
            agent.predict_mode = False

            simulation_res = simulation_epoch(simulation_epoch_size, train=False)
            performance_records['success_rate'][episode] = simulation_res['success_rate']
            performance_records['ave_turns'][episode] = simulation_res['ave_turns']
            performance_records['ave_reward'][episode] = simulation_res['ave_reward']

            if simulation_res['success_rate'] >= best_res['success_rate']:
                if simulation_res['success_rate'] >= success_rate_threshold: # threshold = 0.30
                    agent.reset_replay()
                    agent.predict_mode = True
                    simulation_epoch(simulation_epoch_size, train=False)
                    agent.predict_mode = False

            if simulation_res['success_rate'] > best_res['success_rate']:
                best_model['model'] = copy.deepcopy(agent)
                best_res['success_rate'] = simulation_res['success_rate']
                best_res['ave_reward'] = simulation_res['ave_reward']
                best_res['ave_turns'] = simulation_res['ave_turns']
                best_res['epoch'] = episode


            print ("Simulation success rate %s, Ave reward %s, Ave turns %s, Best success rate %s" % (performance_records['success_rate'][episode], performance_records['ave_reward'][episode], performance_records['ave_turns'][episode], best_res['success_rate']))
            print ('intrinsic reward: %s' %(performance_records['ave_intrinsic_reward'][episode]))
            # print ('the slot number of each subgoal: %s' % (subgoal_number))


            if episode % save_check_point == 0 and params['trained_model_path'] == None: # save the model every 10 episodes
                save_model(params['write_model_dir'], agt, best_res['success_rate'], best_model['model'], best_res['epoch'], episode)
                save_performance_records(params['write_model_dir'], num, performance_records)


        print("Progress: %s / %s, Success rate: %s / %s Avg reward: %.2f Avg turns: %.2f" % (episode+1, count, successes, episode+1, float(cumulative_reward)/(episode+1), float(cumulative_turns)/(episode+1)))
        print ('Epsilon: %.4f' % agent.epsilon)
        agent.epsilon *= 0.95


    print("Success rate: %s / %s Avg reward: %.2f Avg turns: %.2f" % (successes, count, float(cumulative_reward)/count, float(cumulative_turns)/count))
    status['successes'] += successes
    status['count'] += count

    if (agt == 9 or agt == 12 or agt == 13)  and params['trained_model_path'] == None:
        save_model(params['write_model_dir'], agt, best_res['success_rate'], best_model['model'], best_res['epoch'], count)
        save_performance_records(params['write_model_dir'], num, performance_records)

    
run_episodes(num_episodes, status)
